{"ast":null,"code":"/*!\n  * vue-i18n v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar shared = require('@intlify/shared');\nvar coreBase = require('@intlify/core-base');\nvar vue = require('vue');\n\n/**\r\n * Vue I18n Version\r\n *\r\n * @remarks\r\n * Semver format. Same format as the package.json `version` field.\r\n *\r\n * @VueI18nGeneral\r\n */\nconst VERSION = '9.2.2';\nlet code$1 = coreBase.CoreWarnCodes.__EXTEND_POINT__;\nconst inc$1 = () => ++code$1;\nconst I18nWarnCodes = {\n  FALLBACK_TO_ROOT: code$1,\n  NOT_SUPPORTED_PRESERVE: inc$1(),\n  NOT_SUPPORTED_FORMATTER: inc$1(),\n  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),\n  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),\n  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),\n  NOT_FOUND_PARENT_SCOPE: inc$1() // 13\n};\n\nconst warnMessages = {\n  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,\n  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`\n};\nfunction getWarnMessage(code, ...args) {\n  return shared.format(warnMessages[code], ...args);\n}\nlet code = coreBase.CompileErrorCodes.__EXTEND_POINT__;\nconst inc = () => ++code;\nconst I18nErrorCodes = {\n  // composer module errors\n  UNEXPECTED_RETURN_TYPE: code,\n  // legacy module errors\n  INVALID_ARGUMENT: inc(),\n  // i18n module errors\n  MUST_BE_CALL_SETUP_TOP: inc(),\n  NOT_INSLALLED: inc(),\n  NOT_AVAILABLE_IN_LEGACY_MODE: inc(),\n  // directive module errors\n  REQUIRED_VALUE: inc(),\n  INVALID_VALUE: inc(),\n  // vue-devtools errors\n  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc(),\n  NOT_INSLALLED_WITH_PROVIDE: inc(),\n  // unexpected error\n  UNEXPECTED_ERROR: inc(),\n  // not compatible legacy vue-i18n constructor\n  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc(),\n  // bridge support vue 2.x only\n  BRIDGE_SUPPORT_VUE_2_ONLY: inc(),\n  // need to define `i18n` option in `allowComposition: true` and `useScope: 'local' at `useI18n``\n  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc(),\n  // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly\n  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc(),\n  // for enhancement\n  __EXTEND_POINT__: inc() // 29\n};\n\nfunction createI18nError(code, ...args) {\n  return coreBase.createCompileError(code, null, {\n    messages: errorMessages,\n    args\n  });\n}\nconst errorMessages = {\n  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: 'Unexpected return type in composer',\n  [I18nErrorCodes.INVALID_ARGUMENT]: 'Invalid argument',\n  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: 'Must be called at the top of a `setup` function',\n  [I18nErrorCodes.NOT_INSLALLED]: 'Need to install with `app.use` function',\n  [I18nErrorCodes.UNEXPECTED_ERROR]: 'Unexpected error',\n  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: 'Not available in legacy mode',\n  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,\n  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,\n  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,\n  [I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE]: 'Need to install with `provide` function',\n  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: 'Not compatible legacy VueI18n.',\n  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: 'vue-i18n-bridge support Vue 2.x only',\n  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: 'Must define ‘i18n’ option or custom block in Composition API with using local scope in Legacy API mode',\n  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: 'Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly'\n};\nconst TransrateVNodeSymbol = /* #__PURE__*/shared.makeSymbol('__transrateVNode');\nconst DatetimePartsSymbol = /* #__PURE__*/shared.makeSymbol('__datetimeParts');\nconst NumberPartsSymbol = /* #__PURE__*/shared.makeSymbol('__numberParts');\nconst EnableEmitter = /* #__PURE__*/shared.makeSymbol('__enableEmitter');\nconst DisableEmitter = /* #__PURE__*/shared.makeSymbol('__disableEmitter');\nconst SetPluralRulesSymbol = shared.makeSymbol('__setPluralRules');\nshared.makeSymbol('__intlifyMeta');\nconst InejctWithOption = /* #__PURE__*/shared.makeSymbol('__injectWithOption');\nconst __VUE_I18N_BRIDGE__ = '__VUE_I18N_BRIDGE__';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Transform flat json in obj to normal json in obj\r\n */\nfunction handleFlatJson(obj) {\n  // check obj\n  if (!shared.isObject(obj)) {\n    return obj;\n  }\n  for (const key in obj) {\n    // check key\n    if (!shared.hasOwn(obj, key)) {\n      continue;\n    }\n    // handle for normal json\n    if (!key.includes('.')) {\n      // recursive process value if value is also a object\n      if (shared.isObject(obj[key])) {\n        handleFlatJson(obj[key]);\n      }\n    }\n    // handle for flat json, transform to normal json\n    else {\n      // go to the last object\n      const subKeys = key.split('.');\n      const lastIndex = subKeys.length - 1;\n      let currentObj = obj;\n      for (let i = 0; i < lastIndex; i++) {\n        if (!(subKeys[i] in currentObj)) {\n          currentObj[subKeys[i]] = {};\n        }\n        currentObj = currentObj[subKeys[i]];\n      }\n      // update last object value, delete old property\n      currentObj[subKeys[lastIndex]] = obj[key];\n      delete obj[key];\n      // recursive process value if value is also a object\n      if (shared.isObject(currentObj[subKeys[lastIndex]])) {\n        handleFlatJson(currentObj[subKeys[lastIndex]]);\n      }\n    }\n  }\n  return obj;\n}\nfunction getLocaleMessages(locale, options) {\n  const {\n    messages,\n    __i18n,\n    messageResolver,\n    flatJson\n  } = options;\n  // prettier-ignore\n  const ret = shared.isPlainObject(messages) ? messages : shared.isArray(__i18n) ? {} : {\n    [locale]: {}\n  };\n  // merge locale messages of i18n custom block\n  if (shared.isArray(__i18n)) {\n    __i18n.forEach(custom => {\n      if ('locale' in custom && 'resource' in custom) {\n        const {\n          locale,\n          resource\n        } = custom;\n        if (locale) {\n          ret[locale] = ret[locale] || {};\n          deepCopy(resource, ret[locale]);\n        } else {\n          deepCopy(resource, ret);\n        }\n      } else {\n        shared.isString(custom) && deepCopy(JSON.parse(custom), ret);\n      }\n    });\n  }\n  // handle messages for flat json\n  if (messageResolver == null && flatJson) {\n    for (const key in ret) {\n      if (shared.hasOwn(ret, key)) {\n        handleFlatJson(ret[key]);\n      }\n    }\n  }\n  return ret;\n}\nconst isNotObjectOrIsArray = val => !shared.isObject(val) || shared.isArray(val);\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCopy(src, des) {\n  // src and des should both be objects, and non of then can be a array\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n  for (const key in src) {\n    if (shared.hasOwn(src, key)) {\n      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n        // replace with src[key] when:\n        // src[key] or des[key] is not a object, or\n        // src[key] or des[key] is a array\n        des[key] = src[key];\n      } else {\n        // src[key] and des[key] are both object, merge them\n        deepCopy(src[key], des[key]);\n      }\n    }\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getComponentOptions(instance) {\n  return instance.type;\n}\nfunction adjustI18nResources(global, options, componentOptions // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n  let messages = shared.isObject(options.messages) ? options.messages : {};\n  if ('__i18nGlobal' in componentOptions) {\n    messages = getLocaleMessages(global.locale.value, {\n      messages,\n      __i18n: componentOptions.__i18nGlobal\n    });\n  }\n  // merge locale messages\n  const locales = Object.keys(messages);\n  if (locales.length) {\n    locales.forEach(locale => {\n      global.mergeLocaleMessage(locale, messages[locale]);\n    });\n  }\n  {\n    // merge datetime formats\n    if (shared.isObject(options.datetimeFormats)) {\n      const locales = Object.keys(options.datetimeFormats);\n      if (locales.length) {\n        locales.forEach(locale => {\n          global.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n        });\n      }\n    }\n    // merge number formats\n    if (shared.isObject(options.numberFormats)) {\n      const locales = Object.keys(options.numberFormats);\n      if (locales.length) {\n        locales.forEach(locale => {\n          global.mergeNumberFormat(locale, options.numberFormats[locale]);\n        });\n      }\n    }\n  }\n}\nfunction createTextNode(key) {\n  return vue.createVNode(vue.Text, null, key, 0);\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// extend VNode interface\nconst DEVTOOLS_META = '__INTLIFY_META__';\nlet composerID = 0;\nfunction defineCoreMissingHandler(missing) {\n  return (ctx, locale, key, type) => {\n    return missing(locale, key, vue.getCurrentInstance() || undefined, type);\n  };\n}\n// for Intlify DevTools\nconst getMetaInfo = () => {\n  const instance = vue.getCurrentInstance();\n  let meta = null; // eslint-disable-line @typescript-eslint/no-explicit-any\n  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? {\n    [DEVTOOLS_META]: meta\n  } // eslint-disable-line @typescript-eslint/no-explicit-any\n  : null;\n};\n/**\r\n * Create composer interface factory\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction createComposer(options = {}, VueI18nLegacy) {\n  const {\n    __root\n  } = options;\n  const _isGlobal = __root === undefined;\n  let _inheritLocale = shared.isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = vue.ref(\n  // prettier-ignore\n  __root && _inheritLocale ? __root.locale.value : shared.isString(options.locale) ? options.locale : coreBase.DEFAULT_LOCALE);\n  const _fallbackLocale = vue.ref(\n  // prettier-ignore\n  __root && _inheritLocale ? __root.fallbackLocale.value : shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value);\n  const _messages = vue.ref(getLocaleMessages(_locale.value, options));\n  // prettier-ignore\n  const _datetimeFormats = vue.ref(shared.isPlainObject(options.datetimeFormats) ? options.datetimeFormats : {\n    [_locale.value]: {}\n  });\n  // prettier-ignore\n  const _numberFormats = vue.ref(shared.isPlainObject(options.numberFormats) ? options.numberFormats : {\n    [_locale.value]: {}\n  });\n  // warning suppress options\n  // prettier-ignore\n  let _missingWarn = __root ? __root.missingWarn : shared.isBoolean(options.missingWarn) || shared.isRegExp(options.missingWarn) ? options.missingWarn : true;\n  // prettier-ignore\n  let _fallbackWarn = __root ? __root.fallbackWarn : shared.isBoolean(options.fallbackWarn) || shared.isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  // prettier-ignore\n  let _fallbackRoot = __root ? __root.fallbackRoot : shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  // configure fall back to root\n  let _fallbackFormat = !!options.fallbackFormat;\n  // runtime missing\n  let _missing = shared.isFunction(options.missing) ? options.missing : null;\n  let _runtimeMissing = shared.isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;\n  // postTranslation handler\n  let _postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : null;\n  // prettier-ignore\n  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : shared.isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  let _escapeParameter = !!options.escapeParameter;\n  // custom linked modifiers\n  // prettier-ignore\n  const _modifiers = __root ? __root.modifiers : shared.isPlainObject(options.modifiers) ? options.modifiers : {};\n  // pluralRules\n  let _pluralRules = options.pluralRules || __root && __root.pluralRules;\n  // runtime context\n  // eslint-disable-next-line prefer-const\n  let _context;\n  const getCoreContext = () => {\n    _isGlobal && coreBase.setFallbackContext(null);\n    const ctxOptions = {\n      version: VERSION,\n      locale: _locale.value,\n      fallbackLocale: _fallbackLocale.value,\n      messages: _messages.value,\n      modifiers: _modifiers,\n      pluralRules: _pluralRules,\n      missing: _runtimeMissing === null ? undefined : _runtimeMissing,\n      missingWarn: _missingWarn,\n      fallbackWarn: _fallbackWarn,\n      fallbackFormat: _fallbackFormat,\n      unresolving: true,\n      postTranslation: _postTranslation === null ? undefined : _postTranslation,\n      warnHtmlMessage: _warnHtmlMessage,\n      escapeParameter: _escapeParameter,\n      messageResolver: options.messageResolver,\n      __meta: {\n        framework: 'vue'\n      }\n    };\n    {\n      ctxOptions.datetimeFormats = _datetimeFormats.value;\n      ctxOptions.numberFormats = _numberFormats.value;\n      ctxOptions.__datetimeFormatters = shared.isPlainObject(_context) ? _context.__datetimeFormatters : undefined;\n      ctxOptions.__numberFormatters = shared.isPlainObject(_context) ? _context.__numberFormatters : undefined;\n    }\n    {\n      ctxOptions.__v_emitter = shared.isPlainObject(_context) ? _context.__v_emitter : undefined;\n    }\n    const ctx = coreBase.createCoreContext(ctxOptions);\n    _isGlobal && coreBase.setFallbackContext(ctx);\n    return ctx;\n  };\n  _context = getCoreContext();\n  coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n  // track reactivity\n  function trackReactivityValues() {\n    return [_locale.value, _fallbackLocale.value, _messages.value, _datetimeFormats.value, _numberFormats.value];\n  }\n  // locale\n  const locale = vue.computed({\n    get: () => _locale.value,\n    set: val => {\n      _locale.value = val;\n      _context.locale = _locale.value;\n    }\n  });\n  // fallbackLocale\n  const fallbackLocale = vue.computed({\n    get: () => _fallbackLocale.value,\n    set: val => {\n      _fallbackLocale.value = val;\n      _context.fallbackLocale = _fallbackLocale.value;\n      coreBase.updateFallbackLocale(_context, _locale.value, val);\n    }\n  });\n  // messages\n  const messages = vue.computed(() => _messages.value);\n  // datetimeFormats\n  const datetimeFormats = /* #__PURE__*/vue.computed(() => _datetimeFormats.value);\n  // numberFormats\n  const numberFormats = /* #__PURE__*/vue.computed(() => _numberFormats.value);\n  // getPostTranslationHandler\n  function getPostTranslationHandler() {\n    return shared.isFunction(_postTranslation) ? _postTranslation : null;\n  }\n  // setPostTranslationHandler\n  function setPostTranslationHandler(handler) {\n    _postTranslation = handler;\n    _context.postTranslation = handler;\n  }\n  // getMissingHandler\n  function getMissingHandler() {\n    return _missing;\n  }\n  // setMissingHandler\n  function setMissingHandler(handler) {\n    if (handler !== null) {\n      _runtimeMissing = defineCoreMissingHandler(handler);\n    }\n    _missing = handler;\n    _context.missing = _runtimeMissing;\n  }\n  function isResolvedTranslateMessage(type, arg // eslint-disable-line @typescript-eslint/no-explicit-any\n  ) {\n    return type !== 'translate' || !arg.resolvedMessage;\n  }\n  const wrapWithDeps = (fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {\n    trackReactivityValues(); // track reactive dependency\n    // NOTE: experimental !!\n    let ret;\n    {\n      try {\n        coreBase.setAdditionalMeta(getMetaInfo());\n        if (!_isGlobal) {\n          _context.fallbackContext = __root ? coreBase.getFallbackContext() : undefined;\n        }\n        ret = fn(_context);\n      } finally {\n        coreBase.setAdditionalMeta(null);\n        if (!_isGlobal) {\n          _context.fallbackContext = undefined;\n        }\n      }\n    }\n    if (shared.isNumber(ret) && ret === coreBase.NOT_REOSLVED) {\n      const [key, arg2] = argumentParser();\n      if (__root && shared.isString(key) && isResolvedTranslateMessage(warnType, arg2)) {\n        if (_fallbackRoot && (coreBase.isTranslateFallbackWarn(_fallbackWarn, key) || coreBase.isTranslateMissingWarn(_missingWarn, key))) {\n          shared.warn(getWarnMessage(I18nWarnCodes.FALLBACK_TO_ROOT, {\n            key,\n            type: warnType\n          }));\n        }\n        // for vue-devtools timeline event\n        {\n          const {\n            __v_emitter: emitter\n          } = _context;\n          if (emitter && _fallbackRoot) {\n            emitter.emit(\"fallback\" /* FALBACK */, {\n              type: warnType,\n              key,\n              to: 'global',\n              groupId: `${warnType}:${key}`\n            });\n          }\n        }\n      }\n      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);\n    } else if (successCondition(ret)) {\n      return ret;\n    } else {\n      /* istanbul ignore next */\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);\n    }\n  };\n  // t\n  function t(...args) {\n    return wrapWithDeps(context => Reflect.apply(coreBase.translate, null, [context, ...args]), () => coreBase.parseTranslateArgs(...args), 'translate', root => Reflect.apply(root.t, root, [...args]), key => key, val => shared.isString(val));\n  }\n  // rt\n  function rt(...args) {\n    const [arg1, arg2, arg3] = args;\n    if (arg3 && !shared.isObject(arg3)) {\n      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n    }\n    return t(...[arg1, arg2, shared.assign({\n      resolvedMessage: true\n    }, arg3 || {})]);\n  }\n  // d\n  function d(...args) {\n    return wrapWithDeps(context => Reflect.apply(coreBase.datetime, null, [context, ...args]), () => coreBase.parseDateTimeArgs(...args), 'datetime format', root => Reflect.apply(root.d, root, [...args]), () => coreBase.MISSING_RESOLVE_VALUE, val => shared.isString(val));\n  }\n  // n\n  function n(...args) {\n    return wrapWithDeps(context => Reflect.apply(coreBase.number, null, [context, ...args]), () => coreBase.parseNumberArgs(...args), 'number format', root => Reflect.apply(root.n, root, [...args]), () => coreBase.MISSING_RESOLVE_VALUE, val => shared.isString(val));\n  }\n  // for custom processor\n  function normalize(values) {\n    return values.map(val => shared.isString(val) || shared.isNumber(val) || shared.isBoolean(val) ? createTextNode(String(val)) : val);\n  }\n  const interpolate = val => val;\n  const processor = {\n    normalize,\n    interpolate,\n    type: 'vnode'\n  };\n  // transrateVNode, using for `i18n-t` component\n  function transrateVNode(...args) {\n    return wrapWithDeps(context => {\n      let ret;\n      const _context = context;\n      try {\n        _context.processor = processor;\n        ret = Reflect.apply(coreBase.translate, null, [_context, ...args]);\n      } finally {\n        _context.processor = null;\n      }\n      return ret;\n    }, () => coreBase.parseTranslateArgs(...args), 'translate',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[TransrateVNodeSymbol](...args), key => [createTextNode(key)], val => shared.isArray(val));\n  }\n  // numberParts, using for `i18n-n` component\n  function numberParts(...args) {\n    return wrapWithDeps(context => Reflect.apply(coreBase.number, null, [context, ...args]), () => coreBase.parseNumberArgs(...args), 'number format',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[NumberPartsSymbol](...args), () => [], val => shared.isString(val) || shared.isArray(val));\n  }\n  // datetimeParts, using for `i18n-d` component\n  function datetimeParts(...args) {\n    return wrapWithDeps(context => Reflect.apply(coreBase.datetime, null, [context, ...args]), () => coreBase.parseDateTimeArgs(...args), 'datetime format',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[DatetimePartsSymbol](...args), () => [], val => shared.isString(val) || shared.isArray(val));\n  }\n  function setPluralRules(rules) {\n    _pluralRules = rules;\n    _context.pluralRules = _pluralRules;\n  }\n  // te\n  function te(key, locale) {\n    const targetLocale = shared.isString(locale) ? locale : _locale.value;\n    const message = getLocaleMessage(targetLocale);\n    return _context.messageResolver(message, key) !== null;\n  }\n  function resolveMessages(key) {\n    let messages = null;\n    const locales = coreBase.fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);\n    for (let i = 0; i < locales.length; i++) {\n      const targetLocaleMessages = _messages.value[locales[i]] || {};\n      const messageValue = _context.messageResolver(targetLocaleMessages, key);\n      if (messageValue != null) {\n        messages = messageValue;\n        break;\n      }\n    }\n    return messages;\n  }\n  // tm\n  function tm(key) {\n    const messages = resolveMessages(key);\n    // prettier-ignore\n    return messages != null ? messages : __root ? __root.tm(key) || {} : {};\n  }\n  // getLocaleMessage\n  function getLocaleMessage(locale) {\n    return _messages.value[locale] || {};\n  }\n  // setLocaleMessage\n  function setLocaleMessage(locale, message) {\n    _messages.value[locale] = message;\n    _context.messages = _messages.value;\n  }\n  // mergeLocaleMessage\n  function mergeLocaleMessage(locale, message) {\n    _messages.value[locale] = _messages.value[locale] || {};\n    deepCopy(message, _messages.value[locale]);\n    _context.messages = _messages.value;\n  }\n  // getDateTimeFormat\n  function getDateTimeFormat(locale) {\n    return _datetimeFormats.value[locale] || {};\n  }\n  // setDateTimeFormat\n  function setDateTimeFormat(locale, format) {\n    _datetimeFormats.value[locale] = format;\n    _context.datetimeFormats = _datetimeFormats.value;\n    coreBase.clearDateTimeFormat(_context, locale, format);\n  }\n  // mergeDateTimeFormat\n  function mergeDateTimeFormat(locale, format) {\n    _datetimeFormats.value[locale] = shared.assign(_datetimeFormats.value[locale] || {}, format);\n    _context.datetimeFormats = _datetimeFormats.value;\n    coreBase.clearDateTimeFormat(_context, locale, format);\n  }\n  // getNumberFormat\n  function getNumberFormat(locale) {\n    return _numberFormats.value[locale] || {};\n  }\n  // setNumberFormat\n  function setNumberFormat(locale, format) {\n    _numberFormats.value[locale] = format;\n    _context.numberFormats = _numberFormats.value;\n    coreBase.clearNumberFormat(_context, locale, format);\n  }\n  // mergeNumberFormat\n  function mergeNumberFormat(locale, format) {\n    _numberFormats.value[locale] = shared.assign(_numberFormats.value[locale] || {}, format);\n    _context.numberFormats = _numberFormats.value;\n    coreBase.clearNumberFormat(_context, locale, format);\n  }\n  // for debug\n  composerID++;\n  // watch root locale & fallbackLocale\n  if (__root && shared.inBrowser) {\n    vue.watch(__root.locale, val => {\n      if (_inheritLocale) {\n        _locale.value = val;\n        _context.locale = val;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n    vue.watch(__root.fallbackLocale, val => {\n      if (_inheritLocale) {\n        _fallbackLocale.value = val;\n        _context.fallbackLocale = val;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n  }\n  // define basic composition API!\n  const composer = {\n    id: composerID,\n    locale,\n    fallbackLocale,\n    get inheritLocale() {\n      return _inheritLocale;\n    },\n    set inheritLocale(val) {\n      _inheritLocale = val;\n      if (val && __root) {\n        _locale.value = __root.locale.value;\n        _fallbackLocale.value = __root.fallbackLocale.value;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    },\n    get availableLocales() {\n      return Object.keys(_messages.value).sort();\n    },\n    messages,\n    get modifiers() {\n      return _modifiers;\n    },\n    get pluralRules() {\n      return _pluralRules || {};\n    },\n    get isGlobal() {\n      return _isGlobal;\n    },\n    get missingWarn() {\n      return _missingWarn;\n    },\n    set missingWarn(val) {\n      _missingWarn = val;\n      _context.missingWarn = _missingWarn;\n    },\n    get fallbackWarn() {\n      return _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      _fallbackWarn = val;\n      _context.fallbackWarn = _fallbackWarn;\n    },\n    get fallbackRoot() {\n      return _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      _fallbackRoot = val;\n    },\n    get fallbackFormat() {\n      return _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      _fallbackFormat = val;\n      _context.fallbackFormat = _fallbackFormat;\n    },\n    get warnHtmlMessage() {\n      return _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      _warnHtmlMessage = val;\n      _context.warnHtmlMessage = val;\n    },\n    get escapeParameter() {\n      return _escapeParameter;\n    },\n    set escapeParameter(val) {\n      _escapeParameter = val;\n      _context.escapeParameter = val;\n    },\n    t,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    [SetPluralRulesSymbol]: setPluralRules\n  };\n  {\n    composer.datetimeFormats = datetimeFormats;\n    composer.numberFormats = numberFormats;\n    composer.rt = rt;\n    composer.te = te;\n    composer.tm = tm;\n    composer.d = d;\n    composer.n = n;\n    composer.getDateTimeFormat = getDateTimeFormat;\n    composer.setDateTimeFormat = setDateTimeFormat;\n    composer.mergeDateTimeFormat = mergeDateTimeFormat;\n    composer.getNumberFormat = getNumberFormat;\n    composer.setNumberFormat = setNumberFormat;\n    composer.mergeNumberFormat = mergeNumberFormat;\n    composer[InejctWithOption] = options.__injectWithOption;\n    composer[TransrateVNodeSymbol] = transrateVNode;\n    composer[DatetimePartsSymbol] = datetimeParts;\n    composer[NumberPartsSymbol] = numberParts;\n  }\n  // for vue-devtools timeline event\n  {\n    composer[EnableEmitter] = emitter => {\n      _context.__v_emitter = emitter;\n    };\n    composer[DisableEmitter] = () => {\n      _context.__v_emitter = undefined;\n    };\n  }\n  return composer;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Convert to I18n Composer Options from VueI18n Options\r\n *\r\n * @internal\r\n */\nfunction convertComposerOptions(options) {\n  const locale = shared.isString(options.locale) ? options.locale : coreBase.DEFAULT_LOCALE;\n  const fallbackLocale = shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const missing = shared.isFunction(options.missing) ? options.missing : undefined;\n  const missingWarn = shared.isBoolean(options.silentTranslationWarn) || shared.isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;\n  const fallbackWarn = shared.isBoolean(options.silentFallbackWarn) || shared.isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;\n  const fallbackRoot = shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const fallbackFormat = !!options.formatFallbackMessages;\n  const modifiers = shared.isPlainObject(options.modifiers) ? options.modifiers : {};\n  const pluralizationRules = options.pluralizationRules;\n  const postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : undefined;\n  const warnHtmlMessage = shared.isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== 'off' : true;\n  const escapeParameter = !!options.escapeParameterHtml;\n  const inheritLocale = shared.isBoolean(options.sync) ? options.sync : true;\n  if (options.formatter) {\n    shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n  }\n  if (options.preserveDirectiveContent) {\n    shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n  }\n  let messages = options.messages;\n  if (shared.isPlainObject(options.sharedMessages)) {\n    const sharedMessages = options.sharedMessages;\n    const locales = Object.keys(sharedMessages);\n    messages = locales.reduce((messages, locale) => {\n      const message = messages[locale] || (messages[locale] = {});\n      shared.assign(message, sharedMessages[locale]);\n      return messages;\n    }, messages || {});\n  }\n  const {\n    __i18n,\n    __root,\n    __injectWithOption\n  } = options;\n  const datetimeFormats = options.datetimeFormats;\n  const numberFormats = options.numberFormats;\n  const flatJson = options.flatJson;\n  return {\n    locale,\n    fallbackLocale,\n    messages,\n    flatJson,\n    datetimeFormats,\n    numberFormats,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackRoot,\n    fallbackFormat,\n    modifiers,\n    pluralRules: pluralizationRules,\n    postTranslation,\n    warnHtmlMessage,\n    escapeParameter,\n    messageResolver: options.messageResolver,\n    inheritLocale,\n    __i18n,\n    __root,\n    __injectWithOption\n  };\n}\n/**\r\n * create VueI18n interface factory\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction createVueI18n(options = {}, VueI18nLegacy) {\n  {\n    const composer = createComposer(convertComposerOptions(options));\n    // defines VueI18n\n    const vueI18n = {\n      // id\n      id: composer.id,\n      // locale\n      get locale() {\n        return composer.locale.value;\n      },\n      set locale(val) {\n        composer.locale.value = val;\n      },\n      // fallbackLocale\n      get fallbackLocale() {\n        return composer.fallbackLocale.value;\n      },\n      set fallbackLocale(val) {\n        composer.fallbackLocale.value = val;\n      },\n      // messages\n      get messages() {\n        return composer.messages.value;\n      },\n      // datetimeFormats\n      get datetimeFormats() {\n        return composer.datetimeFormats.value;\n      },\n      // numberFormats\n      get numberFormats() {\n        return composer.numberFormats.value;\n      },\n      // availableLocales\n      get availableLocales() {\n        return composer.availableLocales;\n      },\n      // formatter\n      get formatter() {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n        // dummy\n        return {\n          interpolate() {\n            return [];\n          }\n        };\n      },\n      set formatter(val) {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n      },\n      // missing\n      get missing() {\n        return composer.getMissingHandler();\n      },\n      set missing(handler) {\n        composer.setMissingHandler(handler);\n      },\n      // silentTranslationWarn\n      get silentTranslationWarn() {\n        return shared.isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;\n      },\n      set silentTranslationWarn(val) {\n        composer.missingWarn = shared.isBoolean(val) ? !val : val;\n      },\n      // silentFallbackWarn\n      get silentFallbackWarn() {\n        return shared.isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;\n      },\n      set silentFallbackWarn(val) {\n        composer.fallbackWarn = shared.isBoolean(val) ? !val : val;\n      },\n      // modifiers\n      get modifiers() {\n        return composer.modifiers;\n      },\n      // formatFallbackMessages\n      get formatFallbackMessages() {\n        return composer.fallbackFormat;\n      },\n      set formatFallbackMessages(val) {\n        composer.fallbackFormat = val;\n      },\n      // postTranslation\n      get postTranslation() {\n        return composer.getPostTranslationHandler();\n      },\n      set postTranslation(handler) {\n        composer.setPostTranslationHandler(handler);\n      },\n      // sync\n      get sync() {\n        return composer.inheritLocale;\n      },\n      set sync(val) {\n        composer.inheritLocale = val;\n      },\n      // warnInHtmlMessage\n      get warnHtmlInMessage() {\n        return composer.warnHtmlMessage ? 'warn' : 'off';\n      },\n      set warnHtmlInMessage(val) {\n        composer.warnHtmlMessage = val !== 'off';\n      },\n      // escapeParameterHtml\n      get escapeParameterHtml() {\n        return composer.escapeParameter;\n      },\n      set escapeParameterHtml(val) {\n        composer.escapeParameter = val;\n      },\n      // preserveDirectiveContent\n      get preserveDirectiveContent() {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n        return true;\n      },\n      set preserveDirectiveContent(val) {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n      },\n      // pluralizationRules\n      get pluralizationRules() {\n        return composer.pluralRules || {};\n      },\n      // for internal\n      __composer: composer,\n      // t\n      t(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options = {};\n        let list = null;\n        let named = null;\n        if (!shared.isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (shared.isString(arg2)) {\n          options.locale = arg2;\n        } else if (shared.isArray(arg2)) {\n          list = arg2;\n        } else if (shared.isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (shared.isArray(arg3)) {\n          list = arg3;\n        } else if (shared.isPlainObject(arg3)) {\n          named = arg3;\n        }\n        // return composer.t(key, (list || named || {}) as any, options)\n        return Reflect.apply(composer.t, composer, [key, list || named || {}, options]);\n      },\n      rt(...args) {\n        return Reflect.apply(composer.rt, composer, [...args]);\n      },\n      // tc\n      tc(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options = {\n          plural: 1\n        };\n        let list = null;\n        let named = null;\n        if (!shared.isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (shared.isString(arg2)) {\n          options.locale = arg2;\n        } else if (shared.isNumber(arg2)) {\n          options.plural = arg2;\n        } else if (shared.isArray(arg2)) {\n          list = arg2;\n        } else if (shared.isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (shared.isString(arg3)) {\n          options.locale = arg3;\n        } else if (shared.isArray(arg3)) {\n          list = arg3;\n        } else if (shared.isPlainObject(arg3)) {\n          named = arg3;\n        }\n        // return composer.t(key, (list || named || {}) as any, options)\n        return Reflect.apply(composer.t, composer, [key, list || named || {}, options]);\n      },\n      // te\n      te(key, locale) {\n        return composer.te(key, locale);\n      },\n      // tm\n      tm(key) {\n        return composer.tm(key);\n      },\n      // getLocaleMessage\n      getLocaleMessage(locale) {\n        return composer.getLocaleMessage(locale);\n      },\n      // setLocaleMessage\n      setLocaleMessage(locale, message) {\n        composer.setLocaleMessage(locale, message);\n      },\n      // mergeLocaleMessage\n      mergeLocaleMessage(locale, message) {\n        composer.mergeLocaleMessage(locale, message);\n      },\n      // d\n      d(...args) {\n        return Reflect.apply(composer.d, composer, [...args]);\n      },\n      // getDateTimeFormat\n      getDateTimeFormat(locale) {\n        return composer.getDateTimeFormat(locale);\n      },\n      // setDateTimeFormat\n      setDateTimeFormat(locale, format) {\n        composer.setDateTimeFormat(locale, format);\n      },\n      // mergeDateTimeFormat\n      mergeDateTimeFormat(locale, format) {\n        composer.mergeDateTimeFormat(locale, format);\n      },\n      // n\n      n(...args) {\n        return Reflect.apply(composer.n, composer, [...args]);\n      },\n      // getNumberFormat\n      getNumberFormat(locale) {\n        return composer.getNumberFormat(locale);\n      },\n      // setNumberFormat\n      setNumberFormat(locale, format) {\n        composer.setNumberFormat(locale, format);\n      },\n      // mergeNumberFormat\n      mergeNumberFormat(locale, format) {\n        composer.mergeNumberFormat(locale, format);\n      },\n      // getChoiceIndex\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      getChoiceIndex(choice, choicesLength) {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX));\n        return -1;\n      },\n      // for internal\n      __onComponentInstanceCreated(target) {\n        const {\n          componentInstanceCreatedListener\n        } = options;\n        if (componentInstanceCreatedListener) {\n          componentInstanceCreatedListener(target, vueI18n);\n        }\n      }\n    };\n    // for vue-devtools timeline event\n    {\n      vueI18n.__enableEmitter = emitter => {\n        const __composer = composer;\n        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n      };\n      vueI18n.__disableEmitter = () => {\n        const __composer = composer;\n        __composer[DisableEmitter] && __composer[DisableEmitter]();\n      };\n    }\n    return vueI18n;\n  }\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nconst baseFormatProps = {\n  tag: {\n    type: [String, Object]\n  },\n  locale: {\n    type: String\n  },\n  scope: {\n    type: String,\n    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050\n    validator: (val /* ComponetI18nScope */) => val === 'parent' || val === 'global',\n    default: 'parent' /* ComponetI18nScope */\n  },\n\n  i18n: {\n    type: Object\n  }\n};\nfunction getInterpolateArg(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n{\n  slots\n},\n// SetupContext,\nkeys) {\n  if (keys.length === 1 && keys[0] === 'default') {\n    // default slot with list\n    const ret = slots.default ? slots.default() : [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return ret.reduce((slot, current) => {\n      return slot = [...slot, ...(shared.isArray(current.children) ? current.children : [current])];\n    }, []);\n  } else {\n    // named slots\n    return keys.reduce((arg, key) => {\n      const slot = slots[key];\n      if (slot) {\n        arg[key] = slot();\n      }\n      return arg;\n    }, {});\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getFragmentableTag(tag) {\n  return vue.Fragment;\n}\n\n/**\r\n * Translation Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [TranslationProps](component#translationprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Component Interpolation](../guide/advanced/component)\r\n *\r\n * @example\r\n * ```html\r\n * <div id=\"app\">\r\n *   <!-- ... -->\r\n *   <i18n path=\"term\" tag=\"label\" for=\"tos\">\r\n *     <a :href=\"url\" target=\"_blank\">{{ $t('tos') }}</a>\r\n *   </i18n>\r\n *   <!-- ... -->\r\n * </div>\r\n * ```\r\n * ```js\r\n * import { createApp } from 'vue'\r\n * import { createI18n } from 'vue-i18n'\r\n *\r\n * const messages = {\r\n *   en: {\r\n *     tos: 'Term of Service',\r\n *     term: 'I accept xxx {0}.'\r\n *   },\r\n *   ja: {\r\n *     tos: '利用規約',\r\n *     term: '私は xxx の{0}に同意します。'\r\n *   }\r\n * }\r\n *\r\n * const i18n = createI18n({\r\n *   locale: 'en',\r\n *   messages\r\n * })\r\n *\r\n * const app = createApp({\r\n *   data: {\r\n *     url: '/term'\r\n *   }\r\n * }).use(i18n).mount('#app')\r\n * ```\r\n *\r\n * @VueI18nComponent\r\n */\nconst Translation = /* defineComponent */{\n  /* eslint-disable */\n  name: 'i18n-t',\n  props: shared.assign({\n    keypath: {\n      type: String,\n      required: true\n    },\n    plural: {\n      type: [Number, String],\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      validator: val => shared.isNumber(val) || !isNaN(val)\n    }\n  }, baseFormatProps),\n  /* eslint-enable */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setup(props, context) {\n    const {\n      slots,\n      attrs\n    } = context;\n    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050\n    const i18n = props.i18n || useI18n({\n      useScope: props.scope,\n      __useComponent: true\n    });\n    return () => {\n      const keys = Object.keys(slots).filter(key => key !== '_');\n      const options = {};\n      if (props.locale) {\n        options.locale = props.locale;\n      }\n      if (props.plural !== undefined) {\n        options.plural = shared.isString(props.plural) ? +props.plural : props.plural;\n      }\n      const arg = getInterpolateArg(context, keys);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);\n      const assignedAttrs = shared.assign({}, attrs);\n      const tag = shared.isString(props.tag) || shared.isObject(props.tag) ? props.tag : getFragmentableTag();\n      return vue.h(tag, assignedAttrs, children);\n    };\n  }\n};\nfunction isVNode(target) {\n  return shared.isArray(target) && !shared.isString(target[0]);\n}\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n  const {\n    slots,\n    attrs\n  } = context;\n  return () => {\n    const options = {\n      part: true\n    };\n    let overrides = {};\n    if (props.locale) {\n      options.locale = props.locale;\n    }\n    if (shared.isString(props.format)) {\n      options.key = props.format;\n    } else if (shared.isObject(props.format)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (shared.isString(props.format.key)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        options.key = props.format.key;\n      }\n      // Filter out number format options only\n      overrides = Object.keys(props.format).reduce((options, prop) => {\n        return slotKeys.includes(prop) ? shared.assign({}, options, {\n          [prop]: props.format[prop]\n        }) // eslint-disable-line @typescript-eslint/no-explicit-any\n        : options;\n      }, {});\n    }\n    const parts = partFormatter(...[props.value, options, overrides]);\n    let children = [options.key];\n    if (shared.isArray(parts)) {\n      children = parts.map((part, index) => {\n        const slot = slots[part.type];\n        const node = slot ? slot({\n          [part.type]: part.value,\n          index,\n          parts\n        }) : [part.value];\n        if (isVNode(node)) {\n          node[0].key = `${part.type}-${index}`;\n        }\n        return node;\n      });\n    } else if (shared.isString(parts)) {\n      children = [parts];\n    }\n    const assignedAttrs = shared.assign({}, attrs);\n    const tag = shared.isString(props.tag) || shared.isObject(props.tag) ? props.tag : getFragmentableTag();\n    return vue.h(tag, assignedAttrs, children);\n  };\n}\n\n/**\r\n * Number Format Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [FormattableProps](component#formattableprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Custom Formatting](../guide/essentials/number#custom-formatting)\r\n *\r\n * @VueI18nDanger\r\n * Not supported IE, due to no support `Intl.NumberFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)\r\n *\r\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-numberformat)\r\n *\r\n * @VueI18nComponent\r\n */\nconst NumberFormat = /* defineComponent */{\n  /* eslint-disable */\n  name: 'i18n-n',\n  props: shared.assign({\n    value: {\n      type: Number,\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  /* eslint-enable */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({\n      useScope: 'parent',\n      __useComponent: true\n    });\n    return renderFormatter(props, context, coreBase.NUMBER_FORMAT_OPTIONS_KEYS, (...args) =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    i18n[NumberPartsSymbol](...args));\n  }\n};\n\n/**\r\n * Datetime Format Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [FormattableProps](component#formattableprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Custom Formatting](../guide/essentials/datetime#custom-formatting)\r\n *\r\n * @VueI18nDanger\r\n * Not supported IE, due to no support `Intl.DateTimeFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)\r\n *\r\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-datetimeformat)\r\n *\r\n * @VueI18nComponent\r\n */\nconst DatetimeFormat = /*defineComponent */{\n  /* eslint-disable */\n  name: 'i18n-d',\n  props: shared.assign({\n    value: {\n      type: [Number, Date],\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  /* eslint-enable */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({\n      useScope: 'parent',\n      __useComponent: true\n    });\n    return renderFormatter(props, context, coreBase.DATETIME_FORMAT_OPTIONS_KEYS, (...args) =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    i18n[DatetimePartsSymbol](...args));\n  }\n};\nfunction getComposer$1(i18n, instance) {\n  const i18nInternal = i18n;\n  if (i18n.mode === 'composition') {\n    return i18nInternal.__getInstance(instance) || i18n.global;\n  } else {\n    const vueI18n = i18nInternal.__getInstance(instance);\n    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;\n  }\n}\nfunction vTDirective(i18n) {\n  const _process = binding => {\n    const {\n      instance,\n      modifiers,\n      value\n    } = binding;\n    /* istanbul ignore if */\n    if (!instance || !instance.$) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const composer = getComposer$1(i18n, instance.$);\n    if (modifiers.preserve) {\n      shared.warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));\n    }\n    const parsedValue = parseValue(value);\n    return [Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]), composer];\n  };\n  const register = (el, binding) => {\n    const [textContent, composer] = _process(binding);\n    if (shared.inBrowser && i18n.global === composer) {\n      // global scope only\n      el.__i18nWatcher = vue.watch(composer.locale, () => {\n        binding.instance && binding.instance.$forceUpdate();\n      });\n    }\n    el.__composer = composer;\n    el.textContent = textContent;\n  };\n  const unregister = el => {\n    if (shared.inBrowser && el.__i18nWatcher) {\n      el.__i18nWatcher();\n      el.__i18nWatcher = undefined;\n      delete el.__i18nWatcher;\n    }\n    if (el.__composer) {\n      el.__composer = undefined;\n      delete el.__composer;\n    }\n  };\n  const update = (el, {\n    value\n  }) => {\n    if (el.__composer) {\n      const composer = el.__composer;\n      const parsedValue = parseValue(value);\n      el.textContent = Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]);\n    }\n  };\n  const getSSRProps = binding => {\n    const [textContent] = _process(binding);\n    return {\n      textContent\n    };\n  };\n  return {\n    created: register,\n    unmounted: unregister,\n    beforeUpdate: update,\n    getSSRProps\n  };\n}\nfunction parseValue(value) {\n  if (shared.isString(value)) {\n    return {\n      path: value\n    };\n  } else if (shared.isPlainObject(value)) {\n    if (!('path' in value)) {\n      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, 'path');\n    }\n    return value;\n  } else {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n}\nfunction makeParams(value) {\n  const {\n    path,\n    locale,\n    args,\n    choice,\n    plural\n  } = value;\n  const options = {};\n  const named = args || {};\n  if (shared.isString(locale)) {\n    options.locale = locale;\n  }\n  if (shared.isNumber(choice)) {\n    options.plural = choice;\n  }\n  if (shared.isNumber(plural)) {\n    options.plural = plural;\n  }\n  return [path, named, options];\n}\nfunction apply(app, i18n, ...options) {\n  const pluginOptions = shared.isPlainObject(options[0]) ? options[0] : {};\n  const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n  const globalInstall = shared.isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;\n  if (globalInstall && useI18nComponentName) {\n    shared.warn(getWarnMessage(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {\n      name: Translation.name\n    }));\n  }\n  if (globalInstall) {\n    // install components\n    app.component(!useI18nComponentName ? Translation.name : 'i18n', Translation);\n    app.component(NumberFormat.name, NumberFormat);\n    app.component(DatetimeFormat.name, DatetimeFormat);\n  }\n  // install directive\n  {\n    app.directive('t', vTDirective(i18n));\n  }\n}\n\n/**\r\n * Supports compatibility for legacy vue-i18n APIs\r\n * This mixin is used when we use vue-i18n@v9.x or later\r\n */\nfunction defineMixin(vuei18n, composer, i18n) {\n  return {\n    beforeCreate() {\n      const instance = vue.getCurrentInstance();\n      /* istanbul ignore if */\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      const options = this.$options;\n      if (options.i18n) {\n        const optionsI18n = options.i18n;\n        if (options.__i18n) {\n          optionsI18n.__i18n = options.__i18n;\n        }\n        optionsI18n.__root = composer;\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, optionsI18n);\n        } else {\n          optionsI18n.__injectWithOption = true;\n          this.$i18n = createVueI18n(optionsI18n);\n        }\n      } else if (options.__i18n) {\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, options);\n        } else {\n          this.$i18n = createVueI18n({\n            __i18n: options.__i18n,\n            __injectWithOption: true,\n            __root: composer\n          });\n        }\n      } else {\n        // set global\n        this.$i18n = vuei18n;\n      }\n      if (options.__i18nGlobal) {\n        adjustI18nResources(composer, options, options);\n      }\n      vuei18n.__onComponentInstanceCreated(this.$i18n);\n      i18n.__setInstance(instance, this.$i18n);\n      // defines vue-i18n legacy APIs\n      this.$t = (...args) => this.$i18n.t(...args);\n      this.$rt = (...args) => this.$i18n.rt(...args);\n      this.$tc = (...args) => this.$i18n.tc(...args);\n      this.$te = (key, locale) => this.$i18n.te(key, locale);\n      this.$d = (...args) => this.$i18n.d(...args);\n      this.$n = (...args) => this.$i18n.n(...args);\n      this.$tm = key => this.$i18n.tm(key);\n    },\n    mounted() {},\n    unmounted() {\n      const instance = vue.getCurrentInstance();\n      /* istanbul ignore if */\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      delete this.$t;\n      delete this.$rt;\n      delete this.$tc;\n      delete this.$te;\n      delete this.$d;\n      delete this.$n;\n      delete this.$tm;\n      i18n.__deleteInstance(instance);\n      delete this.$i18n;\n    }\n  };\n}\nfunction mergeToRoot(root, options) {\n  root.locale = options.locale || root.locale;\n  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;\n  root.missing = options.missing || root.missing;\n  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;\n  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;\n  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;\n  root.postTranslation = options.postTranslation || root.postTranslation;\n  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;\n  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;\n  root.sync = options.sync || root.sync;\n  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);\n  const messages = getLocaleMessages(root.locale, {\n    messages: options.messages,\n    __i18n: options.__i18n\n  });\n  Object.keys(messages).forEach(locale => root.mergeLocaleMessage(locale, messages[locale]));\n  if (options.datetimeFormats) {\n    Object.keys(options.datetimeFormats).forEach(locale => root.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n  }\n  if (options.numberFormats) {\n    Object.keys(options.numberFormats).forEach(locale => root.mergeNumberFormat(locale, options.numberFormats[locale]));\n  }\n  return root;\n}\n\n/**\r\n * Injection key for {@link useI18n}\r\n *\r\n * @remarks\r\n * The global injection key for I18n instances with `useI18n`. this injection key is used in Web Components.\r\n * Specify the i18n instance created by {@link createI18n} together with `provide` function.\r\n *\r\n * @VueI18nGeneral\r\n */\nconst I18nInjectionKey = /* #__PURE__*/shared.makeSymbol('global-vue-i18n');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction createI18n(options = {}, VueI18nLegacy) {\n  // prettier-ignore\n  const __legacyMode = shared.isBoolean(options.legacy) ? options.legacy : true;\n  // prettier-ignore\n  const __globalInjection = shared.isBoolean(options.globalInjection) ? options.globalInjection : true;\n  // prettier-ignore\n  const __allowComposition = __legacyMode ? !!options.allowComposition : true;\n  const __instances = new Map();\n  const [globalScope, __global] = createGlobal(options, __legacyMode);\n  const symbol = shared.makeSymbol('vue-i18n');\n  function __getInstance(component) {\n    return __instances.get(component) || null;\n  }\n  function __setInstance(component, instance) {\n    __instances.set(component, instance);\n  }\n  function __deleteInstance(component) {\n    __instances.delete(component);\n  }\n  {\n    const i18n = {\n      // mode\n      get mode() {\n        return __legacyMode ? 'legacy' : 'composition';\n      },\n      // allowComposition\n      get allowComposition() {\n        return __allowComposition;\n      },\n      // install plugin\n      async install(app, ...options) {\n        // setup global provider\n        app.__VUE_I18N_SYMBOL__ = symbol;\n        app.provide(app.__VUE_I18N_SYMBOL__, i18n);\n        // global method and properties injection for Composition API\n        if (!__legacyMode && __globalInjection) {\n          injectGlobalFields(app, i18n.global);\n        }\n        // install built-in components and directive\n        {\n          apply(app, i18n, ...options);\n        }\n        // setup mixin for Legacy API\n        if (__legacyMode) {\n          app.mixin(defineMixin(__global, __global.__composer, i18n));\n        }\n        // release global scope\n        const unmountApp = app.unmount;\n        app.unmount = () => {\n          i18n.dispose();\n          unmountApp();\n        };\n      },\n      // global accessor\n      get global() {\n        return __global;\n      },\n      dispose() {\n        globalScope.stop();\n      },\n      // @internal\n      __instances,\n      // @internal\n      __getInstance,\n      // @internal\n      __setInstance,\n      // @internal\n      __deleteInstance\n    };\n    return i18n;\n  }\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction useI18n(options = {}) {\n  const instance = vue.getCurrentInstance();\n  if (instance == null) {\n    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);\n  }\n  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {\n    throw createI18nError(I18nErrorCodes.NOT_INSLALLED);\n  }\n  const i18n = getI18nInstance(instance);\n  const global = getGlobalComposer(i18n);\n  const componentOptions = getComponentOptions(instance);\n  const scope = getScope(options, componentOptions);\n  {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (i18n.mode === 'legacy' && !options.__useComponent) {\n      if (!i18n.allowComposition) {\n        throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE);\n      }\n      return useI18nForLegacy(instance, scope, global, options);\n    }\n  }\n  if (scope === 'global') {\n    adjustI18nResources(global, options, componentOptions);\n    return global;\n  }\n  if (scope === 'parent') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let composer = getComposer(i18n, instance, options.__useComponent);\n    if (composer == null) {\n      {\n        shared.warn(getWarnMessage(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));\n      }\n      composer = global;\n    }\n    return composer;\n  }\n  const i18nInternal = i18n;\n  let composer = i18nInternal.__getInstance(instance);\n  if (composer == null) {\n    const composerOptions = shared.assign({}, options);\n    if ('__i18n' in componentOptions) {\n      composerOptions.__i18n = componentOptions.__i18n;\n    }\n    if (global) {\n      composerOptions.__root = global;\n    }\n    composer = createComposer(composerOptions);\n    setupLifeCycle(i18nInternal, instance);\n    i18nInternal.__setInstance(instance, composer);\n  }\n  return composer;\n}\n/**\r\n * Cast to VueI18n legacy compatible type\r\n *\r\n * @remarks\r\n * This API is provided only with [vue-i18n-bridge](https://vue-i18n.intlify.dev/guide/migration/ways.html#what-is-vue-i18n-bridge).\r\n *\r\n * The purpose of this function is to convert an {@link I18n} instance created with {@link createI18n | createI18n(legacy: true)} into a `vue-i18n@v8.x` compatible instance of `new VueI18n` in a TypeScript environment.\r\n *\r\n * @param i18n - An instance of {@link I18n}\r\n * @returns A i18n instance which is casted to {@link VueI18n} type\r\n *\r\n * @VueI18nTip\r\n * :new: provided by **vue-i18n-bridge only**\r\n *\r\n * @VueI18nGeneral\r\n */\nconst castToVueI18n = (i18n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n  if (!(__VUE_I18N_BRIDGE__ in i18n)) {\n    throw createI18nError(I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N);\n  }\n  return i18n;\n};\nfunction createGlobal(options, legacyMode, VueI18nLegacy // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n  const scope = vue.effectScope();\n  {\n    const obj = legacyMode ? scope.run(() => createVueI18n(options)) : scope.run(() => createComposer(options));\n    if (obj == null) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    return [scope, obj];\n  }\n}\nfunction getI18nInstance(instance) {\n  {\n    const i18n = vue.inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);\n    /* istanbul ignore if */\n    if (!i18n) {\n      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE);\n    }\n    return i18n;\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getScope(options, componentOptions) {\n  // prettier-ignore\n  return shared.isEmptyObject(options) ? '__i18n' in componentOptions ? 'local' : 'global' : !options.useScope ? 'local' : options.useScope;\n}\nfunction getGlobalComposer(i18n) {\n  // prettier-ignore\n  return i18n.mode === 'composition' ? i18n.global : i18n.global.__composer;\n}\nfunction getComposer(i18n, target, useComponent = false) {\n  let composer = null;\n  const root = target.root;\n  let current = target.parent;\n  while (current != null) {\n    const i18nInternal = i18n;\n    if (i18n.mode === 'composition') {\n      composer = i18nInternal.__getInstance(current);\n    } else {\n      {\n        const vueI18n = i18nInternal.__getInstance(current);\n        if (vueI18n != null) {\n          composer = vueI18n.__composer;\n          if (useComponent && composer && !composer[InejctWithOption] // eslint-disable-line @typescript-eslint/no-explicit-any\n          ) {\n            composer = null;\n          }\n        }\n      }\n    }\n    if (composer != null) {\n      break;\n    }\n    if (root === current) {\n      break;\n    }\n    current = current.parent;\n  }\n  return composer;\n}\nfunction setupLifeCycle(i18n, target, composer) {\n  {\n    vue.onMounted(() => {}, target);\n    vue.onUnmounted(() => {\n      i18n.__deleteInstance(target);\n    }, target);\n  }\n}\nfunction useI18nForLegacy(instance, scope, root, options = {} // eslint-disable-line @typescript-eslint/no-explicit-any\n) {\n  const isLocale = scope === 'local';\n  const _composer = vue.shallowRef(null);\n  if (isLocale && instance.proxy && !(instance.proxy.$options.i18n || instance.proxy.$options.__i18n)) {\n    throw createI18nError(I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);\n  }\n  const _inheritLocale = shared.isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = vue.ref(\n  // prettier-ignore\n  isLocale && _inheritLocale ? root.locale.value : shared.isString(options.locale) ? options.locale : coreBase.DEFAULT_LOCALE);\n  const _fallbackLocale = vue.ref(\n  // prettier-ignore\n  isLocale && _inheritLocale ? root.fallbackLocale.value : shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value);\n  const _messages = vue.ref(getLocaleMessages(_locale.value, options));\n  // prettier-ignore\n  const _datetimeFormats = vue.ref(shared.isPlainObject(options.datetimeFormats) ? options.datetimeFormats : {\n    [_locale.value]: {}\n  });\n  // prettier-ignore\n  const _numberFormats = vue.ref(shared.isPlainObject(options.numberFormats) ? options.numberFormats : {\n    [_locale.value]: {}\n  });\n  // prettier-ignore\n  const _missingWarn = isLocale ? root.missingWarn : shared.isBoolean(options.missingWarn) || shared.isRegExp(options.missingWarn) ? options.missingWarn : true;\n  // prettier-ignore\n  const _fallbackWarn = isLocale ? root.fallbackWarn : shared.isBoolean(options.fallbackWarn) || shared.isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  // prettier-ignore\n  const _fallbackRoot = isLocale ? root.fallbackRoot : shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  // configure fall back to root\n  const _fallbackFormat = !!options.fallbackFormat;\n  // runtime missing\n  const _missing = shared.isFunction(options.missing) ? options.missing : null;\n  // postTranslation handler\n  const _postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : null;\n  // prettier-ignore\n  const _warnHtmlMessage = isLocale ? root.warnHtmlMessage : shared.isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const _escapeParameter = !!options.escapeParameter;\n  // prettier-ignore\n  const _modifiers = isLocale ? root.modifiers : shared.isPlainObject(options.modifiers) ? options.modifiers : {};\n  // pluralRules\n  const _pluralRules = options.pluralRules || isLocale && root.pluralRules;\n  // track reactivity\n  function trackReactivityValues() {\n    return [_locale.value, _fallbackLocale.value, _messages.value, _datetimeFormats.value, _numberFormats.value];\n  }\n  // locale\n  const locale = vue.computed({\n    get: () => {\n      return _composer.value ? _composer.value.locale.value : _locale.value;\n    },\n    set: val => {\n      if (_composer.value) {\n        _composer.value.locale.value = val;\n      }\n      _locale.value = val;\n    }\n  });\n  // fallbackLocale\n  const fallbackLocale = vue.computed({\n    get: () => {\n      return _composer.value ? _composer.value.fallbackLocale.value : _fallbackLocale.value;\n    },\n    set: val => {\n      if (_composer.value) {\n        _composer.value.fallbackLocale.value = val;\n      }\n      _fallbackLocale.value = val;\n    }\n  });\n  // messages\n  const messages = vue.computed(() => {\n    if (_composer.value) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return _composer.value.messages.value;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return _messages.value;\n    }\n  });\n  const datetimeFormats = vue.computed(() => _datetimeFormats.value);\n  const numberFormats = vue.computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return _composer.value ? _composer.value.getPostTranslationHandler() : _postTranslation;\n  }\n  function setPostTranslationHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setPostTranslationHandler(handler);\n    }\n  }\n  function getMissingHandler() {\n    return _composer.value ? _composer.value.getMissingHandler() : _missing;\n  }\n  function setMissingHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setMissingHandler(handler);\n    }\n  }\n  function warpWithDeps(fn) {\n    trackReactivityValues();\n    return fn();\n  }\n  function t(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.t, null, [...args])) : warpWithDeps(() => '');\n  }\n  function rt(...args) {\n    return _composer.value ? Reflect.apply(_composer.value.rt, null, [...args]) : '';\n  }\n  function d(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.d, null, [...args])) : warpWithDeps(() => '');\n  }\n  function n(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.n, null, [...args])) : warpWithDeps(() => '');\n  }\n  function tm(key) {\n    return _composer.value ? _composer.value.tm(key) : {};\n  }\n  function te(key, locale) {\n    return _composer.value ? _composer.value.te(key, locale) : false;\n  }\n  function getLocaleMessage(locale) {\n    return _composer.value ? _composer.value.getLocaleMessage(locale) : {};\n  }\n  function setLocaleMessage(locale, message) {\n    if (_composer.value) {\n      _composer.value.setLocaleMessage(locale, message);\n      _messages.value[locale] = message;\n    }\n  }\n  function mergeLocaleMessage(locale, message) {\n    if (_composer.value) {\n      _composer.value.mergeLocaleMessage(locale, message);\n    }\n  }\n  function getDateTimeFormat(locale) {\n    return _composer.value ? _composer.value.getDateTimeFormat(locale) : {};\n  }\n  function setDateTimeFormat(locale, format) {\n    if (_composer.value) {\n      _composer.value.setDateTimeFormat(locale, format);\n      _datetimeFormats.value[locale] = format;\n    }\n  }\n  function mergeDateTimeFormat(locale, format) {\n    if (_composer.value) {\n      _composer.value.mergeDateTimeFormat(locale, format);\n    }\n  }\n  function getNumberFormat(locale) {\n    return _composer.value ? _composer.value.getNumberFormat(locale) : {};\n  }\n  function setNumberFormat(locale, format) {\n    if (_composer.value) {\n      _composer.value.setNumberFormat(locale, format);\n      _numberFormats.value[locale] = format;\n    }\n  }\n  function mergeNumberFormat(locale, format) {\n    if (_composer.value) {\n      _composer.value.mergeNumberFormat(locale, format);\n    }\n  }\n  const wrapper = {\n    get id() {\n      return _composer.value ? _composer.value.id : -1;\n    },\n    locale,\n    fallbackLocale,\n    messages,\n    datetimeFormats,\n    numberFormats,\n    get inheritLocale() {\n      return _composer.value ? _composer.value.inheritLocale : _inheritLocale;\n    },\n    set inheritLocale(val) {\n      if (_composer.value) {\n        _composer.value.inheritLocale = val;\n      }\n    },\n    get availableLocales() {\n      return _composer.value ? _composer.value.availableLocales : Object.keys(_messages.value);\n    },\n    get modifiers() {\n      return _composer.value ? _composer.value.modifiers : _modifiers;\n    },\n    get pluralRules() {\n      return _composer.value ? _composer.value.pluralRules : _pluralRules;\n    },\n    get isGlobal() {\n      return _composer.value ? _composer.value.isGlobal : false;\n    },\n    get missingWarn() {\n      return _composer.value ? _composer.value.missingWarn : _missingWarn;\n    },\n    set missingWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackWarn() {\n      return _composer.value ? _composer.value.fallbackWarn : _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackRoot() {\n      return _composer.value ? _composer.value.fallbackRoot : _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      if (_composer.value) {\n        _composer.value.fallbackRoot = val;\n      }\n    },\n    get fallbackFormat() {\n      return _composer.value ? _composer.value.fallbackFormat : _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      if (_composer.value) {\n        _composer.value.fallbackFormat = val;\n      }\n    },\n    get warnHtmlMessage() {\n      return _composer.value ? _composer.value.warnHtmlMessage : _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      if (_composer.value) {\n        _composer.value.warnHtmlMessage = val;\n      }\n    },\n    get escapeParameter() {\n      return _composer.value ? _composer.value.escapeParameter : _escapeParameter;\n    },\n    set escapeParameter(val) {\n      if (_composer.value) {\n        _composer.value.escapeParameter = val;\n      }\n    },\n    t,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    rt,\n    d,\n    n,\n    tm,\n    te,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getDateTimeFormat,\n    setDateTimeFormat,\n    mergeDateTimeFormat,\n    getNumberFormat,\n    setNumberFormat,\n    mergeNumberFormat\n  };\n  function sync(composer) {\n    composer.locale.value = _locale.value;\n    composer.fallbackLocale.value = _fallbackLocale.value;\n    Object.keys(_messages.value).forEach(locale => {\n      composer.mergeLocaleMessage(locale, _messages.value[locale]);\n    });\n    Object.keys(_datetimeFormats.value).forEach(locale => {\n      composer.mergeDateTimeFormat(locale, _datetimeFormats.value[locale]);\n    });\n    Object.keys(_numberFormats.value).forEach(locale => {\n      composer.mergeNumberFormat(locale, _numberFormats.value[locale]);\n    });\n    composer.escapeParameter = _escapeParameter;\n    composer.fallbackFormat = _fallbackFormat;\n    composer.fallbackRoot = _fallbackRoot;\n    composer.fallbackWarn = _fallbackWarn;\n    composer.missingWarn = _missingWarn;\n    composer.warnHtmlMessage = _warnHtmlMessage;\n  }\n  vue.onBeforeMount(() => {\n    if (instance.proxy == null || instance.proxy.$i18n == null) {\n      throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const composer = _composer.value = instance.proxy.$i18n.__composer;\n    if (scope === 'global') {\n      _locale.value = composer.locale.value;\n      _fallbackLocale.value = composer.fallbackLocale.value;\n      _messages.value = composer.messages.value;\n      _datetimeFormats.value = composer.datetimeFormats.value;\n      _numberFormats.value = composer.numberFormats.value;\n    } else if (isLocale) {\n      sync(composer);\n    }\n  });\n  return wrapper;\n}\nconst globalExportProps = ['locale', 'fallbackLocale', 'availableLocales'];\nconst globalExportMethods = ['t', 'rt', 'd', 'n', 'tm'];\nfunction injectGlobalFields(app, composer) {\n  const i18n = Object.create(null);\n  globalExportProps.forEach(prop => {\n    const desc = Object.getOwnPropertyDescriptor(composer, prop);\n    if (!desc) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const wrap = vue.isRef(desc.value) // check computed props\n    ? {\n      get() {\n        return desc.value.value;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      set(val) {\n        desc.value.value = val;\n      }\n    } : {\n      get() {\n        return desc.get && desc.get();\n      }\n    };\n    Object.defineProperty(i18n, prop, wrap);\n  });\n  app.config.globalProperties.$i18n = i18n;\n  globalExportMethods.forEach(method => {\n    const desc = Object.getOwnPropertyDescriptor(composer, method);\n    if (!desc || !desc.value) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n  });\n}\n\n// register message compiler at vue-i18n\ncoreBase.registerMessageCompiler(coreBase.compileToFunction);\n// register message resolver at vue-i18n\ncoreBase.registerMessageResolver(coreBase.resolveValue);\n// register fallback locale at vue-i18n\ncoreBase.registerLocaleFallbacker(coreBase.fallbackWithLocaleChain);\n// NOTE: experimental !!\n{\n  const target = shared.getGlobalThis();\n  target.__INTLIFY__ = true;\n  coreBase.setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nexports.DatetimeFormat = DatetimeFormat;\nexports.I18nInjectionKey = I18nInjectionKey;\nexports.NumberFormat = NumberFormat;\nexports.Translation = Translation;\nexports.VERSION = VERSION;\nexports.castToVueI18n = castToVueI18n;\nexports.createI18n = createI18n;\nexports.useI18n = useI18n;\nexports.vTDirective = vTDirective;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
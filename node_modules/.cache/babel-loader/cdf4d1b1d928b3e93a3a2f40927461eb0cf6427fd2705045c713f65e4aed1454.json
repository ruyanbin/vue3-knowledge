{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"fill\", \"x\", \"y\", \"width\", \"height\"];\nconst _hoisted_3 = [\"values\", \"begin\"];\nconst _hoisted_4 = [\"fill\", \"x\", \"y\", \"width\", \"height\"];\nconst _hoisted_5 = [\"values\"];\nconst _hoisted_6 = [\"values\"];\nconst _hoisted_7 = [\"values\"];\nconst _hoisted_8 = [\"values\"];\nconst _hoisted_9 = [\"fill\", \"x\", \"y\", \"height\"];\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"animate\", {\n  attributeName: \"width\",\n  values: \"0;40;0\",\n  dur: \"2s\",\n  repeatCount: \"indefinite\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_11 = [\"values\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-1\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: `${$data.svgWH[0]}px`,\n    height: `${$data.svgWH[1]}px`,\n    style: _normalizeStyle(`transform:scale(${$data.svgScale[0]},${$data.svgScale[1]});`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.points, (point, i) => {\n    return _openBlock(), _createElementBlock(_Fragment, null, [Math.random() > 0.6 ? (_openBlock(), _createElementBlock(\"rect\", {\n      key: i,\n      fill: $data.mergedColor[0],\n      x: point[0] - $data.halfPointSideLength,\n      y: point[1] - $data.halfPointSideLength,\n      width: $data.pointSideLength,\n      height: $data.pointSideLength\n    }, [Math.random() > 0.6 ? (_openBlock(), _createElementBlock(\"animate\", {\n      key: 0,\n      attributeName: \"fill\",\n      values: `${$data.mergedColor[0]};transparent`,\n      dur: \"1s\",\n      begin: Math.random() * 2,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_3)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n  }), 256 /* UNKEYED_FRAGMENT */)), $data.rects[0] ? (_openBlock(), _createElementBlock(\"rect\", {\n    key: 0,\n    fill: $data.mergedColor[1],\n    x: $data.rects[0][0] - $data.pointSideLength,\n    y: $data.rects[0][1] - $data.pointSideLength,\n    width: $data.pointSideLength * 2,\n    height: $data.pointSideLength * 2\n  }, [_createElementVNode(\"animate\", {\n    attributeName: \"width\",\n    values: `0;${$data.pointSideLength * 2}`,\n    dur: \"2s\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"animate\", {\n    attributeName: \"height\",\n    values: `0;${$data.pointSideLength * 2}`,\n    dur: \"2s\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"animate\", {\n    attributeName: \"x\",\n    values: `${$data.rects[0][0]};${$data.rects[0][0] - $data.pointSideLength}`,\n    dur: \"2s\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"animate\", {\n    attributeName: \"y\",\n    values: `${$data.rects[0][1]};${$data.rects[0][1] - $data.pointSideLength}`,\n    dur: \"2s\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_8)], 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true), $data.rects[1] ? (_openBlock(), _createElementBlock(\"rect\", {\n    key: 1,\n    fill: $data.mergedColor[1],\n    x: $data.rects[1][0] - 40,\n    y: $data.rects[1][1] - $data.pointSideLength,\n    width: 40,\n    height: $data.pointSideLength * 2\n  }, [_hoisted_10, _createElementVNode(\"animate\", {\n    attributeName: \"x\",\n    values: `${$data.rects[1][0]};${$data.rects[1][0] - 40};${$data.rects[1][0]}`,\n    dur: \"2s\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_11)], 8 /* PROPS */, _hoisted_9)) : _createCommentVNode(\"v-if\", true)], 12 /* STYLE, PROPS */, _hoisted_1))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;;;;iCAqEQA,oBAKE;EAJAC,aAAa,EAAC,OAAO;EACrBC,MAAM,EAAC,QAAQ;EACfC,GAAG,EAAC,IAAI;EACRC,WAAW,EAAC;;;;uBAxEpBC,oBAkFM;IAlFDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;qBACjCH,oBAgFM;IAhFAI,KAAK,KAAKD,WAAK;IAAUE,MAAM,KAAKF,WAAK;IAAUG,KAAK,qCAAqBH,cAAQ,OAAOA,cAAQ;yBAExGH,oBAqBWO,6BApBYJ,YAAM,GAAnBK,KAAK,EAAEC,CAAC;+DAGRC,IAAI,CAACC,MAAM,0BADnBX,oBAiBO;MAfJY,GAAG,EAAEH,CAAC;MACNI,IAAI,EAAEV,iBAAW;MACjBW,CAAC,EAAEN,KAAK,MAAML,yBAAmB;MACjCY,CAAC,EAAEP,KAAK,MAAML,yBAAmB;MACjCC,KAAK,EAAED,qBAAe;MACtBE,MAAM,EAAEF;QAGDO,IAAI,CAACC,MAAM,0BADnBX,oBAOE;;MALAJ,aAAa,EAAC,MAAM;MACnBC,MAAM,KAAKM,iBAAW;MACvBL,GAAG,EAAC,IAAI;MACPkB,KAAK,EAAEN,IAAI,CAACC,MAAM;MACnBZ,WAAW,EAAC;;oCAMVI,WAAK,qBADbH,oBAgCO;;IA9BJa,IAAI,EAAEV,iBAAW;IACjBW,CAAC,EAAEX,WAAK,SAASA,qBAAe;IAChCY,CAAC,EAAEZ,WAAK,SAASA,qBAAe;IAChCC,KAAK,EAAED,qBAAe;IACtBE,MAAM,EAAEF,qBAAe;MAExBR,oBAKE;IAJAC,aAAa,EAAC,OAAO;IACpBC,MAAM,OAAOM,qBAAe;IAC7BL,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC;uCAEdJ,oBAKE;IAJAC,aAAa,EAAC,QAAQ;IACrBC,MAAM,OAAOM,qBAAe;IAC7BL,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC;uCAEdJ,oBAKE;IAJAC,aAAa,EAAC,GAAG;IAChBC,MAAM,KAAKM,WAAK,UAAUA,WAAK,SAASA,qBAAe;IACxDL,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC;uCAEdJ,oBAKE;IAJAC,aAAa,EAAC,GAAG;IAChBC,MAAM,KAAKM,WAAK,UAAUA,WAAK,SAASA,qBAAe;IACxDL,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC;yGAKRI,WAAK,qBADbH,oBAoBO;;IAlBJa,IAAI,EAAEV,iBAAW;IACjBW,CAAC,EAAEX,WAAK;IACRY,CAAC,EAAEZ,WAAK,SAASA,qBAAe;IAChCC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAEF,qBAAe;MAExBc,WAKE,EACFtB,oBAKE;IAJAC,aAAa,EAAC,GAAG;IAChBC,MAAM,KAAKM,WAAK,UAAUA,WAAK,eAAeA,WAAK;IACpDL,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC","names":["_createElementVNode","attributeName","values","dur","repeatCount","_createElementBlock","class","ref","$data","width","height","style","_Fragment","point","i","Math","random","key","fill","x","y","begin","_hoisted_10"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration1/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-1\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n\n      <template\n        v-for=\"(point, i) in points\"\n      >\n        <rect\n          v-if=\"Math.random() > 0.6\"\n          :key=\"i\"\n          :fill=\"mergedColor[0]\"\n          :x=\"point[0] - halfPointSideLength\"\n          :y=\"point[1] - halfPointSideLength\"\n          :width=\"pointSideLength\"\n          :height=\"pointSideLength\"\n        >\n          <animate\n            v-if=\"Math.random() > 0.6\"\n            attributeName=\"fill\"\n            :values=\"`${mergedColor[0]};transparent`\"\n            dur=\"1s\"\n            :begin=\"Math.random() * 2\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n\n      <rect\n        v-if=\"rects[0]\"\n        :fill=\"mergedColor[1]\"\n        :x=\"rects[0][0] - pointSideLength\"\n        :y=\"rects[0][1] - pointSideLength\"\n        :width=\"pointSideLength * 2\"\n        :height=\"pointSideLength * 2\"\n      >\n        <animate\n          attributeName=\"width\"\n          :values=\"`0;${pointSideLength * 2}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"height\"\n          :values=\"`0;${pointSideLength * 2}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          :values=\"`${rects[0][0]};${rects[0][0] - pointSideLength}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          :values=\"`${rects[0][1]};${rects[0][1] - pointSideLength}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n\n      <rect\n        v-if=\"rects[1]\"\n        :fill=\"mergedColor[1]\"\n        :x=\"rects[1][0] - 40\"\n        :y=\"rects[1][1] - pointSideLength\"\n        :width=\"40\"\n        :height=\"pointSideLength * 2\"\n      >\n        <animate\n          attributeName=\"width\"\n          values=\"0;40;0\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          :values=\"`${rects[1][0]};${rects[1][0] - 40};${rects[1][0]}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration1',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const pointSideLength = 2.5\n\n    return {\n      ref: 'decoration-1',\n\n      svgWH: [200, 50],\n\n      svgScale: [1, 1],\n\n      rowNum: 4,\n      rowPoints: 20,\n\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n\n      points: [],\n\n      rects: [],\n\n      defaultColor: ['#fff', '#0de7c2'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcRectsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcRectsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n    },\n    calcRectsPosition () {\n      const { points, rowPoints } = this\n\n      const rect1 = points[rowPoints * 2 - 1]\n      const rect2 = points[rowPoints * 2 - 3]\n\n      this.rects = [rect1, rect2]\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
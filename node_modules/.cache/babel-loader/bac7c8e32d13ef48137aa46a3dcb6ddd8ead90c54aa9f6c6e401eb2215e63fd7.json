{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \"发布订阅者\")], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createBlock(_component_el_card, null, {\n    header: _withCtx(() => [_hoisted_1]),\n    default: _withCtx(() => [_createTextVNode(\" 描述：\"), _hoisted_2, _createTextVNode(\" 订阅者（Subscriber）把自己想订阅的事件 注册（Subscribe）到调度中心（Event Channel）\"), _hoisted_3, _createTextVNode(\" 当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由 调度中心 统一调度（Fire Event）订阅者注册到调度中心的处理代码。\"), _hoisted_4, _createTextVNode(\" 思路：\"), _hoisted_5, _createTextVNode(\" 创建一个类 class \"), _hoisted_6, _createTextVNode(\" 在这个类里创建一个缓存列表(调度中心)\"), _hoisted_7, _createTextVNode(\" on 方法 - 用来把函数fn添加到缓存列表(订阅者注册事件到调度中心)\"), _hoisted_8, _createTextVNode(\" emit 方法 - 取到event事件类型，根据event值去执行对应缓存列表中的函数(发布者发布事件到调度中心，调度中心处理代码)\"), _hoisted_9, _createTextVNode(\" off 方法 - 可以根据event事件类型取消订阅(取消订阅)\"), _hoisted_10, _createTextVNode(\" class Observer {\"), _hoisted_11, _createTextVNode(\" constructor() {}\"), _hoisted_12, _createTextVNode(\" // 向队列添加内容 $on(){}\"), _hoisted_13, _createTextVNode(\" // 删除队列中的内容 $off(){}\"), _hoisted_14, _createTextVNode(\" // 触发消息队列里的内容 $emit(){}\"), _hoisted_15, _createTextVNode(\" }\"), _hoisted_16, _createTextVNode(\" / 使用构造函数创建一个实例 const person1 = new Observer(); // 向这个`person1`委托一些内容，调用`person1 `的`$ON`方法 person1.$on('买红宝石', handlerA) function handlerA() { console.log('handlerA'); } \")]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAGGA,oBAEM;EAFDC,KAAK,EAAC;AAAa,iBACvBD,oBAAsC;EAAhCC,KAAK,EAAC;AAAa,GAAC,OAAK;gCAG9BD,oBAAI;gCACmDA,oBAAI;gCAC4BA,oBAAI;gCAC3FA,oBAAI;gCACKA,oBAAI;gCACGA,oBAAI;gCACaA,oBAAI;gCAC0BA,oBAAI;iCACtCA,oBAAI;iCACpBA,oBAAI;iCACJA,oBAAI;iCAEbA,oBAAI;iCAEHA,oBAAI;iCAEHA,oBAAI;iCACZA,oBAAI;;;;uBAvBNE,aAgCUC;IA/BEC,MAAM,WAChB,MAEM,CAFNC,UAEM;sBACI,MACR,kBADQ,MACR,aAAI,gFACmD,aAAI,gHAC4B,aAAI,yBAC3F,aAAI,kCACK,aAAI,yCACG,aAAI,0DACa,aAAI,wFAC0B,aAAI,sDACtC,cAAI,sCACpB,cAAI,sCACJ,cAAI,wCAEb,cAAI,0CAEH,cAAI,6CAEH,cAAI,uBACZ,cAAI,+LASN","names":["_createElementVNode","class","_createBlock","_component_el_card","header","_hoisted_1"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/Design/PublishSubscribe.vue"],"sourcesContent":["<template>\n\t<el-card>\n\t\t<template #header>\n\t\t\t<div class=\"card-header\">\n\t\t\t\t<span class=\"font-medium\">发布订阅者</span>\n\t\t\t</div>\n\t\t</template>\n\t\t描述：<br>\n\t\t订阅者（Subscriber）把自己想订阅的事件 注册（Subscribe）到调度中心（Event Channel）<br>\n\t\t当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由 调度中心 统一调度（Fire Event）订阅者注册到调度中心的处理代码。<br>\n\t\t思路：<br>\n\t\t创建一个类 class <br>\n\t\t在这个类里创建一个缓存列表(调度中心)<br>\n\t\ton 方法 - 用来把函数fn添加到缓存列表(订阅者注册事件到调度中心)<br>\n\t\temit 方法 - 取到event事件类型，根据event值去执行对应缓存列表中的函数(发布者发布事件到调度中心，调度中心处理代码)<br>\n\t\toff 方法 - 可以根据event事件类型取消订阅(取消订阅)<br>\n\t\tclass Observer {<br>\n\t\tconstructor() {}<br>\n\t\t// 向队列添加内容\n\t\t$on(){}<br>\n\t\t// 删除队列中的内容\n\t\t$off(){}<br>\n\t\t// 触发消息队列里的内容\n\t\t$emit(){}<br>\n\t\t}<br>\n\t\t/ 使用构造函数创建一个实例\n\t\tconst person1 = new Observer();\n\n\t\t// 向这个`person1`委托一些内容，调用`person1 `的`$ON`方法\n\t\tperson1.$on('买红宝石', handlerA)\n\t\tfunction handlerA() {\n\t\tconsole.log('handlerA');\n\t\t}\n\t</el-card>\n</template>\n\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
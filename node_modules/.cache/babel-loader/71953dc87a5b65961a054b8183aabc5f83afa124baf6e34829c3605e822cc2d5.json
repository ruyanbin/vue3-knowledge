{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { uuid } from '../../../util/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util';\nimport { fade } from '@jiaminghi/color';\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n      defaultColor: ['#2783ce', '#2cf7fe'],\n      mergedColor: [],\n      pathD: [],\n      pathColor: [],\n      circleR: [],\n      splitLinePoints: [],\n      arcD: [],\n      segment: 30,\n      sectorAngle: Math.PI / 3,\n      ringNum: 3,\n      ringWidth: 1,\n      showSplitLine: true\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  computed: {\n    x() {\n      const {\n        width\n      } = this;\n      return width / 2;\n    },\n    y() {\n      const {\n        height\n      } = this;\n      return height / 2;\n    }\n  },\n  methods: {\n    init() {\n      const {\n        mergeColor,\n        calcPathD,\n        calcPathColor,\n        calcCircleR,\n        calcSplitLinePoints,\n        calcArcD\n      } = this;\n      mergeColor();\n      calcPathD();\n      calcPathColor();\n      calcCircleR();\n      calcSplitLinePoints();\n      calcArcD();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    },\n    calcPathD() {\n      const {\n        x,\n        y,\n        width,\n        segment,\n        sectorAngle\n      } = this;\n      const startAngle = -Math.PI / 2;\n      const angleGap = sectorAngle / segment;\n      const r = width / 4;\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle);\n      this.pathD = new Array(segment).fill('').map((_, i) => {\n        const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5));\n        const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`;\n        lastEndPoints = endPoints;\n        return d;\n      });\n    },\n    calcPathColor() {\n      const {\n        mergedColor: [color],\n        segment\n      } = this;\n      const colorGap = 100 / (segment - 1);\n      this.pathColor = new Array(segment).fill(color).map((_, i) => fade(color, 100 - i * colorGap));\n    },\n    calcCircleR() {\n      const {\n        segment,\n        ringNum,\n        width,\n        ringWidth\n      } = this;\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum;\n      this.circleR = new Array(ringNum).fill(0).map((_, i) => radiusGap * (i + 1));\n    },\n    calcSplitLinePoints() {\n      const {\n        x,\n        y,\n        width\n      } = this;\n      const angleGap = Math.PI / 6;\n      const r = width / 2;\n      this.splitLinePoints = new Array(6).fill('').map((_, i) => {\n        const startAngle = angleGap * (i + 1);\n        const endAngle = startAngle + Math.PI;\n        const startPoint = getCircleRadianPoint(x, y, r, startAngle);\n        const endPoint = getCircleRadianPoint(x, y, r, endAngle);\n        return `${startPoint.join(',')} ${endPoint.join(',')}`;\n      });\n    },\n    calcArcD() {\n      const {\n        x,\n        y,\n        width\n      } = this;\n      const angleGap = Math.PI / 6;\n      const r = width / 2 - 1;\n      this.arcD = new Array(4).fill('').map((_, i) => {\n        const startAngle = angleGap * (3 * i + 1);\n        const endAngle = startAngle + angleGap;\n        const startPoint = getCircleRadianPoint(x, y, r, startAngle);\n        const endPoint = getCircleRadianPoint(x, y, r, endAngle);\n        return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`;\n      });\n    },\n    afterAutoResizeMixinInit() {\n      const {\n        init\n      } = this;\n      init();\n    },\n    fade\n  }\n};","map":{"version":3,"mappings":"AAqGA,OAAOA,UAAS,MAAO,2BAA0B;AACjD,SAASC,IAAG,QAAS,qBAAoB;AAEzC,SAASC,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAS,EAAEC,oBAAmB,QAAS,qCAAoC;AAEpF,SAASC,IAAG,QAAS,kBAAiB;AAEtC,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,MAAM,EAAE,CAACP,UAAU,CAAC;EACpBQ,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAE,MAAO;IAClB,CAAC;IACD;;;IAGAC,OAAO,EAAE;MACPH,IAAI,EAAEI,MAAM;MACZF,OAAO,EAAE;IACX,CAAC;IACD;;;IAGAG,OAAO,EAAE;MACPL,IAAI,EAAEI,MAAM;MACZF,OAAO,EAAE;IACX;EACF,CAAC;EACDI,IAAG,GAAK;IACN,MAAMC,EAAC,GAAIhB,IAAI,EAAC;IAChB,OAAO;MACLiB,GAAG,EAAE,eAAe;MACpBC,GAAG,EAAG,mBAAkBF,EAAG,EAAC;MAC5BG,UAAU,EAAG,0BAAyBH,EAAG,EAAC;MAE1CI,YAAY,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MAEpCC,WAAW,EAAE,EAAE;MAEfC,KAAK,EAAE,EAAE;MAETC,SAAS,EAAE,EAAE;MAEbC,OAAO,EAAE,EAAE;MAEXC,eAAe,EAAE,EAAE;MAEnBC,IAAI,EAAE,EAAE;MAERC,OAAO,EAAE,EAAE;MAEXC,WAAW,EAAEC,IAAI,CAACC,EAAC,GAAI,CAAC;MAExBC,OAAO,EAAE,CAAC;MAEVC,SAAS,EAAE,CAAC;MAEZC,aAAa,EAAE;IACjB;EACF,CAAC;EACDC,KAAK,EAAE;IACL1B,KAAI,GAAK;MACP,MAAM;QAAE2B;MAAW,IAAI,IAAG;MAE1BA,UAAU,EAAC;IACb;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,IAAK;MACH,MAAM;QAAEC;MAAM,IAAI,IAAG;MAErB,OAAOA,KAAI,GAAI;IACjB,CAAC;IACDC,IAAK;MACH,MAAM;QAAEC;MAAO,IAAI,IAAG;MAEtB,OAAOA,MAAK,GAAI;IAClB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,IAAG,GAAK;MACN,MAAM;QAAEP,UAAU;QAAEQ,SAAS;QAAEC,aAAa;QAAEC,WAAW;QAAEC,mBAAmB;QAAEC;MAAS,IAAI,IAAG;MAEhGZ,UAAU,EAAC;MAEXQ,SAAS,EAAC;MAEVC,aAAa,EAAC;MAEdC,WAAW,EAAC;MAEZC,mBAAmB,EAAC;MAEpBC,QAAQ,EAAC;IACX,CAAC;IACDZ,UAAS,GAAK;MACZ,MAAM;QAAE3B,KAAK;QAAEY;MAAa,IAAI,IAAG;MAEnC,IAAI,CAACC,WAAU,GAAIpB,SAAS,CAACC,SAAS,CAACkB,YAAY,EAAE,IAAI,CAAC,EAAEZ,KAAI,IAAK,EAAE;IACzE,CAAC;IACDmC,SAAQ,GAAK;MACX,MAAM;QAAEN,CAAC;QAAEE,CAAC;QAAED,KAAK;QAAEX,OAAO;QAAEC;MAAY,IAAI,IAAG;MAEjD,MAAMoB,UAAS,GAAI,CAACnB,IAAI,CAACC,EAAC,GAAI;MAC9B,MAAMmB,QAAO,GAAIrB,WAAU,GAAID,OAAM;MACrC,MAAMuB,IAAIZ,KAAI,GAAI;MAClB,IAAIa,aAAY,GAAIhD,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEF,UAAU;MAE5D,IAAI,CAAC1B,KAAI,GAAI,IAAIZ,KAAK,CAACiB,OAAO,EAC3ByB,IAAI,CAAC,EAAE,EACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACb,MAAMC,SAAQ,GAAIrD,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEF,UAAS,GAAI,CAACO,IAAI,CAAC,IAAIN,QAAQ,CAAC,CAACI,GAAG,CAACC,KAAKA,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;QACtG,MAAMC,IAAK,IAAGP,aAAa,CAACQ,IAAI,CAAC,GAAG,CAAC,KAAKT,CAAE,KAAIA,CAAC,UAAUM,SAAS,CAACG,IAAI,CAAC,GAAG,CAAE;QAC/ER,aAAY,GAAIK,SAAQ;QAExB,OAAOE;MACT,CAAC;IACL,CAAC;IACDd,aAAY,GAAK;MACf,MAAM;QAAEvB,WAAW,EAAE,CAACb,KAAK,CAAC;QAAEmB;MAAQ,IAAI,IAAG;MAE7C,MAAMiC,QAAO,GAAI,GAAE,IAAKjC,OAAM,GAAI,CAAC;MAEnC,IAAI,CAACJ,SAAQ,GAAI,IAAIb,KAAK,CAACiB,OAAO,EAC/ByB,IAAI,CAAC5C,KAAK,EACV6C,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKnD,IAAI,CAACI,KAAK,EAAE,GAAE,GAAI+C,IAAIK,QAAQ,CAAC;IAClD,CAAC;IACDf,WAAU,GAAK;MACb,MAAM;QAAElB,OAAO;QAAEI,OAAO;QAAEO,KAAK;QAAEN;MAAU,IAAI,IAAG;MAElD,MAAM6B,SAAQ,GAAI,CAACvB,KAAI,GAAI,IAAIN,SAAQ,GAAI,CAAC,IAAID,OAAM;MAEtD,IAAI,CAACP,OAAM,GAAI,IAAId,KAAK,CAACqB,OAAO,EAC7BqB,IAAI,CAAC,CAAC,EACNC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKM,SAAQ,IAAKN,IAAI,CAAC,CAAC;IACtC,CAAC;IACDT,mBAAkB,GAAK;MACrB,MAAM;QAAET,CAAC;QAAEE,CAAC;QAAED;MAAM,IAAI,IAAG;MAE3B,MAAMW,QAAO,GAAIpB,IAAI,CAACC,EAAC,GAAI;MAC3B,MAAMoB,IAAIZ,KAAI,GAAI;MAElB,IAAI,CAACb,eAAc,GAAI,IAAIf,KAAK,CAAC,CAAC,EAC/B0C,IAAI,CAAC,EAAE,EACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACb,MAAMP,UAAS,GAAIC,QAAO,IAAKM,IAAI,CAAC;QACpC,MAAMO,QAAO,GAAId,UAAS,GAAInB,IAAI,CAACC,EAAC;QACpC,MAAMiC,UAAS,GAAI5D,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEF,UAAU;QAC3D,MAAMgB,QAAO,GAAI7D,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEY,QAAQ;QAEvD,OAAQ,GAAEC,UAAU,CAACJ,IAAI,CAAC,GAAG,CAAC,IAAIK,QAAQ,CAACL,IAAI,CAAC,GAAG,CAAE;MACvD,CAAC;IACL,CAAC;IACDZ,QAAO,GAAK;MACV,MAAM;QAAEV,CAAC;QAAEE,CAAC;QAAED;MAAM,IAAI,IAAG;MAE3B,MAAMW,QAAO,GAAIpB,IAAI,CAACC,EAAC,GAAI;MAC3B,MAAMoB,IAAIZ,KAAI,GAAI,IAAI;MAEtB,IAAI,CAACZ,IAAG,GAAI,IAAIhB,KAAK,CAAC,CAAC,EACpB0C,IAAI,CAAC,EAAE,EACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACb,MAAMP,UAAS,GAAIC,QAAO,IAAK,IAAIM,IAAI,CAAC;QACxC,MAAMO,QAAO,GAAId,UAAS,GAAIC,QAAO;QACrC,MAAMc,UAAS,GAAI5D,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEF,UAAU;QAC3D,MAAMgB,QAAO,GAAI7D,oBAAoB,CAACkC,CAAC,EAAEE,CAAC,EAAEW,CAAC,EAAEY,QAAQ;QAEvD,OAAQ,IAAGC,UAAU,CAACJ,IAAI,CAAC,GAAG,CAAC,KAAKtB,CAAE,KAAIE,CAAC,UAAUyB,QAAQ,CAACL,IAAI,CAAC,GAAG,CAAE;MAC1E,CAAC;IACL,CAAC;IACDM,wBAAuB,GAAK;MAC1B,MAAM;QAAEvB;MAAK,IAAI,IAAG;MAEpBA,IAAI,EAAC;IACP,CAAC;IACDtC;EACF;AACF","names":["autoResize","uuid","deepMerge","deepClone","getCircleRadianPoint","fade","name","mixins","props","color","type","Array","default","scanDur","Number","haloDur","data","id","ref","gId","gradientId","defaultColor","mergedColor","pathD","pathColor","circleR","splitLinePoints","arcD","segment","sectorAngle","Math","PI","ringNum","ringWidth","showSplitLine","watch","mergeColor","computed","x","width","y","height","methods","init","calcPathD","calcPathColor","calcCircleR","calcSplitLinePoints","calcArcD","startAngle","angleGap","r","lastEndPoints","fill","map","_","i","endPoints","toFixed","d","join","colorGap","radiusGap","endAngle","startPoint","endPoint","afterAutoResizeMixinInit"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration12/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <defs>\n        <g :id=\"gId\">\n          <path\n            :stroke=\"pathColor[i]\"\n            :stroke-width=\"width / 2\"\n            fill=\"transparent\"\n            v-for=\"(d, i) in pathD\"\n            :key=\"d\"\n            :d=\"d\"\n          />\n        </g>\n\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\n        </radialGradient>\n      </defs>\n\n      <circle\n        v-for=\"r in circleR\"\n        :key=\"r\"\n        :r=\"r\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :stroke=\"mergedColor[1]\"\n        :stroke-width=\"0.5\"\n        fill=\"transparent\"\n      />\n\n      <circle\n        r=\"1\"\n        :cx=\"x\"\n        :cy=\"y\"\n        stroke=\"transparent\"\n        :fill=\"`url(#${gradientId})`\"\n      >\n        <animate\n          attributeName=\"r\"\n          :values=\"`1;${width / 2}`\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          values=\"1;0\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        r=\"2\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :fill=\"mergedColor[1]\"\n      />\n\n      <g v-if=\"showSplitLine\">\n        <polyline\n          v-for=\"p in splitLinePoints\"\n          :key=\"p\"\n          :points=\"p\"\n          :stroke=\"mergedColor[1]\"\n          :stroke-width=\"0.5\"\n          opacity=\"0.5\"\n        />\n      </g>\n\n      <path\n        v-for=\"d in arcD\"\n        :key=\"d\"\n        :d=\"d\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        fill=\"transparent\"\n      />\n\n      <use :xlink:href=\"`#${gId}`\">\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\n          :dur=\"`${scanDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n    </svg>\n\n    <div class=\"decoration-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n\n      defaultColor: ['#2783ce', '#2cf7fe'],\n\n      mergedColor: [],\n\n      pathD: [],\n\n      pathColor: [],\n\n      circleR: [],\n\n      splitLinePoints: [],\n\n      arcD: [],\n\n      segment: 30,\n\n      sectorAngle: Math.PI / 3,\n\n      ringNum: 3,\n\n      ringWidth: 1,\n\n      showSplitLine: true\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  computed: {\n    x () {\n      const { width } = this\n\n      return width / 2\n    },\n    y () {\n      const { height } = this\n\n      return height / 2\n    }\n  },\n  methods: {\n    init () {\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\n\n      mergeColor()\n\n      calcPathD()\n\n      calcPathColor()\n\n      calcCircleR()\n\n      calcSplitLinePoints()\n\n      calcArcD()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    calcPathD () {\n      const { x, y, width, segment, sectorAngle } = this\n\n      const startAngle = -Math.PI / 2\n      const angleGap = sectorAngle / segment\n      const r = width / 4\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\n\n      this.pathD = new Array(segment)\n        .fill('')\n        .map((_, i) => {\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\n          lastEndPoints = endPoints\n\n          return d\n        })\n    },\n    calcPathColor () {\n      const { mergedColor: [color], segment } = this\n\n      const colorGap = 100 / (segment - 1)\n\n      this.pathColor = new Array(segment)\n        .fill(color)\n        .map((_, i) => fade(color, 100 - i * colorGap))\n    },\n    calcCircleR () {\n      const { segment, ringNum, width, ringWidth } = this\n\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\n\n      this.circleR = new Array(ringNum)\n        .fill(0)\n        .map((_, i) => radiusGap * (i + 1))\n    },\n    calcSplitLinePoints () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2\n\n      this.splitLinePoints = new Array(6)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (i + 1)\n          const endAngle = startAngle + Math.PI\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\n        })\n    },\n    calcArcD () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2 - 1\n\n      this.arcD = new Array(4)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (3 * i + 1)\n          const endAngle = startAngle + angleGap\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\n        })\n    },\n    afterAutoResizeMixinInit () {\n      const { init } = this\n\n      init()\n    },\n    fade\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5f1a7cb4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"BFC\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \" bfc概念 \")], -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \" 触发BFC的方式 \")], -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \" 布局规则 \")], -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \" BFC作用 \")], -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \" margin穿透问题 ---\")], -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 overflow: hidden 来触发父级的BFC\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"wrapper\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"inner\"\n})], -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, \" bfc 解决margin重叠\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用\", -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 inline-block 元素对空格敏感，会导致两个div之间出现空隙\", -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"两个inline-block 元素之间如果有空格、回车、tab，那么在页面上就有一个空隙 两个不同高度的 inline-block 元素顶部无法对齐，或者使用inline-block下面无缘无故多出几像素 \"), /*#__PURE__*/_createElementVNode(\"p\")], -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"bfc-wrapper\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"bfc-1\"\n}, \"1\"), /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"bfc-2\"\n}, \"2\")], -1 /* HOISTED */));\n\nexport function render(_ctx, _cache) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_2]),\n    default: _withCtx(() => [_createTextVNode(\" 直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。 常见的FC有BFC、IFC（行级格式化上下文），还有GFC（网格布局格式化上下文）和FFC（自适应格式化上下文 \")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_3]),\n    default: _withCtx(() => [_createTextVNode(\" 1.根元素，即HTML元素 2.float的值不为none 3.overflow的值不为visible 4.display的值为inline-block、table-cell、table-caption 5.position的值为absolute或fixed \")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_4]),\n    default: _withCtx(() => [_createTextVNode(\" 1.内部的Box会在垂直方向，一个接一个地放置。 2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 4.BFC的区域不会与float box重叠。 5.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 \")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_5]),\n    default: _withCtx(() => [_createTextVNode(\" 1.自适应两栏布局。 2.可以阻止元素被浮动元素覆盖 3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 4.可以包含浮动元素——清除内部浮动。 \")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_6]),\n    default: _withCtx(() => [_hoisted_7, _hoisted_8]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    class: \"mt10\"\n  }, {\n    header: _withCtx(() => [_hoisted_9]),\n    default: _withCtx(() => [_hoisted_10, _hoisted_11, _hoisted_12, _hoisted_13]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"mappings":";;;EACKA,KAAK,EAAC;AAAK;gEAGZC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAAwC;EAAlCD,KAAK,EAAC;AAAa,GAAC,SAAO;gEASlCC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAA4C;EAAtCD,KAAK,EAAC;AAAa,GAAC,YAAW;gEAWtCC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAAwC;EAAlCD,KAAK,EAAC;AAAa,GAAC,QAAO;gEAWlCC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAAyC;EAAnCD,KAAK,EAAC;AAAa,GAAC,SAAQ;gEAUnCC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAAiD;EAA3CD,KAAK,EAAC;AAAa,GAAC,iBAAgB;gEAG5CC,oBAA2H,WAAxH,sHAAoH;gEACvHA,oBAEM;EAFDD,KAAK,EAAC;AAAS,iBACnBC,oBAAyB;EAApBD,KAAK,EAAC;AAAO;gEAKlBC,oBAA8C;EAAzCD,KAAK,EAAC;AAAa,GAAC,iBAAe;iEAEzCC,oBAAqE,WAAlE,gEAA8D;iEACjEA,oBAAoF,WAAjF,+EAA6E;iEAChFA,oBAGC,0CAHE,yGAEN,oCAAO;iEAEJA,oBAGM;EAHDD,KAAK,EAAC;AAAa,iBACvBC,oBAA2B;EAAtBD,KAAK,EAAC;AAAQ,GAAC,GAAC,gBACrBC,oBAA0B;EAArBD,KAAK,EAAC;AAAO,GAAC,GAAC;;;;uBArExBE,oBAwEM,OAxENC,UAwEM,GAvELC,aASWC;IATFL,KAAK,EAAC;EAAM;IACRM,MAAM,WAChB,MAEM,CAFNC,UAEM;sBACI,MAIZ,kBAJY,yHAIZ;;MACAH,aAWUC;IAXDL,KAAK,EAAC;EAAM;IACTM,MAAM,WAChB,MAEM,CAFNE,UAEM;sBACI,MAMZ,kBANY,qIAMZ;;MACCJ,aAWSC;IAXAL,KAAK,EAAC;EAAM;IACVM,MAAM,WAChB,MAEM,CAFNG,UAEM;sBACI,MAMZ,kBANY,8NAMZ;;MACGL,aAUOC;IAVEL,KAAK,EAAC;EAAM;IACZM,MAAM,WAChB,MAEM,CAFNI,UAEM;sBACI,MAKZ,kBALY,0HAKZ;;MACEN,aAUQC;IAVCL,KAAK,EAAC;EAAM;IACXM,MAAM,WAChB,MAEM,CAFNK,UAEM;sBAEP,MAA2H,CAA3HC,UAA2H,EAC3HC,UAEM;;MAERT,aAcWC;IAdFL,KAAK,EAAC;EAAM;IACRM,MAAM,WAChB,MAA8C,CAA9CQ,UAA8C;sBAE/C,MAAqE,CAArEC,WAAqE,EACrEC,WAAoF,EACpFC,WAGC,EACDC,WAGM","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/layout/BFC.vue"],"sourcesContent":["<template>\n<div class=\"BFC\">\n\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\"> bfc概念 </span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。\n\n常见的FC有BFC、IFC（行级格式化上下文），还有GFC（网格布局格式化上下文）和FFC（自适应格式化上下文\n\t\t</el-card>\t\n\t\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\">  触发BFC的方式 </span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t1.根元素，即HTML元素\n\t\t\t2.float的值不为none\n\t\t\t3.overflow的值不为visible\n\t\t\t4.display的值为inline-block、table-cell、table-caption\n\t\t\t5.position的值为absolute或fixed\n\t\t</el-card>\n\t\t\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\">  布局规则 </span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t1.内部的Box会在垂直方向，一个接一个地放置。\n\t\t\t2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n\t\t\t3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n\t\t\t4.BFC的区域不会与float box重叠。\n\t\t\t5.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\t\t</el-card>\n\t\t\t\t\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\">  BFC作用 </span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t1.自适应两栏布局。\n\t\t\t2.可以阻止元素被浮动元素覆盖\n\t\t\t3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n\t\t\t4.可以包含浮动元素——清除内部浮动。\n\t\t</el-card>\n\t\t\t\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\">  margin穿透问题 ---</span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<p>解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 overflow: hidden 来触发父级的BFC</p>\n\t\t\t<div class=\"wrapper\">\n\t\t\t\t<div class=\"inner\"></div>\n\t\t\t</div>\n\t\t</el-card>\n\t<el-card class=\"mt10\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\"> bfc 解决margin重叠</div>\n\t\t\t</template>\n\t\t\t<p>那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用</p>\n\t\t\t<p>采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 inline-block 元素对空格敏感，会导致两个div之间出现空隙</p>\n\t\t\t<p>两个inline-block 元素之间如果有空格、回车、tab，那么在页面上就有一个空隙\n两个不同高度的 inline-block 元素顶部无法对齐，或者使用inline-block下面无缘无故多出几像素\n<p></p>\n</p>\n\t\t\t<div class=\"bfc-wrapper\">\n\t\t\t\t<div class=\"bfc-1 \">1</div>\n\t\t\t\t<div class=\"bfc-2\">2</div>\n\t\t\t</div>\n\t\t</el-card>\n</div>\n</template>\n\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n.BFC{\n\theight: 100%;\n\twidth: 100%;\n\toverflow: auto;\n}\n.mt10{\n\tmargin-top: 10px;\n}\n.wrapper {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  overflow: hidden;\n}\n.inner{\n\twidth: 100px;\n  height: 100px;\n\tbackground: blue;\n  margin-top: 50px;\n}\n.bfc-wrapper {\n\twidth: 100%;\n\theight: 200px;\n\tborder-top: 1px solid #000;\n\toverflow: hidden;\n\n\t>div {\n\t\theight: 50px;\n\t}\n\n\t.bfc-1 {\n\t\tbackground: #f00;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t.bfc-2 {\n\t\tmargin-top: 5px;\n\t\tdisplay: inline-block;\n\t\tbackground: #f0f;\n\t}\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
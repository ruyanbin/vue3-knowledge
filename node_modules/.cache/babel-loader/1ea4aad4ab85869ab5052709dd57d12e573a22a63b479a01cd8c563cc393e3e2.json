{"ast":null,"code":"import { inject, computed } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport { checkboxGroupContextKey } from '../../../../tokens/checkbox.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { useDisabled } from '../../../../hooks/use-common-props/index.mjs';\nconst useCheckboxDisabled = ({\n  model,\n  isChecked\n}) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n  const isLimitDisabled = computed(() => {\n    var _a, _b;\n    const max = (_a = checkboxGroup == null ? void 0 : checkboxGroup.max) == null ? void 0 : _a.value;\n    const min = (_b = checkboxGroup == null ? void 0 : checkboxGroup.min) == null ? void 0 : _b.value;\n    return !isUndefined(max) && model.value.length >= max && !isChecked.value || !isUndefined(min) && model.value.length <= min && isChecked.value;\n  });\n  const isDisabled = useDisabled(computed(() => (checkboxGroup == null ? void 0 : checkboxGroup.disabled.value) || isLimitDisabled.value));\n  return {\n    isDisabled,\n    isLimitDisabled\n  };\n};\nexport { useCheckboxDisabled };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"stroke\", \"points\"];\nconst _hoisted_3 = [\"from\", \"to\", \"dur\"];\nconst _hoisted_4 = [\"stroke\", \"points\"];\nconst _hoisted_5 = [\"from\", \"to\", \"dur\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-5\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: _ctx.width,\n    height: _ctx.height\n  }, [_createElementVNode(\"polyline\", {\n    fill: \"transparent\",\n    stroke: $data.mergedColor[0],\n    \"stroke-width\": \"3\",\n    points: $data.line1Points\n  }, [_createElementVNode(\"animate\", {\n    attributeName: \"stroke-dasharray\",\n    attributeType: \"XML\",\n    from: `0, ${$data.line1Length / 2}, 0, ${$data.line1Length / 2}`,\n    to: `0, 0, ${$data.line1Length}, 0`,\n    dur: `${$props.dur}s`,\n    begin: \"0s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;1\",\n    keySplines: \"0.4,1,0.49,0.98\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_3)], 8 /* PROPS */, _hoisted_2), _createElementVNode(\"polyline\", {\n    fill: \"transparent\",\n    stroke: $data.mergedColor[1],\n    \"stroke-width\": \"2\",\n    points: $data.line2Points\n  }, [_createElementVNode(\"animate\", {\n    attributeName: \"stroke-dasharray\",\n    attributeType: \"XML\",\n    from: `0, ${$data.line2Length / 2}, 0, ${$data.line2Length / 2}`,\n    to: `0, 0, ${$data.line2Length}, 0`,\n    dur: `${$props.dur}s`,\n    begin: \"0s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;1\",\n    keySplines: \".4,1,.49,.98\",\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_5)], 8 /* PROPS */, _hoisted_4)], 8 /* PROPS */, _hoisted_1))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;uBACEA,oBAyCM;IAzCDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;qBACjCH,oBAuCM;IAvCAI,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED;MAC3BE,oBAkBW;IAjBTC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEN,iBAAW;IACpB,cAAY,EAAC,GAAG;IACfO,MAAM,EAAEP;MAETI,oBAWE;IAVAI,aAAa,EAAC,kBAAkB;IAChCC,aAAa,EAAC,KAAK;IAClBC,IAAI,QAAQV,iBAAW,YAAYA,iBAAW;IAC9CW,EAAE,WAAWX,iBAAW;IACxBY,GAAG,KAAKC,UAAG;IACZC,KAAK,EAAC,IAAI;IACVC,QAAQ,EAAC,QAAQ;IACjBC,QAAQ,EAAC,KAAK;IACdC,UAAU,EAAC,iBAAiB;IAC5BC,WAAW,EAAC;oEAGhBd,oBAkBW;IAjBTC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEN,iBAAW;IACpB,cAAY,EAAC,GAAG;IACfO,MAAM,EAAEP;MAETI,oBAWE;IAVAI,aAAa,EAAC,kBAAkB;IAChCC,aAAa,EAAC,KAAK;IAClBC,IAAI,QAAQV,iBAAW,YAAYA,iBAAW;IAC9CW,EAAE,WAAWX,iBAAW;IACxBY,GAAG,KAAKC,UAAG;IACZC,KAAK,EAAC,IAAI;IACVC,QAAQ,EAAC,QAAQ;IACjBC,QAAQ,EAAC,KAAK;IACdC,UAAU,EAAC,cAAc;IACzBC,WAAW,EAAC","names":["_createElementBlock","class","ref","$data","width","_ctx","height","_createElementVNode","fill","stroke","points","attributeName","attributeType","from","to","dur","$props","begin","calcMode","keyTimes","keySplines","repeatCount"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration5/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-5\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[0]\"\n        stroke-width=\"3\"\n        :points=\"line1Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line1Length / 2}, 0, ${line1Length / 2}`\"\n          :to=\"`0, 0, ${line1Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.4,1,0.49,0.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        :points=\"line2Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line2Length / 2}, 0, ${line2Length / 2}`\"\n          :to=\"`0, 0, ${line2Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".4,1,.49,.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { getPolylineLength } from '@jiaminghi/charts/lib/util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration5',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    dur: {\n      type: Number,\n      default: 1.2\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-5',\n\n      line1Points: '',\n      line2Points: '',\n\n      line1Length: 0,\n      line2Length: 0,\n\n      defaultColor: ['#3f96a5', '#3f96a5'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { width, height } = this\n\n      let line1Points = [\n        [0, height * 0.2], [width * 0.18, height * 0.2], [width * 0.2, height * 0.4], [width * 0.25, height * 0.4],\n        [width * 0.27, height * 0.6], [width * 0.72, height * 0.6], [width * 0.75, height * 0.4],\n        [width * 0.8, height * 0.4], [width * 0.82, height * 0.2], [width, height * 0.2]\n      ]\n\n      let line2Points = [\n        [width * 0.3, height * 0.8], [width * 0.7, height * 0.8]\n      ]\n\n      const line1Length = getPolylineLength(line1Points)\n      const line2Length = getPolylineLength(line2Points)\n\n      line1Points = line1Points.map(point => point.join(',')).join(' ')\n      line2Points = line2Points.map(point => point.join(',')).join(' ')\n\n      this.line1Points = line1Points\n      this.line2Points = line2Points\n\n      this.line1Length = line1Length\n      this.line2Length = line2Length\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
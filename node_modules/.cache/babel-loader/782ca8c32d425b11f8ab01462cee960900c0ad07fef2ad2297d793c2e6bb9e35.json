{"ast":null,"code":"import { defineComponent } from 'vue';\nvar locaMixin = defineComponent({\n  props: {\n    sourceUrl: {\n      type: String\n    },\n    sourceData: {\n      type: Object\n    },\n    geoBufferSource: {\n      type: [ArrayBuffer, String],\n      default() {\n        return null;\n      }\n    },\n    layerStyle: {\n      type: Object\n    },\n    defaultStyleValue: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    zooms: {\n      type: Array\n    },\n    opacity: {\n      type: Number\n    },\n    initEvents: {\n      type: Boolean,\n      default: true\n    },\n    visibleDuration: {\n      type: Number,\n      default: 0\n    },\n    onClick: {\n      type: Function,\n      default: null\n    },\n    onMousemove: {\n      type: Function,\n      default: null\n    },\n    onRightclick: {\n      type: Function,\n      default: null\n    }\n  },\n  emits: [\"mousemove\", \"click\", \"rightclick\"],\n  data() {\n    return {\n      isDragging: false,\n      isRotating: false\n    };\n  },\n  methods: {\n    setSource() {\n      if (this.source) {\n        this.source.destroy();\n        this.source = null;\n      }\n      if (this.geoBufferSource) {\n        if (typeof this.geoBufferSource === \"string\") {\n          this.source = new Loca.GeoBufferSource({\n            url: this.geoBufferSource\n          });\n        } else {\n          this.source = new Loca.GeoBufferSource({\n            data: this.geoBufferSource\n          });\n        }\n      } else if (this.sourceUrl) {\n        this.source = new Loca.GeoJSONSource({\n          url: this.sourceUrl\n        });\n      } else if (this.sourceData) {\n        this.source = new Loca.GeoJSONSource({\n          data: this.sourceData\n        });\n      } else {\n        this.source = new Loca.GeoJSONSource({});\n      }\n      this.$amapComponent.setSource(this.source);\n    },\n    initComplete() {\n      if (this.initEvents) {\n        this.bindEvents();\n      }\n    },\n    destroyComponent() {\n      this.unBindEvents();\n      if (!this.parentInstance.isDestroy) {\n        this.$parentComponent.remove(this.$amapComponent);\n        this.$amapComponent.destroy();\n      }\n      if (this.source) {\n        this.source.destroy();\n        this.source = null;\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    },\n    bindEvents() {\n      if (this.parentInstance) {\n        const map = this.parentInstance.getMap();\n        const $props = this.$props;\n        if ($props.onClick !== null) {\n          map.on(\"click\", this.clickMap);\n        }\n        if ($props.onMousemove !== null) {\n          map.on(\"mousemove\", this.mouseMoveMap);\n          map.on(\"dragstart\", this.dragStart);\n          map.on(\"dragend\", this.dragEnd);\n          map.on(\"rotatestart\", this.rotateStart);\n          map.on(\"rotateend\", this.rotateEnd);\n          map.on(\"mouseout\", this.mouseoutMap);\n        }\n        if ($props.onRightclick !== null) {\n          map.on(\"rightclick\", this.rightclickMap);\n        }\n      }\n    },\n    clickMap(e) {\n      const feature = this._getFeature(e);\n      this.$emit(\"click\", feature, e);\n    },\n    rightclickMap(e) {\n      const feature = this._getFeature(e);\n      this.$emit(\"rightclick\", feature, e);\n    },\n    mouseMoveMap(e) {\n      if (this.isDragging || this.isRotating) {\n        return;\n      }\n      const feature = this._getFeature(e);\n      this.$emit(\"mousemove\", feature, e);\n    },\n    _getFeature(e) {\n      return this.$amapComponent.queryFeature(e.pixel.toArray());\n    },\n    dragStart() {\n      this.isDragging = true;\n    },\n    dragEnd() {\n      this.isDragging = false;\n    },\n    mouseoutMap() {\n      this.isDragging = false;\n      this.isRotating = false;\n    },\n    rotateStart() {\n      this.isRotating = true;\n    },\n    rotateEnd() {\n      this.isRotating = false;\n    },\n    unBindEvents() {\n      if (this.parentInstance) {\n        const map = this.parentInstance.getMap();\n        map.off(\"click\", this.clickMap);\n        map.off(\"rightclick\", this.rightclickMap);\n        map.off(\"mousemove\", this.mouseMoveMap);\n        map.off(\"dragstart\", this.dragStart);\n        map.off(\"dragend\", this.dragEnd);\n        map.off(\"rotatestart\", this.rotateStart);\n        map.off(\"rotateend\", this.rotateEnd);\n        map.off(\"mouseout\", this.mouseoutMap);\n      }\n    },\n    __layerStyle(style) {\n      this.$nextTick(() => {\n        if (this.$amapComponent.setStyle) {\n          this.$amapComponent.setStyle(style);\n        }\n      });\n    },\n    __sourceUrl() {\n      this.$nextTick(() => {\n        this.setSource();\n      });\n    },\n    __sourceData() {\n      this.$nextTick(() => {\n        this.setSource();\n      });\n    },\n    __geoBufferSource() {\n      this.$nextTick(() => {\n        this.setSource();\n      });\n    },\n    __visible(flag) {\n      if (this.$amapComponent.show && this.$amapComponent.hide) {\n        flag === false ? this.$amapComponent.hide(this.visibleDuration) : this.$amapComponent.show(this.visibleDuration);\n      }\n    }\n  }\n});\nexport { locaMixin as default };","map":{"version":3,"mappings":";AAEA,gBAAeA,eAAgB;EAC7BC,KAAO;IACLC,SAAW;MACTC,IAAM;IAAA;IAERC,UAAY;MACVD,IAAM;IAAA;IAERE,eAAiB;MACfF,MAAM,CAACG,WAAa;MACpBC,OAAU;QACD;MAAA;IAAA;IAGXC,UAAY;MACVL,IAAM;IAAA;IAERM,iBAAmB;MACjBN,IAAM;MACNI,OAAU;QACD;MAAA;IAAA;IAGXG,KAAO;MACLP,IAAM;IAAA;IAERQ,OAAS;MACPR,IAAM;IAAA;IAERS,UAAY;MACVT,IAAM;MACNI,OAAS;IAAA;IAEXM,eAAiB;MACfV,IAAM;MACNI,OAAS;IAAA;IAEXO,OAAS;MACPX,IAAM;MACNI,OAAS;IAAA;IAEXQ,WAAa;MACXZ,IAAM;MACNI,OAAS;IAAA;IAEXS,YAAc;MACZb,IAAM;MACNI,OAAS;IAAA;EAAA;EAGbU,OAAO,CAAC,aAAa,OAAS;EAC9BC,IAAO;IACE;MACLC,UAAY;MACZC,UAAY;IAAA;EAAA;EAGhBC,OAAS;IACPC,SAAY;MACV,IAAI,KAAKC,MAAQ;QACf,KAAKA,MAAO;QACZ,KAAKA,MAAS;MAAA;MAEhB,IAAI,KAAKlB,eAAiB;QACrB,WAAO,IAAK,qBAAoB,QAAS;UACrC,cAAS,IAAImB,KAAKC,eAAgB;YACrCC,KAAK,IAAK;UAAA;QAAA,CAET;UACE,cAAS,IAAIF,KAAKC,eAAgB;YACrCP,MAAM,IAAK;UAAA;QAAA;MAAA,WAGP,KAAKhB,SAAW;QACnB,cAAS,IAAIsB,KAAKG,aAAc;UACnCD,KAAK,IAAK;QAAA;MAAA,WAEH,KAAKtB,UAAY;QACrB,cAAS,IAAIoB,KAAKG,aAAc;UACnCT,MAAM,IAAK;QAAA;MAAA,CAER;QACA,cAAS,IAAIM,KAAKG,aAAc;MAAA;MAGlC,oBAAeL,UAAU,IAAK;IAAA;IAErCM,YAAe;MACb,IAAI,KAAKhB,UAAY;QACd;MAAA;IAAA;IAGTiB,gBAAmB;MACZ;MACF,KAAC,IAAK,gBAAeC,SAAU;QAC3B,sBAAiBC,OAAO,IAAK;QAClC,KAAKC,cAAe;MAAA;MAEtB,IAAI,KAAKT,MAAQ;QACf,KAAKA,MAAO;QACZ,KAAKA,MAAS;MAAA;MAEhB,KAAKS,cAAiB;MACtB,KAAKC,gBAAmB;IAAA;IAE1BC,UAAa;MACX,IAAG,KAAKC,cAAe;QACf,YAAM,KAAKA,cAAe;QAChC,MAAMC,SAAS,IAAK;QACjB,WAAOtB,YAAY,IAAK;UACrBuB,OAAG,SAAS,IAAK;QAAA;QAEpB,WAAOtB,gBAAgB,IAAK;UACzBsB,OAAG,aAAa,IAAK;UACrBA,OAAG,aAAa,IAAK;UACrBA,OAAG,WAAW,IAAK;UACnBA,OAAG,eAAe,IAAK;UACvBA,OAAG,aAAa,IAAK;UACrBA,OAAG,YAAY,IAAK;QAAA;QAEvB,WAAOrB,iBAAiB,IAAK;UAC1BqB,OAAG,cAAc,IAAK;QAAA;MAAA;IAAA;IAIhCC,SAASC,CAAG;MACJ,gBAAU,KAAKC,WAAY;MAC5B,WAAM,SAASC,OAAS;IAAA;IAE/BC,cAAcH,CAAG;MACT,gBAAU,KAAKC,WAAY;MAC5B,WAAM,cAAcC,OAAS;IAAA;IAEpCE,aAAaJ,CAAG;MACX,SAAKpB,UAAc,SAAKC,UAAW;QACpC;MAAA;MAEI,gBAAU,KAAKoB,WAAY;MAC5B,WAAM,aAAaC,OAAS;IAAA;IAEnCD,YAAYD,CAAE;MACZ,OAAO,IAAK,gBAAeK,YAAa,GAAEC,KAAM;IAAA;IAElDC,SAAW;MACT,KAAK3B,UAAa;IAAA;IAEpB4B,OAAS;MACP,KAAK5B,UAAa;IAAA;IAEpB6B,WAAa;MACX,KAAK7B,UAAa;MAClB,KAAKC,UAAa;IAAA;IAEpB6B,WAAa;MACX,KAAK7B,UAAa;IAAA;IAEpB8B,SAAW;MACT,KAAK9B,UAAa;IAAA;IAEpB+B,YAAe;MACb,IAAG,KAAKhB,cAAe;QACf,YAAM,KAAKA,cAAe;QAC5BE,QAAI,SAAS,IAAK;QAClBA,QAAI,cAAc,IAAK;QACvBA,QAAI,aAAa,IAAK;QACtBA,QAAI,aAAa,IAAK;QACtBA,QAAI,WAAW,IAAK;QACpBA,QAAI,eAAe,IAAK;QACxBA,QAAI,aAAa,IAAK;QACtBA,QAAI,YAAY,IAAK;MAAA;IAAA;IAG7Be,aAAaC,KAAO;MAClB,KAAKC,UAAU,MAAM;QACf,SAAKtB,eAAeuB,QAAU;UAChC,KAAKvB,eAAeuB,QAAS;QAAA;MAAA;IAAA;IAInCC,WAAa;MACX,KAAKF,UAAU,MAAM;QACd;MAAA;IAAA;IAGTG,YAAc;MACZ,KAAKH,UAAU,MAAM;QACd;MAAA;IAAA;IAGTI,iBAAmB;MACjB,KAAKJ,UAAU,MAAM;QACd;MAAA;IAAA;IAGTK,UAAUC,IAAM;MACd,IAAI,IAAK,gBAAeC,IAAQ,SAAK7B,eAAe8B,IAAM;QAC/CF,iBAAQ,KAAK5B,cAAe,MAAK,KAAKnB,eAAmB,SAAKmB,cAAe,MAAK,IAAK;MAAA;IAAA;EAAA;AAAA","names":["defineComponent","props","sourceUrl","type","sourceData","geoBufferSource","ArrayBuffer","default","layerStyle","defaultStyleValue","zooms","opacity","initEvents","visibleDuration","onClick","onMousemove","onRightclick","emits","data","isDragging","isRotating","methods","setSource","source","Loca","GeoBufferSource","url","GeoJSONSource","initComplete","destroyComponent","isDestroy","remove","$amapComponent","$parentComponent","bindEvents","parentInstance","$props","map","clickMap","e","_getFeature","feature","rightclickMap","mouseMoveMap","queryFeature","pixel","dragStart","dragEnd","mouseoutMap","rotateStart","rotateEnd","unBindEvents","__layerStyle","style","$nextTick","setStyle","__sourceUrl","__sourceData","__geoBufferSource","__visible","flag","show","hide"],"sources":["../../../../src/mixins/loca-component.ts"],"sourcesContent":["import {defineComponent} from \"vue\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    sourceUrl: {\r\n      type: String\r\n    },\r\n    sourceData: {\r\n      type: Object\r\n    },\r\n    geoBufferSource: {\r\n      type: [ArrayBuffer, String],\r\n      default() {\r\n        return null;\r\n      }\r\n    },\r\n    layerStyle: {\r\n      type: Object\r\n    },\r\n    defaultStyleValue: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    zooms: {\r\n      type: Array\r\n    },\r\n    opacity: {\r\n      type: Number\r\n    },\r\n    initEvents: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    visibleDuration: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    onClick: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    onMousemove: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    onRightclick: {\r\n      type: Function,\r\n      default: null\r\n    }\r\n  },\r\n  emits: ['mousemove', 'click', 'rightclick' ],\r\n  data() {\r\n    return {\r\n      isDragging: false,\r\n      isRotating: false\r\n    };\r\n  },\r\n  methods: {\r\n    setSource() {\r\n      if (this.source) {\r\n        this.source.destroy();\r\n        this.source = null;\r\n      }\r\n      if (this.geoBufferSource) {\r\n        if(typeof this.geoBufferSource === 'string'){\r\n          this.source = new Loca.GeoBufferSource({\r\n            url: this.geoBufferSource\r\n          });\r\n        }else{\r\n          this.source = new Loca.GeoBufferSource({\r\n            data: this.geoBufferSource\r\n          });\r\n        }\r\n      }else if (this.sourceUrl) {\r\n        this.source = new Loca.GeoJSONSource({\r\n          url: this.sourceUrl\r\n        });\r\n      } else if (this.sourceData) {\r\n        this.source = new Loca.GeoJSONSource({\r\n          data: this.sourceData\r\n        });\r\n      } else {\r\n        this.source = new Loca.GeoJSONSource({\r\n        });\r\n      }\r\n      this.$amapComponent.setSource(this.source);\r\n    },\r\n    initComplete() {\r\n      if (this.initEvents) {\r\n        this.bindEvents();\r\n      }\r\n    },\r\n    destroyComponent() {\r\n      this.unBindEvents();\r\n      if(!this.parentInstance.isDestroy){\r\n        this.$parentComponent.remove(this.$amapComponent);\r\n        this.$amapComponent.destroy();\r\n      }\r\n      if (this.source) {\r\n        this.source.destroy();\r\n        this.source = null;\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    },\r\n    bindEvents() {\r\n      if(this.parentInstance){\r\n        const map = this.parentInstance.getMap();\r\n        const $props = this.$props;\r\n        if($props.onClick !== null){\r\n          map.on('click', this.clickMap);\r\n        }\r\n        if($props.onMousemove !== null){\r\n          map.on('mousemove', this.mouseMoveMap);\r\n          map.on('dragstart', this.dragStart);\r\n          map.on('dragend', this.dragEnd);\r\n          map.on('rotatestart', this.rotateStart);\r\n          map.on('rotateend', this.rotateEnd);\r\n          map.on('mouseout', this.mouseoutMap)\r\n        }\r\n        if($props.onRightclick !== null){\r\n          map.on('rightclick', this.rightclickMap);\r\n        }\r\n      }\r\n    },\r\n    clickMap(e) {\r\n      const feature = this._getFeature(e);\r\n      this.$emit('click', feature, e);\r\n    },\r\n    rightclickMap(e) {\r\n      const feature = this._getFeature(e);\r\n      this.$emit('rightclick', feature, e);\r\n    },\r\n    mouseMoveMap(e) {\r\n      if(this.isDragging || this.isRotating){\r\n        return;\r\n      }\r\n      const feature = this._getFeature(e);\r\n      this.$emit('mousemove', feature, e);\r\n    },\r\n    _getFeature(e){\r\n      return this.$amapComponent.queryFeature(e.pixel.toArray());\r\n    },\r\n    dragStart(){\r\n      this.isDragging = true\r\n    },\r\n    dragEnd(){\r\n      this.isDragging = false\r\n    },\r\n    mouseoutMap(){\r\n      this.isDragging = false;\r\n      this.isRotating = false;\r\n    },\r\n    rotateStart(){\r\n      this.isRotating = true;\r\n    },\r\n    rotateEnd(){\r\n      this.isRotating = false;\r\n    },\r\n    unBindEvents() {\r\n      if(this.parentInstance){\r\n        const map = this.parentInstance.getMap();\r\n        map.off('click', this.clickMap);\r\n        map.off('rightclick', this.rightclickMap);\r\n        map.off('mousemove', this.mouseMoveMap);\r\n        map.off('dragstart', this.dragStart);\r\n        map.off('dragend', this.dragEnd);\r\n        map.off('rotatestart', this.rotateStart);\r\n        map.off('rotateend', this.rotateEnd);\r\n        map.off('mouseout', this.mouseoutMap)\r\n      }\r\n    },\r\n    __layerStyle(style) {\r\n      this.$nextTick(() => {\r\n        if (this.$amapComponent.setStyle) {\r\n          this.$amapComponent.setStyle(style);\r\n        }\r\n      });\r\n    },\r\n    __sourceUrl(){\r\n      this.$nextTick(() => {\r\n        this.setSource();\r\n      });\r\n    },\r\n    __sourceData(){\r\n      this.$nextTick(() => {\r\n        this.setSource();\r\n      });\r\n    },\r\n    __geoBufferSource(){\r\n      this.$nextTick(() => {\r\n        this.setSource();\r\n      });\r\n    },\r\n    __visible(flag) {\r\n      if (this.$amapComponent.show && this.$amapComponent.hide) {\r\n        flag === false ? this.$amapComponent.hide(this.visibleDuration) : this.$amapComponent.show(this.visibleDuration);\r\n      }\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-298208ec\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"card-api-item\\\" data-v-298208ec><div class=\\\"card-api-item-title\\\" data-v-298208ec>ref</div><div class=\\\"card-api-item-Description\\\" data-v-298208ec> 接受一个内部值，返回一个响应式的、可更改的 ref 对象，此对象只有一个指向其内部值的属性 .value。 <br data-v-298208ec> ref 对象是可更改的即所有对 .value 的操作都将被追踪，并且写操作会触发与之相关的副作用。<br data-v-298208ec> 如果将一个对象赋值给 ref，那么这个对象将通过 reactive() 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 ref，它们将被深层地解包。<br data-v-298208ec> 若要避免这种深层次的转换，请使用 shallowRef() 来替代。 </div><div class=\\\"card-api-item-content\\\" data-v-298208ec>const count = ref(0) console.log(count.value)</div><div class=\\\"card-api-item-content\\\" data-v-298208ec>const count = ref(0) console.log(count.value)</div></div>\", 1);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;EACMA,KAAK,EAAC;AAAM;;oBAChBC,UAYM;;uBAbPC,oBAcM,OAdNC,UAcM","names":["class","_hoisted_2","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/vueapi/CombinedApi/Core.vue"],"sourcesContent":["<template>\n\t<div class=\"card\">\n\t\t<div class=\"card-api-item\">\n\t\t\t<div class=\"card-api-item-title\">ref</div>\n\t\t\t<div class=\"card-api-item-Description\">\n\t\t\t\t接受一个内部值，返回一个响应式的、可更改的 ref 对象，此对象只有一个指向其内部值的属性 .value。\n\t\t\t\t<br />\n\t\t\t\tref 对象是可更改的即所有对 .value 的操作都将被追踪，并且写操作会触发与之相关的副作用。<br />\n\t\t\t\t如果将一个对象赋值给 ref，那么这个对象将通过 reactive() 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的\n\t\t\t\tref，它们将被深层地解包。<br />\n\t\t\t\t若要避免这种深层次的转换，请使用 shallowRef() 来替代。\n\t\t\t</div>\n\t\t\t<div class=\"card-api-item-content\">const count = ref(0) console.log(count.value)</div>\n\t\t\t<div class=\"card-api-item-content\">const count = ref(0) console.log(count.value)</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script lang=\"ts\" setup></script>\n<style lang=\"scss\" scoped>\n.card-api-item {\n\theight: auto;\n\twidth: 100%;\n\t.card-api-item-title {\n\t\theight: 40px;\n\t\tline-height: 40px;\n\t\tborder-bottom: 1px solid #ccc;\n\t}\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { openBlock, createElementBlock, renderSlot } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", null, [renderSlot(_ctx.$slots, \"default\")]);\n}\nexport { render };","map":{"version":3,"mappings":";;sBACEA,kBAAkB,eAAbC,WAAQC;AAAA","names":["_createElementBlock","_renderSlot","_ctx"],"sources":["../../../../../../src/packages/loca/Loca/Loca.vue?vue&type=template&id=1eb643fa&lang.js"],"sourcesContent":["<template>\r\n  <div><slot /></div>\r\n</template>\r\n<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport registerMixin from '../../../mixins/register-component';\r\nimport type { PropType} from \"vue\";\r\nimport type {EventOptions} from './Type'\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapLoca',\r\n  mixins: [registerMixin],\r\n  provide() {\r\n    return {\r\n      parentInstance: this\r\n    };\r\n  },\r\n  props: {\r\n    ambLight: {\r\n      type: Object\r\n    }, // 环境光\r\n    dirLight: {\r\n      type: Object\r\n    }, // 平行光\r\n    pointLight: {\r\n      type: Object\r\n    }, // 点光\r\n    onClick: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    onMousemove: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    onRightclick: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    eventOptions: {\r\n      type: Object as PropType<EventOptions>,\r\n      default: () => ({\r\n        hitFirst: true\r\n      })\r\n    } // 对于事件是否只触发第一个选中的数据\r\n  },\r\n  emits: ['mousemove', 'click', 'rightclick' ],\r\n  data() {\r\n    return {\r\n      isDragging: false,\r\n      isRotating: false,\r\n      hitFirst: true\r\n    };\r\n  },\r\n  unmounted() {\r\n    this.$amapComponent = null;\r\n    this.$parentComponent = null;\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      this.$amapComponent = new Loca.Container({\r\n        map: this.$parentComponent\r\n      });\r\n      if (options.ambLight) {\r\n        this.$amapComponent.ambLight = options.ambLight;\r\n      }\r\n      if (options.dirLight) {\r\n        this.$amapComponent.dirLight = options.dirLight;\r\n      }\r\n      if (options.pointLight) {\r\n        this.$amapComponent.pointLight = options.pointLight;\r\n      }\r\n      this.hitFirst = options.eventOptions.hitFirst;\r\n      this.bindEvents();\r\n    },\r\n    bindEvents(){\r\n      if(this.parentInstance){\r\n        const map = this.getMap();\r\n        const $props = this.$props;\r\n        if($props.onClick !== null){\r\n          map.on('click', this.clickMap);\r\n        }\r\n        if($props.onMousemove !== null){\r\n          map.on('mousemove', this.mouseMoveMap);\r\n          map.on('dragstart', this.dragStart);\r\n          map.on('dragend', this.dragEnd);\r\n          map.on('rotatestart', this.rotateStart);\r\n          map.on('rotateend', this.rotateEnd);\r\n          map.on('mouseout', this.mouseoutMap)\r\n        }\r\n        if($props.onRightclick !== null){\r\n          map.on('rightclick', this.rightclickMap);\r\n        }\r\n      }\r\n    },\r\n    clickMap(e) {\r\n      const features = this._getFeature(e);\r\n      this.$emit('click', features, e);\r\n    },\r\n    rightclickMap(e) {\r\n      const features = this._getFeature(e);\r\n      this.$emit('rightclick', features, e);\r\n    },\r\n    mouseMoveMap(e) {\r\n      if(this.isDragging || this.isRotating){\r\n        return;\r\n      }\r\n      const features = this._getFeature(e);\r\n      this.$emit('mousemove', features, e);\r\n    },\r\n    _getFeature(e){\r\n      const features: any[] = [];\r\n      if(this.$amapComponent.layers){\r\n        const layers: any[] = [];\r\n        this.$amapComponent.layers.forEach(( v => {\r\n          layers.push(v);\r\n        }));\r\n        layers.sort((a,b) => b.zIndex - a.zIndex)\r\n        const layerLen = layers.length;\r\n        for(let i=0;i<layerLen;i++){\r\n          const temp = layers[i].queryFeature(e.pixel.toArray());\r\n          if(temp){\r\n            features.push(temp)\r\n            if(this.hitFirst){\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return features;\r\n    },\r\n    dragStart(){\r\n      this.isDragging = true\r\n    },\r\n    dragEnd(){\r\n      this.isDragging = false\r\n    },\r\n    mouseoutMap(){\r\n      this.isDragging = false;\r\n      this.isRotating = false;\r\n    },\r\n    rotateStart(){\r\n      this.isRotating = true;\r\n    },\r\n    rotateEnd(){\r\n      this.isRotating = false;\r\n    },\r\n    unBindEvents() {\r\n      if(this.parentInstance){\r\n        const map = this.getMap();\r\n        map.off('click', this.clickMap);\r\n        map.off('rightclick', this.rightclickMap);\r\n        map.off('mousemove', this.mouseMoveMap);\r\n        map.off('dragstart', this.dragStart);\r\n        map.off('dragend', this.dragEnd);\r\n        map.off('rotatestart', this.rotateStart);\r\n        map.off('rotateend', this.rotateEnd);\r\n        map.off('mouseout', this.mouseoutMap)\r\n      }\r\n    },\r\n    destroyComponent() {\r\n      this.unBindEvents();\r\n      this.$amapComponent.destroy();\r\n    },\r\n    getMap() {\r\n      return this.$parentComponent;\r\n    }\r\n  }\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
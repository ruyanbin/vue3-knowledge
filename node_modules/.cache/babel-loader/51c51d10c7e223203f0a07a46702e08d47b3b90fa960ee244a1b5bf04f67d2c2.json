{"ast":null,"code":"import Sortable from \"sortablejs\";\nimport { insertNodeAt, camelize, console, removeNode } from \"./util/helper\";\nfunction buildAttribute(object, propName, value) {\n  if (value === undefined) {\n    return object;\n  }\n  object = object || {};\n  object[propName] = value;\n  return object;\n}\nfunction computeVmIndex(vnodes, element) {\n  return vnodes.map(elt => elt.elm).indexOf(element);\n}\nfunction computeIndexes(slots, children, isTransition, footerOffset) {\n  if (!slots) {\n    return [];\n  }\n  const elmFromNodes = slots.map(elt => elt.elm);\n  const footerIndex = children.length - footerOffset;\n  const rawIndexes = [...children].map((elt, idx) => idx >= footerIndex ? elmFromNodes.length : elmFromNodes.indexOf(elt));\n  return isTransition ? rawIndexes.filter(ind => ind !== -1) : rawIndexes;\n}\nfunction emit(evtName, evtData) {\n  this.$nextTick(() => this.$emit(evtName.toLowerCase(), evtData));\n}\nfunction delegateAndEmit(evtName) {\n  return evtData => {\n    if (this.realList !== null) {\n      this[\"onDrag\" + evtName](evtData);\n    }\n    emit.call(this, evtName, evtData);\n  };\n}\nfunction isTransitionName(name) {\n  return [\"transition-group\", \"TransitionGroup\"].includes(name);\n}\nfunction isTransition(slots) {\n  if (!slots || slots.length !== 1) {\n    return false;\n  }\n  const [{\n    componentOptions\n  }] = slots;\n  if (!componentOptions) {\n    return false;\n  }\n  return isTransitionName(componentOptions.tag);\n}\nfunction getSlot(slot, scopedSlot, key) {\n  return slot[key] || (scopedSlot[key] ? scopedSlot[key]() : undefined);\n}\nfunction computeChildrenAndOffsets(children, slot, scopedSlot) {\n  let headerOffset = 0;\n  let footerOffset = 0;\n  const header = getSlot(slot, scopedSlot, \"header\");\n  if (header) {\n    headerOffset = header.length;\n    children = children ? [...header, ...children] : [...header];\n  }\n  const footer = getSlot(slot, scopedSlot, \"footer\");\n  if (footer) {\n    footerOffset = footer.length;\n    children = children ? [...children, ...footer] : [...footer];\n  }\n  return {\n    children,\n    headerOffset,\n    footerOffset\n  };\n}\nfunction getComponentAttributes($attrs, componentData) {\n  let attributes = null;\n  const update = (name, value) => {\n    attributes = buildAttribute(attributes, name, value);\n  };\n  const attrs = Object.keys($attrs).filter(key => key === \"id\" || key.startsWith(\"data-\")).reduce((res, key) => {\n    res[key] = $attrs[key];\n    return res;\n  }, {});\n  update(\"attrs\", attrs);\n  if (!componentData) {\n    return attributes;\n  }\n  const {\n    on,\n    props,\n    attrs: componentDataAttrs\n  } = componentData;\n  update(\"on\", on);\n  update(\"props\", props);\n  Object.assign(attributes.attrs, componentDataAttrs);\n  return attributes;\n}\nconst eventsListened = [\"Start\", \"Add\", \"Remove\", \"Update\", \"End\"];\nconst eventsToEmit = [\"Choose\", \"Unchoose\", \"Sort\", \"Filter\", \"Clone\"];\nconst readonlyProperties = [\"Move\", ...eventsListened, ...eventsToEmit].map(evt => \"on\" + evt);\nvar draggingElement = null;\nconst props = {\n  options: Object,\n  list: {\n    type: Array,\n    required: false,\n    default: null\n  },\n  value: {\n    type: Array,\n    required: false,\n    default: null\n  },\n  noTransitionOnDrag: {\n    type: Boolean,\n    default: false\n  },\n  clone: {\n    type: Function,\n    default: original => {\n      return original;\n    }\n  },\n  element: {\n    type: String,\n    default: \"div\"\n  },\n  tag: {\n    type: String,\n    default: null\n  },\n  move: {\n    type: Function,\n    default: null\n  },\n  componentData: {\n    type: Object,\n    required: false,\n    default: null\n  }\n};\nconst draggableComponent = {\n  name: \"draggable\",\n  inheritAttrs: false,\n  props,\n  data() {\n    return {\n      transitionMode: false,\n      noneFunctionalComponentMode: false\n    };\n  },\n  render(h) {\n    const slots = this.$slots.default;\n    this.transitionMode = isTransition(slots);\n    const {\n      children,\n      headerOffset,\n      footerOffset\n    } = computeChildrenAndOffsets(slots, this.$slots, this.$scopedSlots);\n    this.headerOffset = headerOffset;\n    this.footerOffset = footerOffset;\n    const attributes = getComponentAttributes(this.$attrs, this.componentData);\n    return h(this.getTag(), attributes, children);\n  },\n  created() {\n    if (this.list !== null && this.value !== null) {\n      console.error(\"Value and list props are mutually exclusive! Please set one or another.\");\n    }\n    if (this.element !== \"div\") {\n      console.warn(\"Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props\");\n    }\n    if (this.options !== undefined) {\n      console.warn(\"Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props\");\n    }\n  },\n  mounted() {\n    this.noneFunctionalComponentMode = this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() && !this.getIsFunctional();\n    if (this.noneFunctionalComponentMode && this.transitionMode) {\n      throw new Error(`Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ${this.getTag()}`);\n    }\n    const optionsAdded = {};\n    eventsListened.forEach(elt => {\n      optionsAdded[\"on\" + elt] = delegateAndEmit.call(this, elt);\n    });\n    eventsToEmit.forEach(elt => {\n      optionsAdded[\"on\" + elt] = emit.bind(this, elt);\n    });\n    const attributes = Object.keys(this.$attrs).reduce((res, key) => {\n      res[camelize(key)] = this.$attrs[key];\n      return res;\n    }, {});\n    const options = Object.assign({}, this.options, attributes, optionsAdded, {\n      onMove: (evt, originalEvent) => {\n        return this.onDragMove(evt, originalEvent);\n      }\n    });\n    !(\"draggable\" in options) && (options.draggable = \">*\");\n    this._sortable = new Sortable(this.rootContainer, options);\n    this.computeIndexes();\n  },\n  beforeDestroy() {\n    if (this._sortable !== undefined) this._sortable.destroy();\n  },\n  computed: {\n    rootContainer() {\n      return this.transitionMode ? this.$el.children[0] : this.$el;\n    },\n    realList() {\n      return this.list ? this.list : this.value;\n    }\n  },\n  watch: {\n    options: {\n      handler(newOptionValue) {\n        this.updateOptions(newOptionValue);\n      },\n      deep: true\n    },\n    $attrs: {\n      handler(newOptionValue) {\n        this.updateOptions(newOptionValue);\n      },\n      deep: true\n    },\n    realList() {\n      this.computeIndexes();\n    }\n  },\n  methods: {\n    getIsFunctional() {\n      const {\n        fnOptions\n      } = this._vnode;\n      return fnOptions && fnOptions.functional;\n    },\n    getTag() {\n      return this.tag || this.element;\n    },\n    updateOptions(newOptionValue) {\n      for (var property in newOptionValue) {\n        const value = camelize(property);\n        if (readonlyProperties.indexOf(value) === -1) {\n          this._sortable.option(value, newOptionValue[property]);\n        }\n      }\n    },\n    getChildrenNodes() {\n      if (this.noneFunctionalComponentMode) {\n        return this.$children[0].$slots.default;\n      }\n      const rawNodes = this.$slots.default;\n      return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;\n    },\n    computeIndexes() {\n      this.$nextTick(() => {\n        this.visibleIndexes = computeIndexes(this.getChildrenNodes(), this.rootContainer.children, this.transitionMode, this.footerOffset);\n      });\n    },\n    getUnderlyingVm(htmlElt) {\n      const index = computeVmIndex(this.getChildrenNodes() || [], htmlElt);\n      if (index === -1) {\n        //Edge case during move callback: related element might be\n        //an element different from collection\n        return null;\n      }\n      const element = this.realList[index];\n      return {\n        index,\n        element\n      };\n    },\n    getUnderlyingPotencialDraggableComponent({\n      __vue__: vue\n    }) {\n      if (!vue || !vue.$options || !isTransitionName(vue.$options._componentTag)) {\n        if (!(\"realList\" in vue) && vue.$children.length === 1 && \"realList\" in vue.$children[0]) return vue.$children[0];\n        return vue;\n      }\n      return vue.$parent;\n    },\n    emitChanges(evt) {\n      this.$nextTick(() => {\n        this.$emit(\"change\", evt);\n      });\n    },\n    alterList(onList) {\n      if (this.list) {\n        onList(this.list);\n        return;\n      }\n      const newList = [...this.value];\n      onList(newList);\n      this.$emit(\"input\", newList);\n    },\n    spliceList() {\n      const spliceList = list => list.splice(...arguments);\n      this.alterList(spliceList);\n    },\n    updatePosition(oldIndex, newIndex) {\n      const updatePosition = list => list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);\n      this.alterList(updatePosition);\n    },\n    getRelatedContextFromMoveEvent({\n      to,\n      related\n    }) {\n      const component = this.getUnderlyingPotencialDraggableComponent(to);\n      if (!component) {\n        return {\n          component\n        };\n      }\n      const list = component.realList;\n      const context = {\n        list,\n        component\n      };\n      if (to !== related && list && component.getUnderlyingVm) {\n        const destination = component.getUnderlyingVm(related);\n        if (destination) {\n          return Object.assign(destination, context);\n        }\n      }\n      return context;\n    },\n    getVmIndex(domIndex) {\n      const indexes = this.visibleIndexes;\n      const numberIndexes = indexes.length;\n      return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];\n    },\n    getComponent() {\n      return this.$slots.default[0].componentInstance;\n    },\n    resetTransitionData(index) {\n      if (!this.noTransitionOnDrag || !this.transitionMode) {\n        return;\n      }\n      var nodes = this.getChildrenNodes();\n      nodes[index].data = null;\n      const transitionContainer = this.getComponent();\n      transitionContainer.children = [];\n      transitionContainer.kept = undefined;\n    },\n    onDragStart(evt) {\n      this.context = this.getUnderlyingVm(evt.item);\n      evt.item._underlying_vm_ = this.clone(this.context.element);\n      draggingElement = evt.item;\n    },\n    onDragAdd(evt) {\n      const element = evt.item._underlying_vm_;\n      if (element === undefined) {\n        return;\n      }\n      removeNode(evt.item);\n      const newIndex = this.getVmIndex(evt.newIndex);\n      this.spliceList(newIndex, 0, element);\n      this.computeIndexes();\n      const added = {\n        element,\n        newIndex\n      };\n      this.emitChanges({\n        added\n      });\n    },\n    onDragRemove(evt) {\n      insertNodeAt(this.rootContainer, evt.item, evt.oldIndex);\n      if (evt.pullMode === \"clone\") {\n        removeNode(evt.clone);\n        return;\n      }\n      const oldIndex = this.context.index;\n      this.spliceList(oldIndex, 1);\n      const removed = {\n        element: this.context.element,\n        oldIndex\n      };\n      this.resetTransitionData(oldIndex);\n      this.emitChanges({\n        removed\n      });\n    },\n    onDragUpdate(evt) {\n      removeNode(evt.item);\n      insertNodeAt(evt.from, evt.item, evt.oldIndex);\n      const oldIndex = this.context.index;\n      const newIndex = this.getVmIndex(evt.newIndex);\n      this.updatePosition(oldIndex, newIndex);\n      const moved = {\n        element: this.context.element,\n        oldIndex,\n        newIndex\n      };\n      this.emitChanges({\n        moved\n      });\n    },\n    updateProperty(evt, propertyName) {\n      evt.hasOwnProperty(propertyName) && (evt[propertyName] += this.headerOffset);\n    },\n    computeFutureIndex(relatedContext, evt) {\n      if (!relatedContext.element) {\n        return 0;\n      }\n      const domChildren = [...evt.to.children].filter(el => el.style[\"display\"] !== \"none\");\n      const currentDOMIndex = domChildren.indexOf(evt.related);\n      const currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);\n      const draggedInList = domChildren.indexOf(draggingElement) !== -1;\n      return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;\n    },\n    onDragMove(evt, originalEvent) {\n      const onMove = this.move;\n      if (!onMove || !this.realList) {\n        return true;\n      }\n      const relatedContext = this.getRelatedContextFromMoveEvent(evt);\n      const draggedContext = this.context;\n      const futureIndex = this.computeFutureIndex(relatedContext, evt);\n      Object.assign(draggedContext, {\n        futureIndex\n      });\n      const sendEvt = Object.assign({}, evt, {\n        relatedContext,\n        draggedContext\n      });\n      return onMove(sendEvt, originalEvent);\n    },\n    onDragEnd() {\n      this.computeIndexes();\n      draggingElement = null;\n    }\n  }\n};\nif (typeof window !== \"undefined\" && \"Vue\" in window) {\n  window.Vue.component(\"draggable\", draggableComponent);\n}\nexport default draggableComponent;","map":{"version":3,"names":["Sortable","insertNodeAt","camelize","console","removeNode","buildAttribute","object","propName","value","undefined","computeVmIndex","vnodes","element","map","elt","elm","indexOf","computeIndexes","slots","children","isTransition","footerOffset","elmFromNodes","footerIndex","length","rawIndexes","idx","filter","ind","emit","evtName","evtData","$nextTick","$emit","toLowerCase","delegateAndEmit","realList","call","isTransitionName","name","includes","componentOptions","tag","getSlot","slot","scopedSlot","key","computeChildrenAndOffsets","headerOffset","header","footer","getComponentAttributes","$attrs","componentData","attributes","update","attrs","Object","keys","startsWith","reduce","res","on","props","componentDataAttrs","assign","eventsListened","eventsToEmit","readonlyProperties","evt","draggingElement","options","list","type","Array","required","default","noTransitionOnDrag","Boolean","clone","Function","original","String","move","draggableComponent","inheritAttrs","data","transitionMode","noneFunctionalComponentMode","render","h","$slots","$scopedSlots","getTag","created","error","warn","mounted","$el","nodeName","getIsFunctional","Error","optionsAdded","forEach","bind","onMove","originalEvent","onDragMove","draggable","_sortable","rootContainer","beforeDestroy","destroy","computed","watch","handler","newOptionValue","updateOptions","deep","methods","fnOptions","_vnode","functional","property","option","getChildrenNodes","$children","rawNodes","child","visibleIndexes","getUnderlyingVm","htmlElt","index","getUnderlyingPotencialDraggableComponent","__vue__","vue","$options","_componentTag","$parent","emitChanges","alterList","onList","newList","spliceList","splice","arguments","updatePosition","oldIndex","newIndex","getRelatedContextFromMoveEvent","to","related","component","context","destination","getVmIndex","domIndex","indexes","numberIndexes","getComponent","componentInstance","resetTransitionData","nodes","transitionContainer","kept","onDragStart","item","_underlying_vm_","onDragAdd","added","onDragRemove","pullMode","removed","onDragUpdate","from","moved","updateProperty","propertyName","hasOwnProperty","computeFutureIndex","relatedContext","domChildren","el","style","currentDOMIndex","currentIndex","draggedInList","willInsertAfter","draggedContext","futureIndex","sendEvt","onDragEnd","window","Vue"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/vuedraggable/src/vuedraggable.js"],"sourcesContent":["import Sortable from \"sortablejs\";\r\nimport { insertNodeAt, camelize, console, removeNode } from \"./util/helper\";\r\n\r\nfunction buildAttribute(object, propName, value) {\r\n  if (value === undefined) {\r\n    return object;\r\n  }\r\n  object = object || {};\r\n  object[propName] = value;\r\n  return object;\r\n}\r\n\r\nfunction computeVmIndex(vnodes, element) {\r\n  return vnodes.map(elt => elt.elm).indexOf(element);\r\n}\r\n\r\nfunction computeIndexes(slots, children, isTransition, footerOffset) {\r\n  if (!slots) {\r\n    return [];\r\n  }\r\n\r\n  const elmFromNodes = slots.map(elt => elt.elm);\r\n  const footerIndex = children.length - footerOffset;\r\n  const rawIndexes = [...children].map((elt, idx) =>\r\n    idx >= footerIndex ? elmFromNodes.length : elmFromNodes.indexOf(elt)\r\n  );\r\n  return isTransition ? rawIndexes.filter(ind => ind !== -1) : rawIndexes;\r\n}\r\n\r\nfunction emit(evtName, evtData) {\r\n  this.$nextTick(() => this.$emit(evtName.toLowerCase(), evtData));\r\n}\r\n\r\nfunction delegateAndEmit(evtName) {\r\n  return evtData => {\r\n    if (this.realList !== null) {\r\n      this[\"onDrag\" + evtName](evtData);\r\n    }\r\n    emit.call(this, evtName, evtData);\r\n  };\r\n}\r\n\r\nfunction isTransitionName(name) {\r\n  return [\"transition-group\", \"TransitionGroup\"].includes(name);\r\n}\r\n\r\nfunction isTransition(slots) {\r\n  if (!slots || slots.length !== 1) {\r\n    return false;\r\n  }\r\n  const [{ componentOptions }] = slots;\r\n  if (!componentOptions) {\r\n    return false;\r\n  }\r\n  return isTransitionName(componentOptions.tag);\r\n}\r\n\r\nfunction getSlot(slot, scopedSlot, key) {\r\n  return slot[key] || (scopedSlot[key] ? scopedSlot[key]() : undefined);\r\n}\r\n\r\nfunction computeChildrenAndOffsets(children, slot, scopedSlot) {\r\n  let headerOffset = 0;\r\n  let footerOffset = 0;\r\n  const header = getSlot(slot, scopedSlot, \"header\");\r\n  if (header) {\r\n    headerOffset = header.length;\r\n    children = children ? [...header, ...children] : [...header];\r\n  }\r\n  const footer = getSlot(slot, scopedSlot, \"footer\");\r\n  if (footer) {\r\n    footerOffset = footer.length;\r\n    children = children ? [...children, ...footer] : [...footer];\r\n  }\r\n  return { children, headerOffset, footerOffset };\r\n}\r\n\r\nfunction getComponentAttributes($attrs, componentData) {\r\n  let attributes = null;\r\n  const update = (name, value) => {\r\n    attributes = buildAttribute(attributes, name, value);\r\n  };\r\n  const attrs = Object.keys($attrs)\r\n    .filter(key => key === \"id\" || key.startsWith(\"data-\"))\r\n    .reduce((res, key) => {\r\n      res[key] = $attrs[key];\r\n      return res;\r\n    }, {});\r\n  update(\"attrs\", attrs);\r\n\r\n  if (!componentData) {\r\n    return attributes;\r\n  }\r\n  const { on, props, attrs: componentDataAttrs } = componentData;\r\n  update(\"on\", on);\r\n  update(\"props\", props);\r\n  Object.assign(attributes.attrs, componentDataAttrs);\r\n  return attributes;\r\n}\r\n\r\nconst eventsListened = [\"Start\", \"Add\", \"Remove\", \"Update\", \"End\"];\r\nconst eventsToEmit = [\"Choose\", \"Unchoose\", \"Sort\", \"Filter\", \"Clone\"];\r\nconst readonlyProperties = [\"Move\", ...eventsListened, ...eventsToEmit].map(\r\n  evt => \"on\" + evt\r\n);\r\nvar draggingElement = null;\r\n\r\nconst props = {\r\n  options: Object,\r\n  list: {\r\n    type: Array,\r\n    required: false,\r\n    default: null\r\n  },\r\n  value: {\r\n    type: Array,\r\n    required: false,\r\n    default: null\r\n  },\r\n  noTransitionOnDrag: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  clone: {\r\n    type: Function,\r\n    default: original => {\r\n      return original;\r\n    }\r\n  },\r\n  element: {\r\n    type: String,\r\n    default: \"div\"\r\n  },\r\n  tag: {\r\n    type: String,\r\n    default: null\r\n  },\r\n  move: {\r\n    type: Function,\r\n    default: null\r\n  },\r\n  componentData: {\r\n    type: Object,\r\n    required: false,\r\n    default: null\r\n  }\r\n};\r\n\r\nconst draggableComponent = {\r\n  name: \"draggable\",\r\n\r\n  inheritAttrs: false,\r\n\r\n  props,\r\n\r\n  data() {\r\n    return {\r\n      transitionMode: false,\r\n      noneFunctionalComponentMode: false\r\n    };\r\n  },\r\n\r\n  render(h) {\r\n    const slots = this.$slots.default;\r\n    this.transitionMode = isTransition(slots);\r\n    const { children, headerOffset, footerOffset } = computeChildrenAndOffsets(\r\n      slots,\r\n      this.$slots,\r\n      this.$scopedSlots\r\n    );\r\n    this.headerOffset = headerOffset;\r\n    this.footerOffset = footerOffset;\r\n    const attributes = getComponentAttributes(this.$attrs, this.componentData);\r\n    return h(this.getTag(), attributes, children);\r\n  },\r\n\r\n  created() {\r\n    if (this.list !== null && this.value !== null) {\r\n      console.error(\r\n        \"Value and list props are mutually exclusive! Please set one or another.\"\r\n      );\r\n    }\r\n\r\n    if (this.element !== \"div\") {\r\n      console.warn(\r\n        \"Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props\"\r\n      );\r\n    }\r\n\r\n    if (this.options !== undefined) {\r\n      console.warn(\r\n        \"Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props\"\r\n      );\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.noneFunctionalComponentMode =\r\n      this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() &&\r\n      !this.getIsFunctional();\r\n    if (this.noneFunctionalComponentMode && this.transitionMode) {\r\n      throw new Error(\r\n        `Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ${this.getTag()}`\r\n      );\r\n    }\r\n    const optionsAdded = {};\r\n    eventsListened.forEach(elt => {\r\n      optionsAdded[\"on\" + elt] = delegateAndEmit.call(this, elt);\r\n    });\r\n\r\n    eventsToEmit.forEach(elt => {\r\n      optionsAdded[\"on\" + elt] = emit.bind(this, elt);\r\n    });\r\n\r\n    const attributes = Object.keys(this.$attrs).reduce((res, key) => {\r\n      res[camelize(key)] = this.$attrs[key];\r\n      return res;\r\n    }, {});\r\n\r\n    const options = Object.assign({}, this.options, attributes, optionsAdded, {\r\n      onMove: (evt, originalEvent) => {\r\n        return this.onDragMove(evt, originalEvent);\r\n      }\r\n    });\r\n    !(\"draggable\" in options) && (options.draggable = \">*\");\r\n    this._sortable = new Sortable(this.rootContainer, options);\r\n    this.computeIndexes();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this._sortable !== undefined) this._sortable.destroy();\r\n  },\r\n\r\n  computed: {\r\n    rootContainer() {\r\n      return this.transitionMode ? this.$el.children[0] : this.$el;\r\n    },\r\n\r\n    realList() {\r\n      return this.list ? this.list : this.value;\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    options: {\r\n      handler(newOptionValue) {\r\n        this.updateOptions(newOptionValue);\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    $attrs: {\r\n      handler(newOptionValue) {\r\n        this.updateOptions(newOptionValue);\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    realList() {\r\n      this.computeIndexes();\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    getIsFunctional() {\r\n      const { fnOptions } = this._vnode;\r\n      return fnOptions && fnOptions.functional;\r\n    },\r\n\r\n    getTag() {\r\n      return this.tag || this.element;\r\n    },\r\n\r\n    updateOptions(newOptionValue) {\r\n      for (var property in newOptionValue) {\r\n        const value = camelize(property);\r\n        if (readonlyProperties.indexOf(value) === -1) {\r\n          this._sortable.option(value, newOptionValue[property]);\r\n        }\r\n      }\r\n    },\r\n\r\n    getChildrenNodes() {\r\n      if (this.noneFunctionalComponentMode) {\r\n        return this.$children[0].$slots.default;\r\n      }\r\n      const rawNodes = this.$slots.default;\r\n      return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;\r\n    },\r\n\r\n    computeIndexes() {\r\n      this.$nextTick(() => {\r\n        this.visibleIndexes = computeIndexes(\r\n          this.getChildrenNodes(),\r\n          this.rootContainer.children,\r\n          this.transitionMode,\r\n          this.footerOffset\r\n        );\r\n      });\r\n    },\r\n\r\n    getUnderlyingVm(htmlElt) {\r\n      const index = computeVmIndex(this.getChildrenNodes() || [], htmlElt);\r\n      if (index === -1) {\r\n        //Edge case during move callback: related element might be\r\n        //an element different from collection\r\n        return null;\r\n      }\r\n      const element = this.realList[index];\r\n      return { index, element };\r\n    },\r\n\r\n    getUnderlyingPotencialDraggableComponent({ __vue__: vue }) {\r\n      if (\r\n        !vue ||\r\n        !vue.$options ||\r\n        !isTransitionName(vue.$options._componentTag)\r\n      ) {\r\n        if (\r\n          !(\"realList\" in vue) &&\r\n          vue.$children.length === 1 &&\r\n          \"realList\" in vue.$children[0]\r\n        )\r\n          return vue.$children[0];\r\n\r\n        return vue;\r\n      }\r\n      return vue.$parent;\r\n    },\r\n\r\n    emitChanges(evt) {\r\n      this.$nextTick(() => {\r\n        this.$emit(\"change\", evt);\r\n      });\r\n    },\r\n\r\n    alterList(onList) {\r\n      if (this.list) {\r\n        onList(this.list);\r\n        return;\r\n      }\r\n      const newList = [...this.value];\r\n      onList(newList);\r\n      this.$emit(\"input\", newList);\r\n    },\r\n\r\n    spliceList() {\r\n      const spliceList = list => list.splice(...arguments);\r\n      this.alterList(spliceList);\r\n    },\r\n\r\n    updatePosition(oldIndex, newIndex) {\r\n      const updatePosition = list =>\r\n        list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);\r\n      this.alterList(updatePosition);\r\n    },\r\n\r\n    getRelatedContextFromMoveEvent({ to, related }) {\r\n      const component = this.getUnderlyingPotencialDraggableComponent(to);\r\n      if (!component) {\r\n        return { component };\r\n      }\r\n      const list = component.realList;\r\n      const context = { list, component };\r\n      if (to !== related && list && component.getUnderlyingVm) {\r\n        const destination = component.getUnderlyingVm(related);\r\n        if (destination) {\r\n          return Object.assign(destination, context);\r\n        }\r\n      }\r\n      return context;\r\n    },\r\n\r\n    getVmIndex(domIndex) {\r\n      const indexes = this.visibleIndexes;\r\n      const numberIndexes = indexes.length;\r\n      return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];\r\n    },\r\n\r\n    getComponent() {\r\n      return this.$slots.default[0].componentInstance;\r\n    },\r\n\r\n    resetTransitionData(index) {\r\n      if (!this.noTransitionOnDrag || !this.transitionMode) {\r\n        return;\r\n      }\r\n      var nodes = this.getChildrenNodes();\r\n      nodes[index].data = null;\r\n      const transitionContainer = this.getComponent();\r\n      transitionContainer.children = [];\r\n      transitionContainer.kept = undefined;\r\n    },\r\n\r\n    onDragStart(evt) {\r\n      this.context = this.getUnderlyingVm(evt.item);\r\n      evt.item._underlying_vm_ = this.clone(this.context.element);\r\n      draggingElement = evt.item;\r\n    },\r\n\r\n    onDragAdd(evt) {\r\n      const element = evt.item._underlying_vm_;\r\n      if (element === undefined) {\r\n        return;\r\n      }\r\n      removeNode(evt.item);\r\n      const newIndex = this.getVmIndex(evt.newIndex);\r\n      this.spliceList(newIndex, 0, element);\r\n      this.computeIndexes();\r\n      const added = { element, newIndex };\r\n      this.emitChanges({ added });\r\n    },\r\n\r\n    onDragRemove(evt) {\r\n      insertNodeAt(this.rootContainer, evt.item, evt.oldIndex);\r\n      if (evt.pullMode === \"clone\") {\r\n        removeNode(evt.clone);\r\n        return;\r\n      }\r\n      const oldIndex = this.context.index;\r\n      this.spliceList(oldIndex, 1);\r\n      const removed = { element: this.context.element, oldIndex };\r\n      this.resetTransitionData(oldIndex);\r\n      this.emitChanges({ removed });\r\n    },\r\n\r\n    onDragUpdate(evt) {\r\n      removeNode(evt.item);\r\n      insertNodeAt(evt.from, evt.item, evt.oldIndex);\r\n      const oldIndex = this.context.index;\r\n      const newIndex = this.getVmIndex(evt.newIndex);\r\n      this.updatePosition(oldIndex, newIndex);\r\n      const moved = { element: this.context.element, oldIndex, newIndex };\r\n      this.emitChanges({ moved });\r\n    },\r\n\r\n    updateProperty(evt, propertyName) {\r\n      evt.hasOwnProperty(propertyName) &&\r\n        (evt[propertyName] += this.headerOffset);\r\n    },\r\n\r\n    computeFutureIndex(relatedContext, evt) {\r\n      if (!relatedContext.element) {\r\n        return 0;\r\n      }\r\n      const domChildren = [...evt.to.children].filter(\r\n        el => el.style[\"display\"] !== \"none\"\r\n      );\r\n      const currentDOMIndex = domChildren.indexOf(evt.related);\r\n      const currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);\r\n      const draggedInList = domChildren.indexOf(draggingElement) !== -1;\r\n      return draggedInList || !evt.willInsertAfter\r\n        ? currentIndex\r\n        : currentIndex + 1;\r\n    },\r\n\r\n    onDragMove(evt, originalEvent) {\r\n      const onMove = this.move;\r\n      if (!onMove || !this.realList) {\r\n        return true;\r\n      }\r\n\r\n      const relatedContext = this.getRelatedContextFromMoveEvent(evt);\r\n      const draggedContext = this.context;\r\n      const futureIndex = this.computeFutureIndex(relatedContext, evt);\r\n      Object.assign(draggedContext, { futureIndex });\r\n      const sendEvt = Object.assign({}, evt, {\r\n        relatedContext,\r\n        draggedContext\r\n      });\r\n      return onMove(sendEvt, originalEvent);\r\n    },\r\n\r\n    onDragEnd() {\r\n      this.computeIndexes();\r\n      draggingElement = null;\r\n    }\r\n  }\r\n};\r\n\r\nif (typeof window !== \"undefined\" && \"Vue\" in window) {\r\n  window.Vue.component(\"draggable\", draggableComponent);\r\n}\r\n\r\nexport default draggableComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"align\", \"innerHTML\"];\nconst _hoisted_2 = [\"align\", \"innerHTML\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-scroll-board\",\n    ref: $data.ref\n  }, [$data.header.length && $data.mergedConfig ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"header\",\n    style: _normalizeStyle(`background-color: ${$data.mergedConfig.headerBGC};`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.header, (headerItem, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"header-item\",\n      key: headerItem + i,\n      style: _normalizeStyle(`\n          height: ${$data.mergedConfig.headerHeight}px;\n          line-height: ${$data.mergedConfig.headerHeight}px;\n          width: ${$data.widths[i]}px;\n        `),\n      align: $data.aligns[i],\n      innerHTML: headerItem\n    }, null, 12 /* STYLE, PROPS */, _hoisted_1);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true), $data.mergedConfig ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"rows\",\n    style: _normalizeStyle(`height: ${_ctx.height - ($data.header.length ? $data.mergedConfig.headerHeight : 0)}px;`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rows, (row, ri) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"row-item\",\n      key: row.toString() + row.scroll,\n      style: _normalizeStyle(`\n          height: ${$data.heights[ri]}px;\n          line-height: ${$data.heights[ri]}px;\n          background-color: ${$data.mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `)\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row.ceils, (ceil, ci) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: \"ceil\",\n        key: ceil + ri + ci,\n        style: _normalizeStyle(`width: ${$data.widths[ci]}px;`),\n        align: $data.aligns[ci],\n        innerHTML: ceil,\n        onClick: $event => $options.emitEvent(ri, ci, row, ceil)\n      }, null, 12 /* STYLE, PROPS */, _hoisted_2);\n    }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;uBACEA,oBA2CM;IA3CDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;MACPA,YAAM,CAACC,MAAM,IAAID,kBAAY,kBAAvDH,oBAaM;;IAbDC,KAAK,EAAC,QAAQ;IAAuCI,KAAK,uCAAuBF,kBAAY,CAACG,SAAS;yBAC1GN,oBAWEO,6BAT0BJ,YAAM,GAAxBK,UAAU,EAAEC,CAAC;yBAFvBT,oBAWE;MAVAC,KAAK,EAAC,aAAa;MAElBS,GAAG,EAAEF,UAAU,GAAGC,CAAC;MACnBJ,KAAK;oBAAwBF,kBAAY,CAACQ,YAAY;yBAA8BR,kBAAY,CAACQ,YAAY;mBAAwBR,YAAM,CAACM,CAAC;;MAK7IG,KAAK,EAAET,YAAM,CAACM,CAAC;MAChBI,SAAmB,EAAXL;;wFAKJL,kBAAY,kBADpBH,oBA0BM;;IAxBJC,KAAK,EAAC,MAAM;IACXI,KAAK,6BAAaS,WAAM,IAAIX,YAAM,CAACC,MAAM,GAAGD,kBAAY,CAACQ,YAAY;yBAEtEX,oBAoBMO,6BAlBgBJ,UAAI,GAAhBY,GAAG,EAAEC,EAAE;yBAFjBhB,oBAoBM;MAnBJC,KAAK,EAAC,UAAU;MAEfS,GAAG,EAAEK,GAAG,CAACE,QAAQ,KAAKF,GAAG,CAACG,MAAM;MAChCb,KAAK;oBAAwBF,aAAO,CAACa,EAAE;yBAA+Bb,aAAO,CAACa,EAAE;8BAAoCb,kBAAY,CAACY,GAAG,CAACI,QAAQ;;2BAM9InB,oBAQEO,6BANqBQ,GAAG,CAACK,KAAK,GAAtBC,IAAI,EAAEC,EAAE;2BAFlBtB,oBAQE;QAPAC,KAAK,EAAC,MAAM;QAEXS,GAAG,EAAEW,IAAI,GAAGL,EAAE,GAAGM,EAAE;QACnBjB,KAAK,4BAAYF,YAAM,CAACmB,EAAE;QAC1BV,KAAK,EAAET,YAAM,CAACmB,EAAE;QACjBT,SAAa,EAALQ,IAAI;QACXE,OAAK,YAAEC,kBAAS,CAACR,EAAE,EAAEM,EAAE,EAAEP,GAAG,EAAEM,IAAI","names":["_createElementBlock","class","ref","$data","length","style","headerBGC","_Fragment","headerItem","i","key","headerHeight","align","innerHTML","_ctx","row","ri","toString","scroll","rowIndex","ceils","ceil","ci","onClick","$options"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"headerItem + i\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"row.toString() + row.scroll\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"ceil + ri + ci\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent(ri, ci, row, ceil)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single'\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit('click', {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
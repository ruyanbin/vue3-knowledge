{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"stroke\", \"stroke-width\", \"d\"];\nconst _hoisted_4 = [\"id\"];\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"stop\", {\n  offset: \"0%\",\n  \"stop-color\": \"transparent\",\n  \"stop-opacity\": \"1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_6 = [\"stop-color\"];\nconst _hoisted_7 = [\"r\", \"cx\", \"cy\", \"stroke\", \"stroke-width\"];\nconst _hoisted_8 = [\"cx\", \"cy\", \"fill\"];\nconst _hoisted_9 = [\"values\", \"dur\"];\nconst _hoisted_10 = [\"dur\"];\nconst _hoisted_11 = [\"cx\", \"cy\", \"fill\"];\nconst _hoisted_12 = {\n  key: 0\n};\nconst _hoisted_13 = [\"points\", \"stroke\", \"stroke-width\"];\nconst _hoisted_14 = [\"d\", \"stroke\"];\nconst _hoisted_15 = [\"xlink:href\"];\nconst _hoisted_16 = [\"values\", \"dur\"];\nconst _hoisted_17 = {\n  class: \"decoration-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-12\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: _ctx.width,\n    height: _ctx.height\n  }, [_createElementVNode(\"defs\", null, [_createElementVNode(\"g\", {\n    id: $data.gId\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pathD, (d, i) => {\n    return _openBlock(), _createElementBlock(\"path\", {\n      stroke: $data.pathColor[i],\n      \"stroke-width\": _ctx.width / 2,\n      fill: \"transparent\",\n      key: d,\n      d: d\n    }, null, 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_2), _createElementVNode(\"radialGradient\", {\n    id: $data.gradientId,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"50%\"\n  }, [_hoisted_5, _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": $options.fade($data.mergedColor[1] || $data.defaultColor[1], 30),\n    \"stop-opacity\": \"1\"\n  }, null, 8 /* PROPS */, _hoisted_6)], 8 /* PROPS */, _hoisted_4)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.circleR, r => {\n    return _openBlock(), _createElementBlock(\"circle\", {\n      key: r,\n      r: r,\n      cx: $options.x,\n      cy: $options.y,\n      stroke: $data.mergedColor[1],\n      \"stroke-width\": 0.5,\n      fill: \"transparent\"\n    }, null, 8 /* PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"circle\", {\n    r: \"1\",\n    cx: $options.x,\n    cy: $options.y,\n    stroke: \"transparent\",\n    fill: `url(#${$data.gradientId})`\n  }, [_createElementVNode(\"animate\", {\n    attributeName: \"r\",\n    values: `1;${_ctx.width / 2}`,\n    dur: `${$props.haloDur}s`,\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_9), _createElementVNode(\"animate\", {\n    attributeName: \"opacity\",\n    values: \"1;0\",\n    dur: `${$props.haloDur}s`,\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_10)], 8 /* PROPS */, _hoisted_8), _createElementVNode(\"circle\", {\n    r: \"2\",\n    cx: $options.x,\n    cy: $options.y,\n    fill: $data.mergedColor[1]\n  }, null, 8 /* PROPS */, _hoisted_11), $data.showSplitLine ? (_openBlock(), _createElementBlock(\"g\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.splitLinePoints, p => {\n    return _openBlock(), _createElementBlock(\"polyline\", {\n      key: p,\n      points: p,\n      stroke: $data.mergedColor[1],\n      \"stroke-width\": 0.5,\n      opacity: \"0.5\"\n    }, null, 8 /* PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.arcD, d => {\n    return _openBlock(), _createElementBlock(\"path\", {\n      key: d,\n      d: d,\n      stroke: $data.mergedColor[1],\n      \"stroke-width\": \"2\",\n      fill: \"transparent\"\n    }, null, 8 /* PROPS */, _hoisted_14);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"use\", {\n    \"xlink:href\": `#${$data.gId}`\n  }, [_createElementVNode(\"animateTransform\", {\n    attributeName: \"transform\",\n    type: \"rotate\",\n    values: `0, ${$options.x} ${$options.y};360, ${$options.x} ${$options.y}`,\n    dur: `${$props.scanDur}s`,\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_16)], 8 /* PROPS */, _hoisted_15)], 8 /* PROPS */, _hoisted_1)), _createElementVNode(\"div\", _hoisted_17, [_renderSlot(_ctx.$slots, \"default\")])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;gCAmBUA,oBAA8D;EAAxDC,MAAM,EAAC,IAAI;EAAC,YAAU,EAAC,aAAa;EAAC,cAAY,EAAC;;;;;;;;;;;;;;;;EA2EzDC,KAAK,EAAC;AAAoB;;uBA7FjCC,oBAgGM;IAhGDD,KAAK,EAAC,kBAAkB;IAAEE,GAAG,EAAEC;qBAClCF,oBA0FM;IA1FAG,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED;MAC3BP,oBAmBO,eAlBLA,oBASI;IATAS,EAAE,EAAEJ;EAAG,uBACTF,oBAOEO,6BAHiBL,WAAK,GAAdM,CAAC,EAAEC,CAAC;yBAJdT,oBAOE;MANCU,MAAM,EAAER,eAAS,CAACO,CAAC;MACnB,cAAY,EAAEL,UAAK;MACpBO,IAAI,EAAC,aAAa;MAEjBC,GAAG,EAAEJ,CAAC;MACNA,CAAC,EAAEA;;+DAIRX,oBAMiB;IALdS,EAAE,EAAEJ,gBAAU;IACfW,EAAE,EAAC,KAAK;IAACC,EAAE,EAAC,KAAK;IAACC,CAAC,EAAC;MAEpBC,UAA8D,EAC9DnB,oBAAiG;IAA3FC,MAAM,EAAC,MAAM;IAAE,YAAU,EAAEmB,aAAI,CAACf,iBAAW,OAAOA,kBAAY;IAAU,cAAY,EAAC;yFAI/FF,oBASEO,6BARYL,aAAO,EAAZa,CAAC;yBADVf,oBASE;MAPCY,GAAG,EAAEG,CAAC;MACNA,CAAC,EAAEA,CAAC;MACJF,EAAE,EAAEI,UAAC;MACLH,EAAE,EAAEG,UAAC;MACLP,MAAM,EAAER,iBAAW;MACnB,cAAY,EAAE,GAAG;MAClBS,IAAI,EAAC;;kCAGPd,oBAmBS;IAlBPkB,CAAC,EAAC,GAAG;IACJF,EAAE,EAAEI,UAAC;IACLH,EAAE,EAAEG,UAAC;IACNP,MAAM,EAAC,aAAa;IACnBC,IAAI,UAAUT,gBAAU;MAEzBL,oBAKE;IAJAqB,aAAa,EAAC,GAAG;IAChBC,MAAM,OAAOf,UAAK;IAClBgB,GAAG,KAAKC,cAAO;IAChBC,WAAW,EAAC;uCAEdzB,oBAKE;IAJAqB,aAAa,EAAC,SAAS;IACvBC,MAAM,EAAC,KAAK;IACXC,GAAG,KAAKC,cAAO;IAChBC,WAAW,EAAC;qEAIhBzB,oBAKE;IAJAkB,CAAC,EAAC,GAAG;IACJF,EAAE,EAAEI,UAAC;IACLH,EAAE,EAAEG,UAAC;IACLN,IAAI,EAAET,iBAAW;wCAGXA,mBAAa,kBAAtBF,oBASI,sCARFA,oBAOEO,6BANYL,qBAAe,EAApBqB,CAAC;yBADVvB,oBAOE;MALCY,GAAG,EAAEW,CAAC;MACNC,MAAM,EAAED,CAAC;MACTb,MAAM,EAAER,iBAAW;MACnB,cAAY,EAAE,GAAG;MAClBuB,OAAO,EAAC;;4FAIZzB,oBAOEO,6BANYL,UAAI,EAATM,CAAC;yBADVR,oBAOE;MALCY,GAAG,EAAEJ,CAAC;MACNA,CAAC,EAAEA,CAAC;MACJE,MAAM,EAAER,iBAAW;MACpB,cAAY,EAAC,GAAG;MAChBS,IAAI,EAAC;;kCAGPd,oBAQM;IARA,YAAU,MAAMK,SAAG;MACvBL,oBAME;IALAqB,aAAa,EAAC,WAAW;IACzBQ,IAAI,EAAC,QAAQ;IACZP,MAAM,QAAQF,UAAC,IAAIA,UAAC,SAASA,UAAC,IAAIA,UAAC;IACnCG,GAAG,KAAKC,cAAO;IAChBC,WAAW,EAAC;oGAKlBzB,oBAEM,OAFN8B,WAEM,GADJC,YAAaxB","names":["_createElementVNode","offset","class","_createElementBlock","ref","$data","width","_ctx","height","id","_Fragment","d","i","stroke","fill","key","cx","cy","r","_hoisted_5","$options","attributeName","values","dur","$props","repeatCount","p","points","opacity","type","_hoisted_17","_renderSlot"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration12/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <defs>\n        <g :id=\"gId\">\n          <path\n            :stroke=\"pathColor[i]\"\n            :stroke-width=\"width / 2\"\n            fill=\"transparent\"\n            v-for=\"(d, i) in pathD\"\n            :key=\"d\"\n            :d=\"d\"\n          />\n        </g>\n\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\n        </radialGradient>\n      </defs>\n\n      <circle\n        v-for=\"r in circleR\"\n        :key=\"r\"\n        :r=\"r\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :stroke=\"mergedColor[1]\"\n        :stroke-width=\"0.5\"\n        fill=\"transparent\"\n      />\n\n      <circle\n        r=\"1\"\n        :cx=\"x\"\n        :cy=\"y\"\n        stroke=\"transparent\"\n        :fill=\"`url(#${gradientId})`\"\n      >\n        <animate\n          attributeName=\"r\"\n          :values=\"`1;${width / 2}`\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          values=\"1;0\"\n          :dur=\"`${haloDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        r=\"2\"\n        :cx=\"x\"\n        :cy=\"y\"\n        :fill=\"mergedColor[1]\"\n      />\n\n      <g v-if=\"showSplitLine\">\n        <polyline\n          v-for=\"p in splitLinePoints\"\n          :key=\"p\"\n          :points=\"p\"\n          :stroke=\"mergedColor[1]\"\n          :stroke-width=\"0.5\"\n          opacity=\"0.5\"\n        />\n      </g>\n\n      <path\n        v-for=\"d in arcD\"\n        :key=\"d\"\n        :d=\"d\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        fill=\"transparent\"\n      />\n\n      <use :xlink:href=\"`#${gId}`\">\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\n          :dur=\"`${scanDur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n    </svg>\n\n    <div class=\"decoration-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration12',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    /**\n     * @description Scan animation dur\n     */\n    scanDur: {\n      type: Number,\n      default: 3\n    },\n    /**\n     * @description Halo animation dur\n     */\n    haloDur: {\n      type: Number,\n      default: 2\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-12',\n      gId: `decoration-12-g-${id}`,\n      gradientId: `decoration-12-gradient-${id}`,\n\n      defaultColor: ['#2783ce', '#2cf7fe'],\n\n      mergedColor: [],\n\n      pathD: [],\n\n      pathColor: [],\n\n      circleR: [],\n\n      splitLinePoints: [],\n\n      arcD: [],\n\n      segment: 30,\n\n      sectorAngle: Math.PI / 3,\n\n      ringNum: 3,\n\n      ringWidth: 1,\n\n      showSplitLine: true\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  computed: {\n    x () {\n      const { width } = this\n\n      return width / 2\n    },\n    y () {\n      const { height } = this\n\n      return height / 2\n    }\n  },\n  methods: {\n    init () {\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\n\n      mergeColor()\n\n      calcPathD()\n\n      calcPathColor()\n\n      calcCircleR()\n\n      calcSplitLinePoints()\n\n      calcArcD()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    calcPathD () {\n      const { x, y, width, segment, sectorAngle } = this\n\n      const startAngle = -Math.PI / 2\n      const angleGap = sectorAngle / segment\n      const r = width / 4\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\n\n      this.pathD = new Array(segment)\n        .fill('')\n        .map((_, i) => {\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\n          lastEndPoints = endPoints\n\n          return d\n        })\n    },\n    calcPathColor () {\n      const { mergedColor: [color], segment } = this\n\n      const colorGap = 100 / (segment - 1)\n\n      this.pathColor = new Array(segment)\n        .fill(color)\n        .map((_, i) => fade(color, 100 - i * colorGap))\n    },\n    calcCircleR () {\n      const { segment, ringNum, width, ringWidth } = this\n\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\n\n      this.circleR = new Array(ringNum)\n        .fill(0)\n        .map((_, i) => radiusGap * (i + 1))\n    },\n    calcSplitLinePoints () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2\n\n      this.splitLinePoints = new Array(6)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (i + 1)\n          const endAngle = startAngle + Math.PI\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\n        })\n    },\n    calcArcD () {\n      const { x, y, width } = this\n\n      const angleGap = Math.PI / 6\n      const r = width / 2 - 1\n\n      this.arcD = new Array(4)\n        .fill('')\n        .map((_, i) => {\n          const startAngle = angleGap * (3 * i + 1)\n          const endAngle = startAngle + angleGap\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\n\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\n        })\n    },\n    afterAutoResizeMixinInit () {\n      const { init } = this\n\n      init()\n    },\n    fade\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
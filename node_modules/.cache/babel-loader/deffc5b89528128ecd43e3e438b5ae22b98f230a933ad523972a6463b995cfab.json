{"ast":null,"code":"import AMapLoader from '@amap/amap-jsapi-loader';\nexport default {\n  __name: 'search',\n  props: {\n    modelValue: {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    window._AMapSecurityConfig = {\n      securityJsCode: '你申请的安全密钥'\n    };\n    const map = shallowRef(null);\n    // 地点\n    const location = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        emit('update:modelValue', val);\n      }\n    });\n    watch(location, val => {\n      if (val.longitude && val.latitude) {\n        drawMarker();\n      }\n    });\n    const keyword = ref('');\n    let placeSearch, AMapObj, marker, geocoder;\n    function initMap() {\n      AMapLoader.load({\n        key: '',\n        // 申请好的Web端Key，首次调用 load 时必填\n        version: '2.0'\n      }).then(AMap => {\n        AMapObj = AMap;\n        map.value = new AMap.Map('mapcontainer');\n        // 添加点击事件\n        map.value.on('click', onMapClick);\n        if (location.value.longitude) {\n          drawMarker();\n        }\n        AMap.plugin(['AMap.ToolBar', 'AMap.Scale', 'AMap.Geolocation', 'AMap.PlaceSearch', 'AMap.Geocoder'], () => {\n          // 缩放条\n          const toolbar = new AMap.ToolBar();\n          // 比例尺\n          const scale = new AMap.Scale();\n          // 定位\n          const geolocation = new AMap.Geolocation({\n            enableHighAccuracy: true,\n            //是否使用高精度定位，默认:true\n            timeout: 10000,\n            //超过10秒后停止定位，默认：5s\n            position: 'RT',\n            //定位按钮的停靠位置\n            buttonOffset: new AMap.Pixel(10, 20),\n            //定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\n            zoomToAccuracy: true //定位成功后是否自动调整地图视野到定位点\n          });\n\n          geocoder = new AMap.Geocoder({\n            city: '全国'\n          });\n          map.value.addControl(geolocation);\n          map.value.addControl(toolbar);\n          map.value.addControl(scale);\n          placeSearch = new AMap.PlaceSearch({\n            map: map.value,\n            city: '',\n            pageSize: 30,\n            // 单页显示结果条数\n            pageIndex: 1,\n            // 页码\n            citylimit: false,\n            // 是否强制限制在设置的城市内搜索\n            autoFitView: true\n          });\n        });\n      });\n    }\n    onMounted(() => {\n      initMap();\n    });\n    // 搜索地图\n    function handleSearch(queryString, cb) {\n      placeSearch.search(queryString, (status, result) => {\n        if (result && typeof result === 'object' && result.poiList) {\n          const list = result.poiList.pois;\n          list.forEach(item => {\n            item.value = item.name;\n            item.label = item.name;\n          });\n          cb(list);\n        } else {\n          cb([]);\n        }\n      });\n    }\n    // 点击地图\n    function onMapClick(e) {\n      const {\n        lng,\n        lat\n      } = e.lnglat;\n      // 逆地理编码\n      geocoder.getAddress([lng, lat], (status, result) => {\n        if (status === 'complete' && result.info === 'OK') {\n          const {\n            addressComponent,\n            formattedAddress\n          } = result.regeocode;\n          let {\n            city,\n            province,\n            district\n          } = addressComponent;\n          if (!city) {\n            // 直辖市\n            city = province;\n          }\n          location.value = {\n            longitude: lng,\n            latitude: lat,\n            address: formattedAddress,\n            zone: [province, city, district]\n          };\n        }\n      });\n    }\n    // 点击搜索项\n    function handleSelect(item) {\n      const {\n        pname,\n        cityname,\n        adname,\n        address,\n        name\n      } = item;\n      const {\n        lng,\n        lat\n      } = item.location;\n      location.value = {\n        longitude: lng,\n        latitude: lat,\n        address,\n        zone: [pname, cityname, adname],\n        name\n      };\n      map.value.setZoomAndCenter(16, [lng, lat]);\n    }\n    // 绘制地点marker\n    function drawMarker(val) {\n      const {\n        longitude,\n        latitude\n      } = location.value || val;\n      if (marker) {\n        marker.setMap(null);\n      }\n      marker = new AMapObj.Marker({\n        position: new AMapObj.LngLat(longitude, latitude),\n        anchor: 'bottom-center'\n      });\n      map.value.add(marker);\n      map.value.setZoomAndCenter(16, [longitude, latitude]);\n    }\n    const __returned__ = {\n      props,\n      emit,\n      map,\n      location,\n      keyword,\n      get placeSearch() {\n        return placeSearch;\n      },\n      set placeSearch(v) {\n        placeSearch = v;\n      },\n      get AMapObj() {\n        return AMapObj;\n      },\n      set AMapObj(v) {\n        AMapObj = v;\n      },\n      get marker() {\n        return marker;\n      },\n      set marker(v) {\n        marker = v;\n      },\n      get geocoder() {\n        return geocoder;\n      },\n      set geocoder(v) {\n        geocoder = v;\n      },\n      initMap,\n      handleSearch,\n      onMapClick,\n      handleSelect,\n      drawMarker,\n      get AMapLoader() {\n        return AMapLoader;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["AMapLoader","window","_AMapSecurityConfig","securityJsCode","map","shallowRef","location","computed","get","props","modelValue","set","val","emit","watch","longitude","latitude","drawMarker","keyword","ref","placeSearch","AMapObj","marker","geocoder","initMap","load","key","version","then","AMap","value","Map","on","onMapClick","plugin","toolbar","ToolBar","scale","Scale","geolocation","Geolocation","enableHighAccuracy","timeout","position","buttonOffset","Pixel","zoomToAccuracy","Geocoder","city","addControl","PlaceSearch","pageSize","pageIndex","citylimit","autoFitView","onMounted","handleSearch","queryString","cb","search","status","result","poiList","list","pois","forEach","item","name","label","e","lng","lat","lnglat","getAddress","info","addressComponent","formattedAddress","regeocode","province","district","address","zone","handleSelect","pname","cityname","adname","setZoomAndCenter","setMap","Marker","LngLat","anchor","add"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/map/gaud/components/search.vue"],"sourcesContent":["<template>\n\t<div class=\"map-wrapper\">\n\t\t<div id=\"mapcontainer\"></div>\n\t\t<div class=\"search-box\">\n\t\t\t<el-autocomplete\n\t\t\t\tv-model=\"keyword\"\n\t\t\t\t:fetch-suggestions=\"handleSearch\"\n\t\t\t\t:trigger-on-focus=\"false\"\n\t\t\t\tclearable\n\t\t\t\tplaceholder=\"输入城市+关键字搜索\"\n\t\t\t\t@select=\"handleSelect\"\n\t\t\t\tstyle=\"width: 300px\"\n\t\t\t/>\n\t\t\t<el-input\n\t\t\t\tv-model=\"location.longitude\"\n\t\t\t\tplaceholder=\"点击地图选择经度\"\n\t\t\t\tmaxlength=\"15\"\n\t\t\t\treadonly\n\t\t\t\tstyle=\"width: 150px; margin: 0 5px\"\n\t\t\t></el-input>\n\t\t\t<el-input\n\t\t\t\tv-model=\"location.latitude\"\n\t\t\t\tplaceholder=\"点击地图选择纬度\"\n\t\t\t\tmaxlength=\"15\"\n\t\t\t\treadonly\n\t\t\t\tstyle=\"width: 150px\"\n\t\t\t></el-input>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\nimport AMapLoader from '@amap/amap-jsapi-loader';\nwindow._AMapSecurityConfig = {\n\tsecurityJsCode: '你申请的安全密钥',\n};\nconst props = defineProps({\n\tmodelValue: {\n\t\ttype: Object,\n\t\tdefault() {\n\t\t\treturn {};\n\t\t},\n\t},\n});\nconst emit = defineEmits(['update:modelValue']);\nconst map = shallowRef(null);\n// 地点\nconst location = computed({\n\tget() {\n\t\treturn props.modelValue;\n\t},\n\tset(val) {\n\t\temit('update:modelValue', val);\n\t},\n});\nwatch(location, (val) => {\n\tif (val.longitude && val.latitude) {\n\t\tdrawMarker();\n\t}\n});\nconst keyword = ref('');\nlet placeSearch, AMapObj, marker, geocoder;\nfunction initMap() {\n\tAMapLoader.load({\n\t\tkey: '', // 申请好的Web端Key，首次调用 load 时必填\n\t\tversion: '2.0',\n\t}).then((AMap) => {\n\t\tAMapObj = AMap;\n\t\tmap.value = new AMap.Map('mapcontainer');\n\t\t// 添加点击事件\n\t\tmap.value.on('click', onMapClick);\n\t\tif (location.value.longitude) {\n\t\t\tdrawMarker();\n\t\t}\n\t\tAMap.plugin(['AMap.ToolBar', 'AMap.Scale', 'AMap.Geolocation', 'AMap.PlaceSearch', 'AMap.Geocoder'], () => {\n\t\t\t// 缩放条\n\t\t\tconst toolbar = new AMap.ToolBar();\n\t\t\t// 比例尺\n\t\t\tconst scale = new AMap.Scale();\n\t\t\t// 定位\n\t\t\tconst geolocation = new AMap.Geolocation({\n\t\t\t\tenableHighAccuracy: true, //是否使用高精度定位，默认:true\n\t\t\t\ttimeout: 10000, //超过10秒后停止定位，默认：5s\n\t\t\t\tposition: 'RT', //定位按钮的停靠位置\n\t\t\t\tbuttonOffset: new AMap.Pixel(10, 20), //定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\n\t\t\t\tzoomToAccuracy: true, //定位成功后是否自动调整地图视野到定位点\n\t\t\t});\n\t\t\tgeocoder = new AMap.Geocoder({\n\t\t\t\tcity: '全国',\n\t\t\t});\n\t\t\tmap.value.addControl(geolocation);\n\t\t\tmap.value.addControl(toolbar);\n\t\t\tmap.value.addControl(scale);\n\t\t\tplaceSearch = new AMap.PlaceSearch({\n\t\t\t\tmap: map.value,\n\t\t\t\tcity: '',\n\t\t\t\tpageSize: 30, // 单页显示结果条数\n\t\t\t\tpageIndex: 1, // 页码\n\t\t\t\tcitylimit: false, // 是否强制限制在设置的城市内搜索\n\t\t\t\tautoFitView: true,\n\t\t\t});\n\t\t});\n\t});\n}\nonMounted(() => {\n\tinitMap();\n});\n// 搜索地图\nfunction handleSearch(queryString, cb) {\n\tplaceSearch.search(queryString, (status, result) => {\n\t\tif (result && typeof result === 'object' && result.poiList) {\n\t\t\tconst list = result.poiList.pois;\n\t\t\tlist.forEach((item) => {\n\t\t\t\titem.value = item.name;\n\t\t\t\titem.label = item.name;\n\t\t\t});\n\t\t\tcb(list);\n\t\t} else {\n\t\t\tcb([]);\n\t\t}\n\t});\n}\n// 点击地图\nfunction onMapClick(e) {\n\tconst { lng, lat } = e.lnglat;\n\t// 逆地理编码\n\tgeocoder.getAddress([lng, lat], (status, result) => {\n\t\tif (status === 'complete' && result.info === 'OK') {\n\t\t\tconst { addressComponent, formattedAddress } = result.regeocode;\n\t\t\tlet { city, province, district } = addressComponent;\n\t\t\tif (!city) {\n\t\t\t\t// 直辖市\n\t\t\t\tcity = province;\n\t\t\t}\n\t\t\tlocation.value = {\n\t\t\t\tlongitude: lng,\n\t\t\t\tlatitude: lat,\n\t\t\t\taddress: formattedAddress,\n\t\t\t\tzone: [province, city, district],\n\t\t\t};\n\t\t}\n\t});\n}\n// 点击搜索项\nfunction handleSelect(item) {\n\tconst { pname, cityname, adname, address, name } = item;\n\tconst { lng, lat } = item.location;\n\tlocation.value = {\n\t\tlongitude: lng,\n\t\tlatitude: lat,\n\t\taddress,\n\t\tzone: [pname, cityname, adname],\n\t\tname,\n\t};\n\tmap.value.setZoomAndCenter(16, [lng, lat]);\n}\n// 绘制地点marker\nfunction drawMarker(val) {\n\tconst { longitude, latitude } = location.value || val;\n\tif (marker) {\n\t\tmarker.setMap(null);\n\t}\n\tmarker = new AMapObj.Marker({\n\t\tposition: new AMapObj.LngLat(longitude, latitude),\n\t\tanchor: 'bottom-center',\n\t});\n\tmap.value.add(marker);\n\tmap.value.setZoomAndCenter(16, [longitude, latitude]);\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.map-wrapper {\n\tposition: relative;\n\twidth: 100%;\n\theight: 400px;\n\t#mapcontainer {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\t.search-box {\n\t\tposition: absolute;\n\t\ttop: 10px;\n\t\tleft: 10px;\n\t\tz-index: 1;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
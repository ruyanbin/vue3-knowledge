{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      ref: 'scroll-ranking-board',\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n      mergedConfig: null,\n      rowsData: [],\n      rows: [],\n      heights: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0\n    };\n  },\n  watch: {\n    config() {\n      const {\n        stopAnimation,\n        calcData\n      } = this;\n      stopAnimation();\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        mergedConfig,\n        calcHeights\n      } = this;\n      if (!mergedConfig) return;\n      calcHeights(true);\n    },\n    calcData() {\n      const {\n        mergeConfig,\n        calcRowsData\n      } = this;\n      mergeConfig();\n      calcRowsData();\n      const {\n        calcHeights\n      } = this;\n      calcHeights();\n      const {\n        animation\n      } = this;\n      animation(true);\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcRowsData() {\n      let {\n        data,\n        rowNum,\n        sort\n      } = this.mergedConfig;\n      sort && data.sort(({\n        value: a\n      }, {\n        value: b\n      }) => {\n        if (a > b) return -1;\n        if (a < b) return 1;\n        if (a === b) return 0;\n      });\n      const value = data.map(({\n        value\n      }) => value);\n      const min = Math.min(...value) || 0;\n\n      // abs of min\n      const minAbs = Math.abs(min);\n      const max = Math.max(...value) || 0;\n\n      // abs of max\n      const maxAbs = Math.abs(max);\n      const total = max + minAbs;\n      data = data.map((row, i) => ({\n        ...row,\n        ranking: i + 1,\n        percent: (row.value + minAbs) / total * 100\n      }));\n      const rowLength = data.length;\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data];\n      }\n      data = data.map((d, i) => ({\n        ...d,\n        scroll: i\n      }));\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcHeights(onresize = false) {\n      const {\n        height,\n        mergedConfig\n      } = this;\n      const {\n        rowNum,\n        data\n      } = mergedConfig;\n      const avgHeight = height / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    async animation(start = false) {\n      let {\n        avgHeight,\n        animationIndex,\n        mergedConfig,\n        rowsData,\n        animation,\n        updater\n      } = this;\n      const {\n        waitTime,\n        carousel,\n        rowNum\n      } = mergedConfig;\n      const rowLength = rowsData.length;\n      if (rowNum >= rowLength) return;\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        if (updater !== this.updater) return;\n      }\n      const animationNum = carousel === 'single' ? 1 : rowNum;\n      let rows = rowsData.slice(animationIndex);\n      rows.push(...rowsData.slice(0, animationIndex));\n      this.rows = rows.slice(0, rowNum + 1);\n      this.heights = new Array(rowLength).fill(avgHeight);\n      await new Promise(resolve => setTimeout(resolve, 300));\n      if (updater !== this.updater) return;\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0));\n      animationIndex += animationNum;\n      const back = animationIndex - rowLength;\n      if (back >= 0) animationIndex = back;\n      this.animationIndex = animationIndex;\n      this.animationHandler = setTimeout(animation, waitTime - 300);\n    },\n    stopAnimation() {\n      const {\n        animationHandler,\n        updater\n      } = this;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    }\n  },\n  destroyed() {\n    const {\n      stopAnimation\n    } = this;\n    stopAnimation();\n  }\n};","map":{"version":3,"mappings":";AA2BA,OAAOA,UAAS,MAAO,2BAA0B;AAEjD,SAASC,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAQ,QAAS,qCAAoC;AAE9D,eAAe;EACbC,IAAI,EAAE,sBAAsB;EAC5BC,MAAM,EAAE,CAACJ,UAAU,CAAC;EACpBK,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,IAAG,GAAK;IACN,OAAO;MACLC,GAAG,EAAE,sBAAsB;MAE3BC,aAAa,EAAE;QACb;;;;;QAKAF,IAAI,EAAE,EAAE;QACR;;;;;QAKAG,MAAM,EAAE,CAAC;QACT;;;;;QAKAC,QAAQ,EAAE,IAAI;QACd;;;;;;QAMAC,QAAQ,EAAE,QAAQ;QAClB;;;;;;QAMAC,IAAI,EAAE,EAAE;QACR;;;;;QAKAC,IAAI,EAAE,IAAI;QACV;;;;;QAKAC,cAAc,EAAE;MAClB,CAAC;MAEDC,YAAY,EAAE,IAAI;MAElBC,QAAQ,EAAE,EAAE;MAEZC,IAAI,EAAE,EAAE;MAERC,OAAO,EAAE,EAAE;MAEXC,cAAc,EAAE,CAAC;MAEjBC,gBAAgB,EAAE,EAAE;MAEpBC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,KAAK,EAAE;IACLpB,MAAK,GAAK;MACR,MAAM;QAAEqB,aAAa;QAAEC;MAAS,IAAI,IAAG;MAEvCD,aAAa,EAAC;MAEdC,QAAQ,EAAC;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,wBAAuB,GAAK;MAC1B,MAAM;QAAEF;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX,CAAC;IACDG,QAAO,GAAK;MACV,MAAM;QAAEZ,YAAY;QAAEa;MAAY,IAAI,IAAG;MAEzC,IAAI,CAACb,YAAY,EAAE;MAEnBa,WAAW,CAAC,IAAI;IAClB,CAAC;IACDJ,QAAO,GAAK;MACV,MAAM;QAAEK,WAAW;QAAEC;MAAa,IAAI,IAAG;MAEzCD,WAAW,EAAC;MAEZC,YAAY,EAAC;MAEb,MAAM;QAAEF;MAAY,IAAI,IAAG;MAE3BA,WAAW,EAAC;MAEZ,MAAM;QAAEG;MAAU,IAAI,IAAG;MAEzBA,SAAS,CAAC,IAAI;IAChB,CAAC;IACDF,WAAU,GAAK;MACb,IAAI;QAAE3B,MAAM;QAAEM;MAAc,IAAI,IAAG;MAEnC,IAAI,CAACO,YAAW,GAAIlB,SAAS,CAACC,SAAS,CAACU,aAAa,EAAE,IAAI,CAAC,EAAEN,MAAK,IAAK,CAAC,CAAC;IAC5E,CAAC;IACD4B,YAAW,GAAK;MACd,IAAI;QAAExB,IAAI;QAAEG,MAAM;QAAEI;MAAK,IAAI,IAAI,CAACE,YAAW;MAE7CF,IAAG,IAAKP,IAAI,CAACO,IAAI,CAAC,CAAC;QAAEmB,KAAK,EAAEC;MAAE,CAAC,EAAE;QAAED,KAAK,EAAEE;MAAE,CAAC,KAAK;QAChD,IAAID,IAAIC,CAAC,EAAE,OAAO,CAAC;QACnB,IAAID,IAAIC,CAAC,EAAE,OAAO;QAClB,IAAID,MAAMC,CAAC,EAAE,OAAO;MACtB,CAAC;MAED,MAAMF,KAAI,GAAI1B,IAAI,CAAC6B,GAAG,CAAC,CAAC;QAAEH;MAAM,CAAC,KAAKA,KAAK;MAE3C,MAAMI,GAAE,GAAIC,IAAI,CAACD,GAAG,CAAC,GAAGJ,KAAK,KAAK;;MAElC;MACA,MAAMM,MAAK,GAAID,IAAI,CAACE,GAAG,CAACH,GAAG;MAE3B,MAAMI,GAAE,GAAIH,IAAI,CAACG,GAAG,CAAC,GAAGR,KAAK,KAAK;;MAElC;MACA,MAAMS,MAAK,GAAIJ,IAAI,CAACE,GAAG,CAACC,GAAG;MAE3B,MAAME,KAAI,GAAIF,GAAE,GAAIF,MAAK;MAEzBhC,IAAG,GAAIA,IAAI,CAAC6B,GAAG,CAAC,CAACQ,GAAG,EAAEC,CAAC,MAAM;QAAE,GAAGD,GAAG;QAAEE,OAAO,EAAED,IAAI,CAAC;QAAEE,OAAO,EAAE,CAACH,GAAG,CAACX,KAAI,GAAIM,MAAM,IAAII,KAAI,GAAI;MAAI,CAAC,CAAC;MAErG,MAAMK,SAAQ,GAAIzC,IAAI,CAAC0C,MAAK;MAE5B,IAAID,SAAQ,GAAItC,MAAK,IAAKsC,SAAQ,GAAI,IAAItC,MAAM,EAAE;QAChDH,IAAG,GAAI,CAAC,GAAGA,IAAI,EAAE,GAAGA,IAAI;MAC1B;MAEAA,IAAG,GAAIA,IAAI,CAAC6B,GAAG,CAAC,CAACc,CAAC,EAAEL,CAAC,MAAM;QAAE,GAAGK,CAAC;QAAEC,MAAM,EAAEN;MAAE,CAAC,CAAC;MAE/C,IAAI,CAAC5B,QAAO,GAAIV,IAAG;MACnB,IAAI,CAACW,IAAG,GAAIX,IAAG;IACjB,CAAC;IACDsB,WAAU,CAAGuB,QAAO,GAAI,KAAK,EAAE;MAC7B,MAAM;QAAEC,MAAM;QAAErC;MAAa,IAAI,IAAG;MAEpC,MAAM;QAAEN,MAAM;QAAEH;MAAK,IAAIS,YAAW;MAEpC,MAAMsC,SAAQ,GAAID,MAAK,GAAI3C,MAAK;MAEhC,IAAI,CAAC4C,SAAQ,GAAIA,SAAQ;MAEzB,IAAI,CAACF,QAAQ,EAAE,IAAI,CAACjC,OAAM,GAAI,IAAIoC,KAAK,CAAChD,IAAI,CAAC0C,MAAM,CAAC,CAACO,IAAI,CAACF,SAAS;IACrE,CAAC;IACD,MAAMtB,SAAQ,CAAGyB,KAAI,GAAI,KAAK,EAAE;MAC9B,IAAI;QAAEH,SAAS;QAAElC,cAAc;QAAEJ,YAAY;QAAEC,QAAQ;QAAEe,SAAS;QAAEV;MAAQ,IAAI,IAAG;MAEnF,MAAM;QAAEX,QAAQ;QAAEC,QAAQ;QAAEF;MAAO,IAAIM,YAAW;MAElD,MAAMgC,SAAQ,GAAI/B,QAAQ,CAACgC,MAAK;MAEhC,IAAIvC,MAAK,IAAKsC,SAAS,EAAE;MAEzB,IAAIS,KAAK,EAAE;QACT,MAAM,IAAIC,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAEhD,QAAQ,CAAC;QAC1D,IAAIW,OAAM,KAAM,IAAI,CAACA,OAAO,EAAE;MAChC;MAEA,MAAMuC,YAAW,GAAIjD,QAAO,KAAM,QAAO,GAAI,IAAIF,MAAK;MAEtD,IAAIQ,IAAG,GAAID,QAAQ,CAAC6C,KAAK,CAAC1C,cAAc;MACxCF,IAAI,CAAC6C,IAAI,CAAC,GAAG9C,QAAQ,CAAC6C,KAAK,CAAC,CAAC,EAAE1C,cAAc,CAAC;MAE9C,IAAI,CAACF,IAAG,GAAIA,IAAI,CAAC4C,KAAK,CAAC,CAAC,EAAEpD,MAAK,GAAI,CAAC;MACpC,IAAI,CAACS,OAAM,GAAI,IAAIoC,KAAK,CAACP,SAAS,CAAC,CAACQ,IAAI,CAACF,SAAS;MAElD,MAAM,IAAII,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC;MACrD,IAAIrC,OAAM,KAAM,IAAI,CAACA,OAAO,EAAE;MAE9B,IAAI,CAACH,OAAO,CAAC6C,MAAM,CAAC,CAAC,EAAEH,YAAY,EAAE,GAAG,IAAIN,KAAK,CAACM,YAAY,CAAC,CAACL,IAAI,CAAC,CAAC,CAAC;MAEvEpC,cAAa,IAAKyC,YAAW;MAE7B,MAAMI,IAAG,GAAI7C,cAAa,GAAI4B,SAAQ;MACtC,IAAIiB,IAAG,IAAK,CAAC,EAAE7C,cAAa,GAAI6C,IAAG;MAEnC,IAAI,CAAC7C,cAAa,GAAIA,cAAa;MACnC,IAAI,CAACC,gBAAe,GAAIuC,UAAU,CAAC5B,SAAS,EAAErB,QAAO,GAAI,GAAG;IAC9D,CAAC;IACDa,aAAY,GAAK;MACf,MAAM;QAAEH,gBAAgB;QAAEC;MAAQ,IAAI,IAAG;MAEzC,IAAI,CAACA,OAAM,GAAI,CAACA,OAAM,GAAI,CAAC,IAAI,MAAK;MAEpC,IAAI,CAACD,gBAAgB,EAAE;MAEvB6C,YAAY,CAAC7C,gBAAgB;IAC/B;EACF,CAAC;EACD8C,SAAQ,GAAK;IACX,MAAM;MAAE3C;IAAc,IAAI,IAAG;IAE7BA,aAAa,EAAC;EAChB;AACF","names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","data","ref","defaultConfig","rowNum","waitTime","carousel","unit","sort","valueFormatter","mergedConfig","rowsData","rows","heights","animationIndex","animationHandler","updater","watch","stopAnimation","calcData","methods","afterAutoResizeMixinInit","onResize","calcHeights","mergeConfig","calcRowsData","animation","value","a","b","map","min","Math","minAbs","abs","max","maxAbs","total","row","i","ranking","percent","rowLength","length","d","scroll","onresize","height","avgHeight","Array","fill","start","Promise","resolve","setTimeout","animationNum","slice","push","splice","back","clearTimeout","destroyed"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n      \n      const min = Math.min(...value) || 0\n\n      // abs of min\n      const minAbs = Math.abs(min)\n\n      const max = Math.max(...value) || 0\n\n      // abs of max\n      const maxAbs = Math.abs(max)\n\n      const total = max + minAbs\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
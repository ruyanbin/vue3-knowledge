{"ast":null,"code":"import { NOOP } from '@vue/shared';\nconst withInstall = (main, extra) => {\n  main.install = app => {\n    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {\n      app.component(comp.name, comp);\n    }\n  };\n  if (extra) {\n    for (const [key, comp] of Object.entries(extra)) {\n      main[key] = comp;\n    }\n  }\n  return main;\n};\nconst withInstallFunction = (fn, name) => {\n  fn.install = app => {\n    app.config.globalProperties[name] = fn;\n  };\n  return fn;\n};\nconst withNoopInstall = component => {\n  component.install = NOOP;\n  return component;\n};\nexport { withInstall, withInstallFunction, withNoopInstall };","map":{"version":3,"mappings":";AAGa,oBAAc,CACzBA,MACAC,KACG;EACFD,KAA2BE,OAAU,GAACC,GAAc;IACnD,WAAWC,QAAQ,CAACJ,MAAM,GAAGK,MAAO,QAAOJ,wBAAS,EAAM;MACpDE,cAAUC,KAAKE,IAAM;IAAA;EAAA;EAI7B,IAAIL,KAAO;IACT,WAAW,CAACM,KAAKH,IAAS,YAAOI,QAAQP,KAAQ;MAC9CD,KAAaO,GAAO;IAAA;EAAA;EAGlB;AAAA;AAGI,4BAAsB,CAAIE,IAAOH,IAAiB;EAC5DG,GAAyBP,OAAU,GAACC,GAAQ;IACvCA,WAAOO,iBAAiBJ,IAAQ;EAAA;EAG/B;AAAA;AAGI,wBAAsBK,SAAiB;EACjDA,UAAgCT,OAAU;EAEpC;AAAA","names":["main","extra","install","app","comp","Object","name","key","entries","fn","globalProperties","component"],"sources":["../../../../src/utils/with-install.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\r\nimport type { SFCWithInstall } from './types'\r\n\r\nexport const withInstall = <T, E extends Record<string, any>>(\r\n  main: T,\r\n  extra?: E\r\n) => {\r\n  (main as SFCWithInstall<T>).install = (app): void => {\r\n    for (const comp of [main, ...Object.values(extra ?? {})]) {\r\n      app.component(comp.name, comp)\r\n    }\r\n  }\r\n\r\n  if (extra) {\r\n    for (const [key, comp] of Object.entries(extra)) {\r\n      (main as any)[key] = comp\r\n    }\r\n  }\r\n  return main as SFCWithInstall<T> & E\r\n}\r\n\r\nexport const withInstallFunction = <T>(fn: T, name: string) => {\r\n  (fn as SFCWithInstall<T>).install = (app) => {\r\n    app.config.globalProperties[name] = fn\r\n  }\r\n\r\n  return fn as SFCWithInstall<T>\r\n}\r\n\r\nexport const withNoopInstall = <T>(component: T) => {\r\n  (component as SFCWithInstall<T>).install = NOOP\r\n\r\n  return component as SFCWithInstall<T>\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
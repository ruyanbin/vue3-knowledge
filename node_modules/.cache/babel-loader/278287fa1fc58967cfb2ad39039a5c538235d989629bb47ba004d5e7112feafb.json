{"ast":null,"code":"import { openBlock, createElementBlock, createElementVNode, renderSlot } from 'vue';\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"none\"\n  }\n};\nconst _hoisted_2 = {\n  ref: \"content\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"default\")], 512)]);\n}\nexport { render };","map":{"version":3,"mappings":";AACO;EAAAA;IAAsB;EAAA;AAAA;AACpB;EAAAC,GAAI;AAAA;;EADX,sCAIK,QAJLC,UAIK,GAHHC,mBAEK,OAFLC,UAEK,GADHC,WAAOC","names":["style","ref","_hoisted_1","_createElementVNode","_hoisted_2","_renderSlot","_ctx"],"sources":["../../../../../../src/packages/marker/Marker/Marker.vue?vue&type=template&id=55ac8773&lang.js"],"sourcesContent":["<template>\r\n  <div style=\"display: none;\">\r\n    <div ref=\"content\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport registerMixin from '../../../mixins/register-component';\r\nimport {isMapInstance, isOverlayGroupInstance} from '../../../utils/util';\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapMarker',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    position: {\r\n      type: [Array, Object],\r\n      required: true\r\n    }, // 点标记在地图上显示的位置\r\n    icon: {\r\n      type: [String, Object]\r\n    }, // 在点标记中显示的图标。可以传一个图标地址，也可以传Icon对象。有合法的content内容设置时，此属性无效。\r\n    content: {\r\n      type: [String, HTMLElement]\r\n    }, // 点标记显示内容。可以是HTML要素字符串或者HTML DOM对象。content有效时，icon属性将被覆盖。\r\n    title: {\r\n      type: String\r\n    }, // 鼠标滑过点标记时的文字提示。不设置则鼠标滑过点标无文字提示。\r\n    offset: {\r\n      type: [Array, Object]\r\n    }, // 点标记显示位置偏移量，默认值为 [0,0] 。Marker指定position后，默认以marker左上角位置为基准点（若设置了anchor，则以anchor设置位置为基准点），对准所给定的position位置，若需使marker指定位置对准在position处，需根据marker的尺寸设置一定的偏移量。\r\n    anchor: {\r\n      type: [String, Array]\r\n    }, // 设置点标记锚点，可选值：'top-left','top-center','top-right', 'middle-left', 'center', 'middle-right', 'bottom-left', 'bottom-center', 'bottom-right'\r\n    angle: {\r\n      type: Number\r\n    }, // 点标记的旋转角度，，广泛用于改变车辆行驶方向。默认值：0\r\n    clickable: {\r\n      type: Boolean,\r\n      default: true\r\n    }, // 点标记是否可点击，默认值: true\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 设置点标记是否可拖拽移动，默认值：false\r\n    bubble: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 事件是否冒泡，默认为 false\r\n    zooms: {\r\n      type: Array\r\n    }, // 点标记显示的层级范围，超过范围不显示。默认值：zooms: [2, 20]\r\n    cursor: {\r\n      type: String\r\n    }, // 指定鼠标悬停时的鼠，默认值：'pointer'\r\n    topWhenClick: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 鼠标点击时marker是否置顶，默认false ，不置顶\r\n    label: {\r\n      type: Object\r\n    }, // 添加文本标注\r\n    extData: null\r\n  },\r\n  emits: ['update:position'],\r\n  data() {\r\n    return {\r\n      withSlot: false,\r\n      converters: {\r\n      },\r\n    };\r\n  },\r\n  /*updated() {\r\n    if(this.withSlot && this.$amapComponent){\r\n      this.$amapComponent.setContent(this.$refs.content);\r\n    }\r\n  },*/\r\n  methods: {\r\n    __initComponent(options) {\r\n      if (this.$slots.default && this.$slots.default().length > 0) {\r\n        this.withSlot = true;\r\n        options.content = this.getSlotContent();\r\n      }\r\n      this.$amapComponent = new AMap.Marker(options);\r\n      if (isMapInstance(this.$parentComponent)) {\r\n        this.$parentComponent.add(this.$amapComponent);\r\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n        this.$parentComponent.addOverlay(this.$amapComponent);\r\n      }\r\n      if(this.withSlot){\r\n        // 观察器的配置（需要观察什么变动）\r\n        const config = { attributes: true, childList: true, subtree: true };\r\n        // 创建一个观察器实例并传入回调函数\r\n        const observer = new MutationObserver(() => {\r\n          this.$amapComponent.setContent(this.getSlotContent());\r\n        });\r\n        observer.observe(this.$refs.content as Node, config);\r\n        this.observer = observer;\r\n      }\r\n      this.bindModelEvents();\r\n    },\r\n    getSlotContent(){\r\n      return (this.$refs.content as HTMLDivElement);\r\n    },\r\n    bindModelEvents(){\r\n      this.$amapComponent.on('dragend',() => {\r\n        this.emitPosition();\r\n      });\r\n      this.$amapComponent.on('touchend',() => {\r\n        this.emitPosition();\r\n      });\r\n    },\r\n    emitPosition(){\r\n      const position = this.$amapComponent.getPosition();\r\n      this.$emit('update:position', position.toArray());\r\n    },\r\n    destroyComponent() {\r\n      if(this.observer){\r\n        this.observer.disconnect();\r\n        this.observer = null;\r\n      }\r\n      this.$amapComponent.setMap(null);\r\n      /*if (isMapInstance(this.$parentComponent)) {\r\n        this.$amapComponent.setMap(null);\r\n        // this.$parentComponent.remove(this.$amapComponent);\r\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n        this.$parentComponent.removeOverlay(this.$amapComponent);\r\n      }*/\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    }\r\n  }\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
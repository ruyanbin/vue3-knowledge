{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// CMPT File Format\n// https://github.com/CesiumGS/3d-tiles/blob/master/specification/TileFormats/Composite/README.md\nimport { LoaderBase } from './LoaderBase.js';\nimport { readMagicBytes } from '../utilities/readMagicBytes.js';\nexport class CMPTLoaderBase extends LoaderBase {\n  parse(buffer) {\n    const dataView = new DataView(buffer);\n\n    // 16-byte header\n\n    // 4 bytes\n    const magic = readMagicBytes(dataView);\n    console.assert(magic === 'cmpt', 'CMPTLoader: The magic bytes equal \"cmpt\".');\n\n    // 4 bytes\n    const version = dataView.getUint32(4, true);\n    console.assert(version === 1, 'CMPTLoader: The version listed in the header is \"1\".');\n\n    // 4 bytes\n    const byteLength = dataView.getUint32(8, true);\n    console.assert(byteLength === buffer.byteLength, 'CMPTLoader: The contents buffer length listed in the header matches the file.');\n\n    // 4 bytes\n    const tilesLength = dataView.getUint32(12, true);\n    const tiles = [];\n    let offset = 16;\n    for (let i = 0; i < tilesLength; i++) {\n      const tileView = new DataView(buffer, offset, 12);\n      const tileMagic = readMagicBytes(tileView);\n      const tileVersion = tileView.getUint32(4, true);\n      const byteLength = tileView.getUint32(8, true);\n      const tileBuffer = new Uint8Array(buffer, offset, byteLength);\n      tiles.push({\n        type: tileMagic,\n        buffer: tileBuffer,\n        version: tileVersion\n      });\n      offset += byteLength;\n    }\n    return {\n      version,\n      tiles\n    };\n  }\n}","map":{"version":3,"names":["LoaderBase","readMagicBytes","CMPTLoaderBase","parse","buffer","dataView","DataView","magic","console","assert","version","getUint32","byteLength","tilesLength","tiles","offset","i","tileView","tileMagic","tileVersion","tileBuffer","Uint8Array","push","type"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/3d-tiles-renderer/src/base/CMPTLoaderBase.js"],"sourcesContent":["// CMPT File Format\n// https://github.com/CesiumGS/3d-tiles/blob/master/specification/TileFormats/Composite/README.md\nimport { LoaderBase } from './LoaderBase.js';\nimport { readMagicBytes } from '../utilities/readMagicBytes.js';\n\nexport class CMPTLoaderBase extends LoaderBase {\n\n\tparse( buffer ) {\n\n\t\tconst dataView = new DataView( buffer );\n\n\t\t// 16-byte header\n\n\t\t// 4 bytes\n\t\tconst magic = readMagicBytes( dataView );\n\n\t\tconsole.assert( magic === 'cmpt', 'CMPTLoader: The magic bytes equal \"cmpt\".' );\n\n\t\t// 4 bytes\n\t\tconst version = dataView.getUint32( 4, true );\n\n\t\tconsole.assert( version === 1, 'CMPTLoader: The version listed in the header is \"1\".' );\n\n\t\t// 4 bytes\n\t\tconst byteLength = dataView.getUint32( 8, true );\n\n\t\tconsole.assert( byteLength === buffer.byteLength, 'CMPTLoader: The contents buffer length listed in the header matches the file.' );\n\n\t\t// 4 bytes\n\t\tconst tilesLength = dataView.getUint32( 12, true );\n\n\t\tconst tiles = [];\n\t\tlet offset = 16;\n\t\tfor ( let i = 0; i < tilesLength; i ++ ) {\n\n\t\t\tconst tileView = new DataView( buffer, offset, 12 );\n\t\t\tconst tileMagic = readMagicBytes( tileView );\n\t\t\tconst tileVersion = tileView.getUint32( 4, true );\n\t\t\tconst byteLength = tileView.getUint32( 8, true );\n\n\t\t\tconst tileBuffer = new Uint8Array( buffer, offset, byteLength );\n\t\t\ttiles.push( {\n\n\t\t\t\ttype: tileMagic,\n\t\t\t\tbuffer: tileBuffer,\n\t\t\t\tversion: tileVersion,\n\n\t\t\t} );\n\t\t\toffset += byteLength;\n\n\t\t}\n\n\t\treturn {\n\t\t\tversion,\n\t\t\ttiles,\n\t\t};\n\n\t}\n\n}\n\n"],"mappings":";AAAA;AACA;AACA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,cAAc,QAAQ,gCAAgC;AAE/D,OAAO,MAAMC,cAAc,SAASF,UAAU,CAAC;EAE9CG,KAAK,CAAEC,MAAM,EAAG;IAEf,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAEF,MAAM,CAAE;;IAEvC;;IAEA;IACA,MAAMG,KAAK,GAAGN,cAAc,CAAEI,QAAQ,CAAE;IAExCG,OAAO,CAACC,MAAM,CAAEF,KAAK,KAAK,MAAM,EAAE,2CAA2C,CAAE;;IAE/E;IACA,MAAMG,OAAO,GAAGL,QAAQ,CAACM,SAAS,CAAE,CAAC,EAAE,IAAI,CAAE;IAE7CH,OAAO,CAACC,MAAM,CAAEC,OAAO,KAAK,CAAC,EAAE,sDAAsD,CAAE;;IAEvF;IACA,MAAME,UAAU,GAAGP,QAAQ,CAACM,SAAS,CAAE,CAAC,EAAE,IAAI,CAAE;IAEhDH,OAAO,CAACC,MAAM,CAAEG,UAAU,KAAKR,MAAM,CAACQ,UAAU,EAAE,+EAA+E,CAAE;;IAEnI;IACA,MAAMC,WAAW,GAAGR,QAAQ,CAACM,SAAS,CAAE,EAAE,EAAE,IAAI,CAAE;IAElD,MAAMG,KAAK,GAAG,EAAE;IAChB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAG,EAAG;MAExC,MAAMC,QAAQ,GAAG,IAAIX,QAAQ,CAAEF,MAAM,EAAEW,MAAM,EAAE,EAAE,CAAE;MACnD,MAAMG,SAAS,GAAGjB,cAAc,CAAEgB,QAAQ,CAAE;MAC5C,MAAME,WAAW,GAAGF,QAAQ,CAACN,SAAS,CAAE,CAAC,EAAE,IAAI,CAAE;MACjD,MAAMC,UAAU,GAAGK,QAAQ,CAACN,SAAS,CAAE,CAAC,EAAE,IAAI,CAAE;MAEhD,MAAMS,UAAU,GAAG,IAAIC,UAAU,CAAEjB,MAAM,EAAEW,MAAM,EAAEH,UAAU,CAAE;MAC/DE,KAAK,CAACQ,IAAI,CAAE;QAEXC,IAAI,EAAEL,SAAS;QACfd,MAAM,EAAEgB,UAAU;QAClBV,OAAO,EAAES;MAEV,CAAC,CAAE;MACHJ,MAAM,IAAIH,UAAU;IAErB;IAEA,OAAO;MACNF,OAAO;MACPI;IACD,CAAC;EAEF;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}
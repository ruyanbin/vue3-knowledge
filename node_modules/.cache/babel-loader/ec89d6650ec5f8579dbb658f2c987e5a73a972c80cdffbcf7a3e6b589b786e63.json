{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \"单例模式\")], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createBlock(_component_el_card, null, {\n    header: _withCtx(() => [_hoisted_1]),\n    default: _withCtx(() => [_createTextVNode(\" 说明\"), _hoisted_2, _createTextVNode(\" 单例模式（Singleton Pattern）涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象 特点：\"), _hoisted_3, _createTextVNode(\" 单例类只能有一个实例。\"), _hoisted_4, _createTextVNode(\" 单例类必须自己创建自己的唯一实例。\"), _hoisted_5, _createTextVNode(\" 单例类必须给所有其他对象提供这一实例。\"), _hoisted_6, _createTextVNode(\" 例子:\"), _hoisted_7, _createTextVNode(\" let box; const createBox = (_a, _b) => { if(!box){ box = {}; } box.a = _a; box.b = _b; return box; }; const obj1 = createBox(3, 6); obj1; // {a: 3, b: 6} const obj2 = createBox(10, 20); obj1; // {a: 10, b: 20} obj2; // {a: 10, b: 20} 说明：\"), _hoisted_8, _createTextVNode(\" 1.单例模式可以创建多个实例，但是，只要改变其中任一实例对象的属性值，其他所有的实例对象的属性值都变了。所以，单例类只能有一个实例，否则就会出错。\"), _hoisted_9]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAGGA,oBAEM;EAFDC,KAAK,EAAC;AAAa,iBACvBD,oBAAqC;EAA/BC,KAAK,EAAC;AAAa,GAAC,MAAI;gCAG9BD,oBAAI;gCAEHA,oBAAI;gCACIA,oBAAI;gCACEA,oBAAI;gCACFA,oBAAI;gCACpBA,oBAAI;gCAeJA,oBAAI;gCACkEA,oBAAI;;;;uBA5B9EE,aA6BUC;IA5BEC,MAAM,WAChB,MAEM,CAFNC,UAEM;sBACI,MACT,kBADS,KACT,aAAI,0HAEH,aAAI,iCACI,aAAI,uCACE,aAAI,yCACF,aAAI,yBACpB,aAAI,mQAeJ,aAAI,+FACkE,aAAI","names":["_createElementVNode","class","_createBlock","_component_el_card","header","_hoisted_1"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/Design/Single.vue"],"sourcesContent":["<template>\n\t<el-card>\n\t\t<template #header>\n\t\t\t<div class=\"card-header\">\n\t\t\t\t<span class=\"font-medium\">单例模式</span>\n\t\t\t</div>\n\t\t</template>\n\t\t说明<br>\n\t\t单例模式（Singleton Pattern）涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象\n\t\t特点：<br>\n\t\t单例类只能有一个实例。<br>\n\t\t单例类必须自己创建自己的唯一实例。<br>\n\t\t单例类必须给所有其他对象提供这一实例。<br>\n\t\t例子:<br>\n\t\tlet box;\n\t\tconst createBox = (_a, _b) => {\n\t\tif(!box){\n\t\tbox = {};\n\t\t}\n\t\tbox.a = _a;\n\t\tbox.b = _b;\n\t\treturn box;\n\t\t};\n\t\tconst obj1 = createBox(3, 6);\n\t\tobj1; // {a: 3, b: 6}\n\t\tconst obj2 = createBox(10, 20);\n\t\tobj1; // {a: 10, b: 20}\n\t\tobj2; // {a: 10, b: 20}\n\t\t说明：<br>\n\t\t1.单例模式可以创建多个实例，但是，只要改变其中任一实例对象的属性值，其他所有的实例对象的属性值都变了。所以，单例类只能有一个实例，否则就会出错。<br>\n\t</el-card>\n</template>\n\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
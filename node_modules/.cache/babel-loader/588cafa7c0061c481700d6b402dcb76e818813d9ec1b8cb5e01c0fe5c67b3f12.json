{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration3',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    const pointSideLength = 7;\n    return {\n      ref: 'decoration-3',\n      svgWH: [300, 35],\n      svgScale: [1, 1],\n      rowNum: 2,\n      rowPoints: 25,\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n      points: [],\n      defaultColor: ['#7acaec', 'transparent'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    calcSVGData() {\n      const {\n        calcPointsPosition,\n        calcScale\n      } = this;\n      calcPointsPosition();\n      calcScale();\n    },\n    calcPointsPosition() {\n      const {\n        svgWH,\n        rowNum,\n        rowPoints\n      } = this;\n      const [w, h] = svgWH;\n      const horizontalGap = w / (rowPoints + 1);\n      const verticalGap = h / (rowNum + 1);\n      let points = new Array(rowNum).fill(0).map((foo, i) => new Array(rowPoints).fill(0).map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)]));\n      this.points = points.reduce((all, item) => [...all, ...item], []);\n    },\n    calcScale() {\n      const {\n        width,\n        height,\n        svgWH\n      } = this;\n      const [w, h] = svgWH;\n      this.svgScale = [width / w, height / h];\n    },\n    onResize() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"mappings":"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","names":["autoResize","deepMerge","deepClone","name","mixins","props","color","type","Array","default","data","pointSideLength","ref","svgWH","svgScale","rowNum","rowPoints","halfPointSideLength","points","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcScale","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","width","height","onResize","mounted"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration3/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-3\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n\n      <template\n        v-for=\"(point, i) in points\" \n        :key=\"i\"\n      >\n        <rect\n          :fill=\"mergedColor[0]\"\n          :x=\"point[0] - halfPointSideLength\"\n          :y=\"point[1] - halfPointSideLength\"\n          :width=\"pointSideLength\"\n          :height=\"pointSideLength\"\n        >\n          <animate\n            v-if=\"Math.random() > 0.6\"\n            attributeName=\"fill\"\n            :values=\"`${mergedColor.join(';')}`\"\n            :dur=\"Math.random() + 1 + 's'\"\n            :begin=\"Math.random() * 2\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration3',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const pointSideLength = 7\n\n    return {\n      ref: 'decoration-3',\n\n      svgWH: [300, 35],\n\n      svgScale: [1, 1],\n\n      rowNum: 2,\n      rowPoints: 25,\n\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n\n      points: [],\n\n      defaultColor: ['#7acaec', 'transparent'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
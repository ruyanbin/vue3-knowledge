{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dv-percent-pond\",\n  ref: \"percent-pond\"\n};\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"offset\", \"stop-color\"];\nconst _hoisted_4 = [\"id\", \"x2\"];\nconst _hoisted_5 = [\"offset\", \"stop-color\"];\nconst _hoisted_6 = [\"x\", \"y\", \"rx\", \"ry\", \"stroke-width\", \"stroke\", \"width\", \"height\"];\nconst _hoisted_7 = [\"stroke-width\", \"stroke-dasharray\", \"stroke\", \"points\"];\nconst _hoisted_8 = [\"stroke\", \"fill\", \"x\", \"y\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(\"svg\", null, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", {\n    id: $data.gradientId1,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"100%\",\n    y2: \"0%\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.linearGradient, lc => {\n    return _openBlock(), _createElementBlock(\"stop\", {\n      key: lc[0],\n      offset: `${lc[0]}%`,\n      \"stop-color\": lc[1]\n    }, null, 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_2), _createElementVNode(\"linearGradient\", {\n    id: $data.gradientId2,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: $options.gradient2XPos,\n    y2: \"0%\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.linearGradient, lc => {\n    return _openBlock(), _createElementBlock(\"stop\", {\n      key: lc[0],\n      offset: `${lc[0]}%`,\n      \"stop-color\": lc[1]\n    }, null, 8 /* PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_4)]), _createElementVNode(\"rect\", {\n    x: $data.mergedConfig ? $data.mergedConfig.borderWidth / 2 : '0',\n    y: $data.mergedConfig ? $data.mergedConfig.borderWidth / 2 : '0',\n    rx: $data.mergedConfig ? $data.mergedConfig.borderRadius : '0',\n    ry: $data.mergedConfig ? $data.mergedConfig.borderRadius : '0',\n    fill: \"transparent\",\n    \"stroke-width\": $data.mergedConfig ? $data.mergedConfig.borderWidth : '0',\n    stroke: `url(#${$data.gradientId1})`,\n    width: $options.rectWidth > 0 ? $options.rectWidth : 0,\n    height: $options.rectHeight > 0 ? $options.rectHeight : 0\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"polyline\", {\n    \"stroke-width\": $options.polylineWidth,\n    \"stroke-dasharray\": $data.mergedConfig ? $data.mergedConfig.lineDash.join(',') : '0',\n    stroke: `url(#${$options.polylineGradient})`,\n    points: $options.points\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"text\", {\n    stroke: $data.mergedConfig ? $data.mergedConfig.textColor : '#fff',\n    fill: $data.mergedConfig ? $data.mergedConfig.textColor : '#fff',\n    x: $data.width / 2,\n    y: $data.height / 2\n  }, _toDisplayString($options.details), 9 /* TEXT, PROPS */, _hoisted_8)]))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC,iBAAiB;EAACC,GAAG,EAAC;;;;;;;;;;uBAAjCC,oBAyCM,OAzCNC,UAyCM,kBAxCJD,oBAuCM,cAtCJE,oBAYO,eAXLA,oBAIiB;IAJAC,EAAE,EAAEC,iBAAW;IAAEC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,MAAM;IAACC,EAAE,EAAC;yBAC7DR,oBAEwBS,6BAFLC,uBAAc,EAApBC,EAAE;yBAAfX,oBAEwB;MAFYY,GAAG,EAAED,EAAE;MACxCE,MAAM,KAAKF,EAAE;MACb,YAAU,EAAEA,EAAE;;+DAGnBT,oBAIiB;IAJAC,EAAE,EAAEC,iBAAW;IAAEC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAAEC,EAAE,EAAEG,sBAAa;IAAEF,EAAE,EAAC;yBACvER,oBAEwBS,6BAFLC,uBAAc,EAApBC,EAAE;yBAAfX,oBAEwB;MAFYY,GAAG,EAAED,EAAE;MACxCE,MAAM,KAAKF,EAAE;MACb,YAAU,EAAEA,EAAE;;iEAGrBT,oBAUE;IATCY,CAAC,EAAEV,kBAAY,GAAGA,kBAAY,CAACW,WAAW;IAC1CC,CAAC,EAAEZ,kBAAY,GAAGA,kBAAY,CAACW,WAAW;IAC1CE,EAAE,EAAEb,kBAAY,GAAGA,kBAAY,CAACc,YAAY;IAC5CC,EAAE,EAAEf,kBAAY,GAAGA,kBAAY,CAACc,YAAY;IAC7CE,IAAI,EAAC,aAAa;IACjB,cAAY,EAAEhB,kBAAY,GAAGA,kBAAY,CAACW,WAAW;IACrDM,MAAM,UAAUjB,iBAAW;IAC3BkB,KAAK,EAAEZ,kBAAS,OAAOA,kBAAS;IAChCa,MAAM,EAAEb,mBAAU,OAAOA,mBAAU;uCAEtCR,oBAKE;IAJC,cAAY,EAAEQ,sBAAa;IAC3B,kBAAgB,EAAEN,kBAAY,GAAGA,kBAAY,CAACoB,QAAQ,CAACC,IAAI;IAC3DJ,MAAM,UAAUX,yBAAgB;IAChCgB,MAAM,EAAEhB;uCAEXR,oBAOO;IANJmB,MAAM,EAAEjB,kBAAY,GAAGA,kBAAY,CAACuB,SAAS;IAC7CP,IAAI,EAAEhB,kBAAY,GAAGA,kBAAY,CAACuB,SAAS;IAC3Cb,CAAC,EAAEV,WAAK;IACRY,CAAC,EAAEZ,YAAM;sBAEPM,gBAAO","names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","id","$data","x1","y1","x2","y2","_Fragment","$options","lc","key","offset","x","borderWidth","y","rx","borderRadius","ry","fill","stroke","width","height","lineDash","join","points","textColor"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      gradientId1: `percent-pond-gradientId1-${timestamp}`,\n      gradientId2: `percent-pond-gradientId2-${timestamp}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const dom = $refs['percent-pond']\n\n      this.width = dom.clientWidth\n      this.height = dom.clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
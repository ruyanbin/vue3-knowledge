{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"fill\", \"x\", \"y\", \"width\", \"height\"];\nconst _hoisted_3 = [\"values\", \"dur\", \"begin\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-3\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: `${$data.svgWH[0]}px`,\n    height: `${$data.svgWH[1]}px`,\n    style: _normalizeStyle(`transform:scale(${$data.svgScale[0]},${$data.svgScale[1]});`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.points, (point, i) => {\n    return _openBlock(), _createElementBlock(\"rect\", {\n      key: i,\n      fill: $data.mergedColor[0],\n      x: point[0] - $data.halfPointSideLength,\n      y: point[1] - $data.halfPointSideLength,\n      width: $data.pointSideLength,\n      height: $data.pointSideLength\n    }, [Math.random() > 0.6 ? (_openBlock(), _createElementBlock(\"animate\", {\n      key: 0,\n      attributeName: \"fill\",\n      values: `${$data.mergedColor.join(';')}`,\n      dur: Math.random() + 1 + 's',\n      begin: Math.random() * 2,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_3)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 12 /* STYLE, PROPS */, _hoisted_1))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;uBACEA,oBAyBM;IAzBDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;qBACjCH,oBAuBM;IAvBAI,KAAK,KAAKD,WAAK;IAAUE,MAAM,KAAKF,WAAK;IAAUG,KAAK,qCAAqBH,cAAQ,OAAOA,cAAQ;yBAExGH,oBAoBWO,6BAnBYJ,YAAM,GAAnBK,KAAK,EAAEC,CAAC;yBAGhBT,oBAeO;WAjBDS,CAAC;MAGJC,IAAI,EAAEP,iBAAW;MACjBQ,CAAC,EAAEH,KAAK,MAAML,yBAAmB;MACjCS,CAAC,EAAEJ,KAAK,MAAML,yBAAmB;MACjCC,KAAK,EAAED,qBAAe;MACtBE,MAAM,EAAEF;QAGDU,IAAI,CAACC,MAAM,0BADnBd,oBAOE;;MALAe,aAAa,EAAC,MAAM;MACnBC,MAAM,KAAKb,iBAAW,CAACc,IAAI;MAC3BC,GAAG,EAAEL,IAAI,CAACC,MAAM;MAChBK,KAAK,EAAEN,IAAI,CAACC,MAAM;MACnBM,WAAW,EAAC","names":["_createElementBlock","class","ref","$data","width","height","style","_Fragment","point","i","fill","x","y","Math","random","attributeName","values","join","dur","begin","repeatCount"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration3/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-3\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n\n      <template\n        v-for=\"(point, i) in points\" \n        :key=\"i\"\n      >\n        <rect\n          :fill=\"mergedColor[0]\"\n          :x=\"point[0] - halfPointSideLength\"\n          :y=\"point[1] - halfPointSideLength\"\n          :width=\"pointSideLength\"\n          :height=\"pointSideLength\"\n        >\n          <animate\n            v-if=\"Math.random() > 0.6\"\n            attributeName=\"fill\"\n            :values=\"`${mergedColor.join(';')}`\"\n            :dur=\"Math.random() + 1 + 's'\"\n            :begin=\"Math.random() * 2\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration3',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const pointSideLength = 7\n\n    return {\n      ref: 'decoration-3',\n\n      svgWH: [300, 35],\n\n      svgScale: [1, 1],\n\n      rowNum: 2,\n      rowPoints: 25,\n\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n\n      points: [],\n\n      defaultColor: ['#7acaec', 'transparent'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defineComponent } from 'vue';\nimport registerMixin from '../../../mixins/register-component.mjs';\nvar script = defineComponent({\n  name: \"ElAmapMouseTool\",\n  mixins: [registerMixin],\n  props: {\n    type: {\n      type: String,\n      required: true,\n      default: \"marker\",\n      validator(value) {\n        return [\"marker\", \"circle\", \"rectangle\", \"polyline\", \"polygon\", \"measureArea\", \"rule\", \"rectZoomIn\", \"rectZoomOut\"].includes(value);\n      }\n    },\n    drawOptions: {\n      type: Object,\n      default: () => null\n    },\n    autoClear: {\n      type: Boolean,\n      default: true\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    tooltipTextMap: {\n      type: Object,\n      default: () => null\n    },\n    textOptions: {\n      type: Object,\n      default: () => null\n    }\n  },\n  emits: [\"draw\"],\n  data() {\n    return {\n      preMapCursor: \"\",\n      tipTexts: {\n        marker: \"\\u5355\\u51FB\\u5730\\u56FE\\u9009\\u62E9\\u70B9\\u4F4D\",\n        circle: \"\\u6309\\u4F4F\\u9F20\\u6807\\u5DE6\\u952E\\u62D6\\u62FD\\u7ED8\\u5236\\u5706\",\n        rectangle: \"\\u6309\\u4F4F\\u9F20\\u6807\\u5DE6\\u952E\\u62D6\\u62FD\\u7ED8\\u5236\\u77E9\\u5F62\",\n        polyline: \"\\u5355\\u51FB\\u5730\\u56FE\\u9009\\u62E9\\u62D0\\u70B9\\uFF0C\\u53CC\\u51FB\\u5730\\u56FE\\u5B8C\\u6210\\u6298\\u7EBF\\u7ED8\\u5236\",\n        polygon: \"\\u5355\\u51FB\\u5730\\u56FE\\u9009\\u62E9\\u62D0\\u70B9\\uFF0C\\u53CC\\u51FB\\u5730\\u56FE\\u5B8C\\u6210\\u591A\\u8FB9\\u5F62\\u7ED8\\u5236\",\n        measureArea: \"\\u5355\\u51FB\\u5730\\u56FE\\u9009\\u62E9\\u62D0\\u70B9\\uFF0C\\u53CC\\u51FB\\u5730\\u56FE\\u5B8C\\u6210\\u7ED8\\u5236\\u5E76\\u8BA1\\u7B97\\u9762\\u79EF\",\n        rule: \"\\u5355\\u51FB\\u5730\\u56FE\\u9009\\u62E9\\u62D0\\u70B9\\uFF0C\\u53F3\\u51FB\\u5730\\u56FE\\u5B8C\\u6210\\u7ED8\\u5236\\u5E76\\u8BA1\\u7B97\\u8DDD\\u79BB\",\n        rectZoomIn: \"\\u6309\\u4F4F\\u9F20\\u6807\\u5DE6\\u952E\\u62D6\\u62FD\\u7ED8\\u5236\\u77E9\\u5F62\\uFF0C\\u677E\\u5F00\\u5DE6\\u952E\\u653E\\u5927\\u5730\\u56FE\",\n        rectZoomOut: \"\\u6309\\u4F4F\\u9F20\\u6807\\u5DE6\\u952E\\u62D6\\u62FD\\u7ED8\\u5236\\u77E9\\u5F62\\uFF0C\\u677E\\u5F00\\u5DE6\\u952E\\u653E\\u5927\\u5730\\u56FE\"\n      }\n    };\n  },\n  methods: {\n    __initComponent() {\n      return new Promise(resolve => {\n        AMap.plugin([\"AMap.MouseTool\"], () => {\n          if (this.tooltipTextMap) {\n            Object.assign(this.tipTexts, this.tooltipTextMap);\n          }\n          this.$amapComponent = new AMap.MouseTool(this.$parentComponent);\n          this.createTooltip();\n          this.__type();\n          this.bindEvent();\n          this.preMapCursor = this.$parentComponent.getDefaultCursor();\n          this.$parentComponent.setDefaultCursor(\"crosshair\");\n          resolve();\n        });\n      });\n    },\n    __type() {\n      const type = this.type;\n      if (this.$amapComponent[type]) {\n        const options = this.drawOptions || {};\n        this.$amapComponent[type](options);\n        this.setText(this.tipTexts[type]);\n      }\n    },\n    createTooltip() {\n      if (this.showTooltip) {\n        const textOptions = this.textOptions || {};\n        textOptions.anchor = \"top-left\";\n        textOptions.clickable = false;\n        textOptions.bubble = true;\n        textOptions.offset = [10, 10];\n        this.$text = new AMap.Text(textOptions);\n        this.$parentComponent.add(this.$text);\n        this.$parentComponent.on(\"mousemove\", this.getMousePosition);\n      }\n    },\n    getMousePosition(e) {\n      const lnglat = e.lnglat;\n      this.$text.setPosition([lnglat.lng, lnglat.lat]);\n    },\n    setText(content) {\n      if (this.$text) {\n        this.$text.setText(content);\n      }\n    },\n    bindEvent() {\n      this.$amapComponent.on(\"draw\", e => {\n        const type = this.type;\n        let emitData;\n        if (type === \"marker\") {\n          emitData = e.obj.getPosition().toArray();\n        } else if (type === \"circle\") {\n          emitData = {\n            center: e.obj.getCenter().toArray(),\n            radius: e.obj.getRadius()\n          };\n        } else if (type === \"rectangle\") {\n          const bounds = e.obj.getBounds();\n          const southWest = bounds.getSouthWest();\n          const northEast = bounds.getNorthEast();\n          emitData = [southWest.toArray(), northEast.toArray()];\n        } else if (type === \"polyline\") {\n          const path = e.obj.getPath();\n          emitData = path.map(v => v.toArray());\n        } else if (type === \"polygon\") {\n          const path = e.obj.getPath();\n          emitData = path.map(v => v.toArray());\n        } else if (type === \"measureArea\") {\n          const path = e.obj.getPath().map(v => v.toArray());\n          emitData = AMap.GeometryUtil.ringArea(path);\n        } else if (type === \"rule\") {\n          const path = e.obj.getPath().map(v => v.toArray());\n          emitData = AMap.GeometryUtil.distanceOfLine(path);\n        } else if (type === \"rectZoomIn\") {\n          emitData = true;\n        } else if (type === \"rectZoomOut\") {\n          emitData = true;\n        }\n        this.$emit(\"draw\", emitData, e.obj);\n        if (this.autoClear) {\n          this.$$clear();\n          this.__type();\n        }\n      });\n    },\n    $$close(ifClear = true) {\n      if (this.$amapComponent) {\n        this.$amapComponent.close(ifClear);\n      }\n    },\n    $$open() {\n      this.__type();\n    },\n    $$clear() {\n      this.$$close(true);\n    },\n    destroyComponent() {\n      if (!this.parentInstance.isDestroy) {\n        this.$amapComponent.close(true);\n        this.$parentComponent.setDefaultCursor(this.preMapCursor);\n        if (this.$text) {\n          this.$parentComponent.off(\"mousemove\", this.getMousePosition);\n          this.$parentComponent.remove(this.$text);\n          this.$text = null;\n        }\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","mixins","registerMixin","props","type","required","default","validator","value","includes","drawOptions","autoClear","showTooltip","tooltipTextMap","textOptions","emits","data","preMapCursor","tipTexts","marker","circle","rectangle","polyline","polygon","measureArea","rule","rectZoomIn","rectZoomOut","methods","__initComponent","Promise","resolve","AMap","Object","$amapComponent","$parentComponent","setDefaultCursor","__type","createTooltip","anchor","clickable","bubble","Text","add","on","getMousePosition","e","lnglat","$text","lng","setText","content","bindEvent","emitData","obj","getPosition","center","getCenter","radius","southWest","bounds","northEast","map","v","path","getPath","GeometryUtil","ringArea","distanceOfLine","$$close","ifClear","close","$$open","$$clear","destroyComponent","isDestroy","off","remove","render"],"sources":["../../../../../../src/packages/util/MouseTool/MouseTool.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport registerMixin from '../../../mixins/register-component';\r\nimport type { PropType} from \"vue\";\r\ninterface TooltipText {\r\n  marker?: string\r\n  circle?: string\r\n  rectangle?: string\r\n  polyline?: string\r\n  polygon?: string\r\n  measureArea?: string\r\n  rule?: string\r\n  rectZoomIn?: string\r\n  rectZoomOut?: string\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapMouseTool',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true,\r\n      default: 'marker',\r\n      validator(value: string) {\r\n        return ['marker', 'circle', 'rectangle', 'polyline', 'polygon', 'measureArea', 'rule', 'rectZoomIn', 'rectZoomOut'].includes(value)\r\n      }\r\n    }, // 类型\r\n    drawOptions: {\r\n      type: Object,\r\n      default: () => null\r\n    }, // 绘制图层的属性\r\n    autoClear: {\r\n      type: Boolean,\r\n      default: true\r\n    }, // 是否绘制结束后自动清空图层\r\n    showTooltip: {\r\n      type: Boolean,\r\n      default: true\r\n    }, // 是否显示提示信息\r\n    tooltipTextMap: {\r\n      type: Object as PropType<TooltipText>,\r\n      default: () => null\r\n    }, // 提示信息的map\r\n    textOptions: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n  emits: ['draw'],\r\n  data() {\r\n    return {\r\n      preMapCursor: '',\r\n      tipTexts: {\r\n        marker: '单击地图选择点位',\r\n        circle: '按住鼠标左键拖拽绘制圆',\r\n        rectangle: '按住鼠标左键拖拽绘制矩形',\r\n        polyline: '单击地图选择拐点，双击地图完成折线绘制',\r\n        polygon: '单击地图选择拐点，双击地图完成多边形绘制',\r\n        measureArea: '单击地图选择拐点，双击地图完成绘制并计算面积',\r\n        rule: '单击地图选择拐点，右击地图完成绘制并计算距离',\r\n        rectZoomIn: '按住鼠标左键拖拽绘制矩形，松开左键放大地图',\r\n        rectZoomOut: '按住鼠标左键拖拽绘制矩形，松开左键放大地图',\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    __initComponent() {\r\n      return new Promise<void>((resolve) => {\r\n        AMap.plugin(['AMap.MouseTool'], () => {\r\n          if(this.tooltipTextMap){\r\n            Object.assign(this.tipTexts, this.tooltipTextMap);\r\n          }\r\n          this.$amapComponent = new AMap.MouseTool(this.$parentComponent);\r\n          this.createTooltip();\r\n          this.__type();\r\n          this.bindEvent();\r\n          this.preMapCursor = this.$parentComponent.getDefaultCursor();\r\n          this.$parentComponent.setDefaultCursor('crosshair');\r\n          resolve();\r\n        });\r\n      });\r\n    },\r\n    __type(){\r\n      const type = this.type;\r\n      if(this.$amapComponent[type]){\r\n        const options = this.drawOptions || {};\r\n        this.$amapComponent[type](options);\r\n        this.setText(this.tipTexts[type]);\r\n      }\r\n    },\r\n    createTooltip(){\r\n      if(this.showTooltip){\r\n        const textOptions = this.textOptions || {};\r\n        textOptions.anchor = 'top-left';\r\n        textOptions.clickable= false;\r\n        textOptions.bubble = true;\r\n        textOptions.offset = [10, 10]\r\n        this.$text = new AMap.Text(textOptions);\r\n        this.$parentComponent.add(this.$text);\r\n        this.$parentComponent.on('mousemove',this.getMousePosition)\r\n      }\r\n    },\r\n    getMousePosition(e){\r\n      const lnglat = e.lnglat;\r\n      this.$text.setPosition([lnglat.lng, lnglat.lat])\r\n    },\r\n    setText(content: string){\r\n      if(this.$text){\r\n        this.$text.setText(content);\r\n      }\r\n    },\r\n    bindEvent(){\r\n      this.$amapComponent.on('draw', (e: {obj: any,type: string}) => {\r\n        const type = this.type;\r\n        let emitData;\r\n        if(type === 'marker'){\r\n          emitData = e.obj.getPosition().toArray();\r\n        } else if (type === 'circle'){\r\n          emitData = {\r\n            center: e.obj.getCenter().toArray(),\r\n            radius: e.obj.getRadius()\r\n          }\r\n        } else if (type === 'rectangle'){\r\n          const bounds = e.obj.getBounds();\r\n          const southWest = bounds.getSouthWest();\r\n          const northEast = bounds.getNorthEast();\r\n          emitData = [southWest.toArray(), northEast.toArray()]\r\n        } else if (type === 'polyline'){\r\n          const path = e.obj.getPath();\r\n          emitData = path.map(v => v.toArray())\r\n        } else if (type === 'polygon'){\r\n          const path = e.obj.getPath();\r\n          emitData = path.map(v => v.toArray())\r\n        } else if (type === 'measureArea'){\r\n          const path = e.obj.getPath().map(v => v.toArray());\r\n          emitData = AMap.GeometryUtil.ringArea(path);\r\n        } else if (type === 'rule'){\r\n          const path = e.obj.getPath().map(v => v.toArray());\r\n          emitData = AMap.GeometryUtil.distanceOfLine(path);\r\n        } else if (type === 'rectZoomIn'){\r\n          emitData = true\r\n        } else if (type === 'rectZoomOut'){\r\n          emitData = true\r\n        }\r\n        this.$emit('draw', emitData, e.obj)\r\n        if(this.autoClear){\r\n          this.$$clear();\r\n          this.__type();\r\n        }\r\n      })\r\n    },\r\n    $$close(ifClear = true){\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.close(ifClear);\r\n      }\r\n    },\r\n    $$open(){\r\n      this.__type();\r\n    },\r\n    $$clear(){\r\n      this.$$close(true);\r\n    },\r\n    destroyComponent() {\r\n      if(!this.parentInstance.isDestroy){\r\n        this.$amapComponent.close(true);\r\n        this.$parentComponent.setDefaultCursor(this.preMapCursor);\r\n        if(this.$text){\r\n          this.$parentComponent.off('mousemove', this.getMousePosition);\r\n          this.$parentComponent.remove(this.$text);\r\n          this.$text = null;\r\n        }\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    }\r\n  },\r\n  render(){\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
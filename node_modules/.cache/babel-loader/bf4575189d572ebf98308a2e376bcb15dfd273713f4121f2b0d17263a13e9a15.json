{"ast":null,"code":"import { openBlock, createElementBlock, createElementVNode, renderSlot } from 'vue';\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"none\"\n  }\n};\nconst _hoisted_2 = {\n  ref: \"info\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"default\")], 512)]);\n}\nexport { render };","map":{"version":3,"mappings":";AACO;EAAAA;IAAsB;EAAA;AAAA;AACpB;EAAAC,GAAI;AAAA;;EADX,sCAIK,QAJLC,UAIK,GAHHC,mBAEK,OAFLC,UAEK,GADHC,WAAOC","names":["style","ref","_hoisted_1","_createElementVNode","_hoisted_2","_renderSlot","_ctx"],"sources":["../../../../../../src/packages/infoWindow/InfoWindow/InfoWindow.vue?vue&type=template&id=759c56f7&lang.js"],"sourcesContent":["<template>\r\n  <div style=\"display: none;\">\r\n    <div ref=\"info\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script lang=\"ts\">\r\nimport {defineComponent} from 'vue';\r\nimport registerMixin from '../../../mixins/register-component';\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapInfoWindow',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    isCustom: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 是否自定义窗体。设为true时，信息窗体外框及内容完全按照content所设的值添加（默认为false，即在系统默认的信息窗体外框中显示content内容）\r\n    autoMove: {\r\n      type: Boolean,\r\n      default: true\r\n    }, // 是否自动调整窗体到视野内（当信息窗体超出视野范围时，通过该属性设置是否自动平移地图，使信息窗体完全显示）\r\n    avoid: {\r\n      type: Array\r\n    }, // autoMove 为 true 时，自动平移到视野内后的上右下左的避让宽度。默认值： [20, 20, 20, 20]\r\n    closeWhenClickMap: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 点标记显示位置偏移量，默认值为 [0,0] 。Marker指定position后，默认以marker左上角位置为基准点（若设置了anchor，则以anchor设置位置为基准点），对准所给定的position位置，若需使marker指定位置对准在position处，需根据marker的尺寸设置一定的偏移量。\r\n    content: {\r\n      type: [String, Object]\r\n    }, // 显示内容，可以是HTML要素字符串或者HTMLElement对象\r\n    size: {\r\n      type: Array\r\n    }, // 信息窗体尺寸（isCustom为true时，该属性无效）\r\n    anchor: {\r\n      type: String\r\n    }, // 信息窗体锚点。默认值：'bottom-center'。可选值：'top-left'|'top-center'|'top-right'|'middle-left'|'center'|'middle-right'|'bottom-left'|'bottom-center'|'bottom-right'\r\n    offset: {\r\n      type: Array\r\n    }, // 信息窗体显示位置偏移量。默认基准点为信息窗体的底部中心。默认值: [0, 0]\r\n    position: {\r\n      type: Array\r\n    } // 信息窗体显示基点位置\r\n  },\r\n  emits: ['update:visible'],\r\n  data() {\r\n    return {\r\n      converters: {\r\n      }\r\n    };\r\n  },\r\n  unmounted() {\r\n    if(this.$amapComponent){\r\n      this.$amapComponent.close();\r\n    }\r\n  },\r\n  updated() {\r\n    if(!this.content && this.$amapComponent){\r\n      this.$amapComponent.setContent(this.$refs.info);\r\n    }\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      if (!options.content) {\r\n        options.content = this.getSlotContent();\r\n      }\r\n      this.$amapComponent = new AMap.InfoWindow(options);\r\n      this.$amapComponent.on('close', () => {\r\n        this.$emit('update:visible', false);\r\n      });\r\n      if (this.visible !== false) {\r\n        this.$amapComponent.open(this.$parentComponent, this.position);\r\n      }\r\n      if(!this.content && this.$amapComponent){\r\n        // 观察器的配置（需要观察什么变动）\r\n        const config = { attributes: true, childList: true, subtree: true };\r\n        // 创建一个观察器实例并传入回调函数\r\n        const observer = new MutationObserver(() => {\r\n          this.$amapComponent.setContent(this.getSlotContent());\r\n        });\r\n        observer.observe(this.$refs.info as Node, config);\r\n        this.observer = observer;\r\n      }\r\n    },\r\n    getSlotContent(){\r\n      return (this.$refs.info as HTMLDivElement);\r\n    },\r\n    destroyComponent() {\r\n      if(this.observer){\r\n        this.observer.disconnect();\r\n        this.observer = null;\r\n      }\r\n      if(this.$amapComponent){\r\n        if(this.$amapComponent.getIsOpen()){\r\n          this.$amapComponent.close();\r\n        }\r\n        this.$amapComponent = null;\r\n        this.$parentComponent = null;\r\n      }\r\n    },\r\n    __position(position){\r\n      if (this.visible) {\r\n        this.$amapComponent.open(this.$parentComponent, position);\r\n      } else {\r\n        this.$amapComponent.setPosition(position);\r\n      }\r\n    },\r\n    __visible(flag) {\r\n      // fixed Amap info-window reopen\r\n      const position = this.$amapComponent.getPosition();\r\n      if (position) {\r\n        flag === false ? this.$amapComponent.close() : this.$amapComponent.open(this.$parentComponent, [position.lng, position.lat]);\r\n      }\r\n    },\r\n  },\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"fill\", \"x\", \"y\", \"width\", \"height\"];\nconst _hoisted_3 = [\"values\", \"dur\"];\nconst _hoisted_4 = [\"values\", \"dur\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-6\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: `${$data.svgWH[0]}px`,\n    height: `${$data.svgWH[1]}px`,\n    style: _normalizeStyle(`transform:scale(${$data.svgScale[0]},${$data.svgScale[1]});`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.points, (point, i) => {\n    return _openBlock(), _createElementBlock(\"rect\", {\n      key: i,\n      fill: $data.mergedColor[Math.random() > 0.5 ? 0 : 1],\n      x: point[0] - $data.halfRectWidth,\n      y: point[1] - $data.heights[i] / 2,\n      width: $data.rectWidth,\n      height: $data.heights[i]\n    }, [_createElementVNode(\"animate\", {\n      attributeName: \"y\",\n      values: `${point[1] - $data.minHeights[i] / 2};${point[1] - $data.heights[i] / 2};${point[1] - $data.minHeights[i] / 2}`,\n      dur: `${$data.randoms[i]}s`,\n      keyTimes: \"0;0.5;1\",\n      calcMode: \"spline\",\n      keySplines: \"0.42,0,0.58,1;0.42,0,0.58,1\",\n      begin: \"0s\",\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"animate\", {\n      attributeName: \"height\",\n      values: `${$data.minHeights[i]};${$data.heights[i]};${$data.minHeights[i]}`,\n      dur: `${$data.randoms[i]}s`,\n      keyTimes: \"0;0.5;1\",\n      calcMode: \"spline\",\n      keySplines: \"0.42,0,0.58,1;0.42,0,0.58,1\",\n      begin: \"0s\",\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_4)], 8 /* PROPS */, _hoisted_2);\n  }), 256 /* UNKEYED_FRAGMENT */))], 12 /* STYLE, PROPS */, _hoisted_1))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;uBACEA,oBAoCM;IApCDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;qBACjCH,oBAkCM;IAlCAI,KAAK,KAAKD,WAAK;IAAUE,MAAM,KAAKF,WAAK;IAAUG,KAAK,qCAAqBH,cAAQ,OAAOA,cAAQ;yBACxGH,oBAgCWO,6BA/BYJ,YAAM,GAAnBK,KAAK,EAAEC,CAAC;yBAEhBT,oBA4BO;MA3BJU,GAAG,EAAED,CAAC;MACNE,IAAI,EAAER,iBAAW,CAACS,IAAI,CAACC,MAAM;MAC7BC,CAAC,EAAEN,KAAK,MAAML,mBAAa;MAC3BY,CAAC,EAAEP,KAAK,MAAML,aAAO,CAACM,CAAC;MACvBL,KAAK,EAAED,eAAS;MAChBE,MAAM,EAAEF,aAAO,CAACM,CAAC;QAElBO,oBASE;MARAC,aAAa,EAAC,GAAG;MAChBC,MAAM,KAAKV,KAAK,MAAML,gBAAU,CAACM,CAAC,SAASD,KAAK,MAAML,aAAO,CAACM,CAAC,SAASD,KAAK,MAAML,gBAAU,CAACM,CAAC;MAC/FU,GAAG,KAAKhB,aAAO,CAACM,CAAC;MAClBW,QAAQ,EAAC,SAAS;MAClBC,QAAQ,EAAC,QAAQ;MACjBC,UAAU,EAAC,6BAA6B;MACxCC,KAAK,EAAC,IAAI;MACVC,WAAW,EAAC;yCAEdR,oBASE;MARAC,aAAa,EAAC,QAAQ;MACrBC,MAAM,KAAKf,gBAAU,CAACM,CAAC,KAAKN,aAAO,CAACM,CAAC,KAAKN,gBAAU,CAACM,CAAC;MACtDU,GAAG,KAAKhB,aAAO,CAACM,CAAC;MAClBW,QAAQ,EAAC,SAAS;MAClBC,QAAQ,EAAC,QAAQ;MACjBC,UAAU,EAAC,6BAA6B;MACxCC,KAAK,EAAC,IAAI;MACVC,WAAW,EAAC","names":["_createElementBlock","class","ref","$data","width","height","style","_Fragment","point","i","key","fill","Math","random","x","y","_createElementVNode","attributeName","values","dur","keyTimes","calcMode","keySplines","begin","repeatCount"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration6/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-6\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n      <template\n        v-for=\"(point, i) in points\"\n      >\n        <rect\n          :key=\"i\"\n          :fill=\"mergedColor[Math.random() > 0.5 ? 0 : 1]\"\n          :x=\"point[0] - halfRectWidth\"\n          :y=\"point[1] - heights[i] / 2\"\n          :width=\"rectWidth\"\n          :height=\"heights[i]\"\n        >\n          <animate\n            attributeName=\"y\"\n            :values=\"`${point[1] - minHeights[i] / 2};${point[1] - heights[i] / 2};${point[1] - minHeights[i] / 2}`\"\n            :dur=\"`${randoms[i]}s`\"\n            keyTimes=\"0;0.5;1\"\n            calcMode=\"spline\"\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\n            begin=\"0s\"\n            repeatCount=\"indefinite\"\n          />\n          <animate\n            attributeName=\"height\"\n            :values=\"`${minHeights[i]};${heights[i]};${minHeights[i]}`\"\n            :dur=\"`${randoms[i]}s`\"\n            keyTimes=\"0;0.5;1\"\n            calcMode=\"spline\"\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\n            begin=\"0s\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { randomExtend } from '../../../util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const rectWidth = 7\n\n    return {\n      ref: 'decoration-6',\n\n      svgWH: [300, 35],\n\n      svgScale: [1, 1],\n\n      rowNum: 1,\n      rowPoints: 40,\n\n      rectWidth,\n      halfRectWidth: rectWidth / 2,\n\n      points: [],\n      heights: [],\n      minHeights: [],\n      randoms: [],\n\n      defaultColor: ['#7acaec', '#7acaec'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n      const heights = this.heights = new Array(rowNum * rowPoints)\n        .fill(0).map(foo =>\n          Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h))\n\n      this.minHeights = new Array(rowNum * rowPoints)\n        .fill(0).map((foo, i) => heights[i] * Math.random())\n\n      this.randoms = new Array(rowNum * rowPoints)\n        .fill(0).map(foo => Math.random() + 1.5)\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
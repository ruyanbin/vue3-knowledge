{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isPlainObject as e } from \"is-plain-object\";\nfunction t() {\n  return t = Object.assign ? Object.assign.bind() : function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n    }\n    return e;\n  }, t.apply(this, arguments);\n}\nfunction n(e, t) {\n  if (null == e) return {};\n  var n,\n    r,\n    i = {},\n    o = Object.keys(e);\n  for (r = 0; r < o.length; r++) t.indexOf(n = o[r]) >= 0 || (i[n] = e[n]);\n  return i;\n}\nconst r = {\n    silent: !1,\n    logLevel: \"warn\"\n  },\n  i = [\"validator\"],\n  o = Object.prototype,\n  a = o.toString,\n  s = o.hasOwnProperty,\n  u = /^\\s*function (\\w+)/;\nfunction l(e) {\n  var t;\n  const n = null !== (t = null == e ? void 0 : e.type) && void 0 !== t ? t : e;\n  if (n) {\n    const e = n.toString().match(u);\n    return e ? e[1] : \"\";\n  }\n  return \"\";\n}\nconst c = e,\n  d = e => e;\nlet f = d;\nif (\"production\" !== process.env.NODE_ENV) {\n  const e = \"undefined\" != typeof console;\n  f = e ? function (e, t = r.logLevel) {\n    !1 === r.silent && console[t](`[VueTypes warn]: ${e}`);\n  } : d;\n}\nconst p = (e, t) => s.call(e, t),\n  y = Number.isInteger || function (e) {\n    return \"number\" == typeof e && isFinite(e) && Math.floor(e) === e;\n  },\n  v = Array.isArray || function (e) {\n    return \"[object Array]\" === a.call(e);\n  },\n  h = e => \"[object Function]\" === a.call(e),\n  b = (e, t) => c(e) && p(e, \"_vueTypes_name\") && (!t || e._vueTypes_name === t),\n  g = e => c(e) && (p(e, \"type\") || [\"_vueTypes_name\", \"validator\", \"default\", \"required\"].some(t => p(e, t)));\nfunction O(e, t) {\n  return Object.defineProperty(e.bind(t), \"__original\", {\n    value: e\n  });\n}\nfunction m(e, t, n = !1) {\n  let r,\n    i = !0,\n    o = \"\";\n  r = c(e) ? e : {\n    type: e\n  };\n  const a = b(r) ? r._vueTypes_name + \" - \" : \"\";\n  if (g(r) && null !== r.type) {\n    if (void 0 === r.type || !0 === r.type) return i;\n    if (!r.required && void 0 === t) return i;\n    v(r.type) ? (i = r.type.some(e => !0 === m(e, t, !0)), o = r.type.map(e => l(e)).join(\" or \")) : (o = l(r), i = \"Array\" === o ? v(t) : \"Object\" === o ? c(t) : \"String\" === o || \"Number\" === o || \"Boolean\" === o || \"Function\" === o ? function (e) {\n      if (null == e) return \"\";\n      const t = e.constructor.toString().match(u);\n      return t ? t[1] : \"\";\n    }(t) === o : t instanceof r.type);\n  }\n  if (!i) {\n    const e = `${a}value \"${t}\" should be of type \"${o}\"`;\n    return !1 === n ? (f(e), !1) : e;\n  }\n  if (p(r, \"validator\") && h(r.validator)) {\n    const e = f,\n      o = [];\n    if (f = e => {\n      o.push(e);\n    }, i = r.validator(t), f = e, !i) {\n      const e = (o.length > 1 ? \"* \" : \"\") + o.join(\"\\n* \");\n      return o.length = 0, !1 === n ? (f(e), i) : e;\n    }\n  }\n  return i;\n}\nfunction j(e, t) {\n  const n = Object.defineProperties(t, {\n      _vueTypes_name: {\n        value: e,\n        writable: !0\n      },\n      isRequired: {\n        get() {\n          return this.required = !0, this;\n        }\n      },\n      def: {\n        value(e) {\n          return void 0 === e ? this.type === Boolean || Array.isArray(this.type) && this.type.includes(Boolean) ? void (this.default = void 0) : (p(this, \"default\") && delete this.default, this) : h(e) || !0 === m(this, e, !0) ? (this.default = v(e) ? () => [...e] : c(e) ? () => Object.assign({}, e) : e, this) : (f(`${this._vueTypes_name} - invalid default value: \"${e}\"`), this);\n        }\n      }\n    }),\n    {\n      validator: r\n    } = n;\n  return h(r) && (n.validator = O(r, n)), n;\n}\nfunction _(e, t) {\n  const n = j(e, t);\n  return Object.defineProperty(n, \"validate\", {\n    value(e) {\n      return h(this.validator) && f(`${this._vueTypes_name} - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(this)}`), this.validator = O(e, this), this;\n    }\n  });\n}\nfunction T(e, t, r) {\n  const o = function (e) {\n    const t = {};\n    return Object.getOwnPropertyNames(e).forEach(n => {\n      t[n] = Object.getOwnPropertyDescriptor(e, n);\n    }), Object.defineProperties({}, t);\n  }(t);\n  if (o._vueTypes_name = e, !c(r)) return o;\n  const {\n      validator: a\n    } = r,\n    s = n(r, i);\n  if (h(a)) {\n    let {\n      validator: e\n    } = o;\n    e && (e = null !== (l = (u = e).__original) && void 0 !== l ? l : u), o.validator = O(e ? function (t) {\n      return e.call(this, t) && a.call(this, t);\n    } : a, o);\n  }\n  var u, l;\n  return Object.assign(o, s);\n}\nfunction $(e) {\n  return e.replace(/^(?!\\s*$)/gm, \"  \");\n}\nconst w = () => _(\"any\", {}),\n  x = () => _(\"function\", {\n    type: Function\n  }),\n  P = () => _(\"boolean\", {\n    type: Boolean\n  }),\n  A = () => _(\"string\", {\n    type: String\n  }),\n  E = () => _(\"number\", {\n    type: Number\n  }),\n  S = () => _(\"array\", {\n    type: Array\n  }),\n  N = () => _(\"object\", {\n    type: Object\n  }),\n  V = () => j(\"integer\", {\n    type: Number,\n    validator(e) {\n      const t = y(e);\n      return !1 === t && f(`integer - \"${e}\" is not an integer`), t;\n    }\n  }),\n  q = () => j(\"symbol\", {\n    validator(e) {\n      const t = \"symbol\" == typeof e;\n      return !1 === t && f(`symbol - invalid value \"${e}\"`), t;\n    }\n  }),\n  k = () => Object.defineProperty({\n    type: null,\n    validator(e) {\n      const t = null === e;\n      return !1 === t && f(\"nullable - value should be null\"), t;\n    }\n  }, \"_vueTypes_name\", {\n    value: \"nullable\"\n  });\nfunction D(e, t = \"custom validation failed\") {\n  if (\"function\" != typeof e) throw new TypeError(\"[VueTypes error]: You must provide a function as argument\");\n  return j(e.name || \"<<anonymous function>>\", {\n    type: null,\n    validator(n) {\n      const r = e(n);\n      return r || f(`${this._vueTypes_name} - ${t}`), r;\n    }\n  });\n}\nfunction L(e) {\n  if (!v(e)) throw new TypeError(\"[VueTypes error]: You must provide an array as argument.\");\n  const t = `oneOf - value should be one of \"${e.map(e => \"symbol\" == typeof e ? e.toString() : e).join('\", \"')}\".`,\n    n = {\n      validator(n) {\n        const r = -1 !== e.indexOf(n);\n        return r || f(t), r;\n      }\n    };\n  if (-1 === e.indexOf(null)) {\n    const t = e.reduce((e, t) => {\n      if (null != t) {\n        const n = t.constructor;\n        -1 === e.indexOf(n) && e.push(n);\n      }\n      return e;\n    }, []);\n    t.length > 0 && (n.type = t);\n  }\n  return j(\"oneOf\", n);\n}\nfunction B(e) {\n  if (!v(e)) throw new TypeError(\"[VueTypes error]: You must provide an array as argument\");\n  let t = !1,\n    n = !1,\n    r = [];\n  for (let i = 0; i < e.length; i += 1) {\n    const o = e[i];\n    if (g(o)) {\n      if (h(o.validator) && (t = !0), b(o, \"oneOf\") && o.type) {\n        r = r.concat(o.type);\n        continue;\n      }\n      if (b(o, \"nullable\")) {\n        n = !0;\n        continue;\n      }\n      if (!0 === o.type || !o.type) {\n        f('oneOfType - invalid usage of \"true\" and \"null\" as types.');\n        continue;\n      }\n      r = r.concat(o.type);\n    } else r.push(o);\n  }\n  r = r.filter((e, t) => r.indexOf(e) === t);\n  const i = !1 === n && r.length > 0 ? r : null;\n  return j(\"oneOfType\", t ? {\n    type: i,\n    validator(t) {\n      const n = [],\n        r = e.some(e => {\n          const r = m(e, t, !0);\n          return \"string\" == typeof r && n.push(r), !0 === r;\n        });\n      return r || f(`oneOfType - provided value does not match any of the ${n.length} passed-in validators:\\n${$(n.join(\"\\n\"))}`), r;\n    }\n  } : {\n    type: i\n  });\n}\nfunction F(e) {\n  return j(\"arrayOf\", {\n    type: Array,\n    validator(t) {\n      let n = \"\";\n      const r = t.every(t => (n = m(e, t, !0), !0 === n));\n      return r || f(`arrayOf - value validation error:\\n${$(n)}`), r;\n    }\n  });\n}\nfunction Y(e) {\n  return j(\"instanceOf\", {\n    type: e\n  });\n}\nfunction I(e) {\n  return j(\"objectOf\", {\n    type: Object,\n    validator(t) {\n      let n = \"\";\n      const r = Object.keys(t).every(r => (n = m(e, t[r], !0), !0 === n));\n      return r || f(`objectOf - value validation error:\\n${$(n)}`), r;\n    }\n  });\n}\nfunction J(e) {\n  const t = Object.keys(e),\n    n = t.filter(t => {\n      var n;\n      return !(null === (n = e[t]) || void 0 === n || !n.required);\n    }),\n    r = j(\"shape\", {\n      type: Object,\n      validator(r) {\n        if (!c(r)) return !1;\n        const i = Object.keys(r);\n        if (n.length > 0 && n.some(e => -1 === i.indexOf(e))) {\n          const e = n.filter(e => -1 === i.indexOf(e));\n          return f(1 === e.length ? `shape - required property \"${e[0]}\" is not defined.` : `shape - required properties \"${e.join('\", \"')}\" are not defined.`), !1;\n        }\n        return i.every(n => {\n          if (-1 === t.indexOf(n)) return !0 === this._vueTypes_isLoose || (f(`shape - shape definition does not include a \"${n}\" property. Allowed keys: \"${t.join('\", \"')}\".`), !1);\n          const i = m(e[n], r[n], !0);\n          return \"string\" == typeof i && f(`shape - \"${n}\" property validation error:\\n ${$(i)}`), !0 === i;\n        });\n      }\n    });\n  return Object.defineProperty(r, \"_vueTypes_isLoose\", {\n    writable: !0,\n    value: !1\n  }), Object.defineProperty(r, \"loose\", {\n    get() {\n      return this._vueTypes_isLoose = !0, this;\n    }\n  }), r;\n}\nconst M = [\"name\", \"validate\", \"getter\"],\n  R = /*#__PURE__*/(() => {\n    var e;\n    return (e = class {\n      static get any() {\n        return w();\n      }\n      static get func() {\n        return x().def(this.defaults.func);\n      }\n      static get bool() {\n        return void 0 === this.defaults.bool ? P() : P().def(this.defaults.bool);\n      }\n      static get string() {\n        return A().def(this.defaults.string);\n      }\n      static get number() {\n        return E().def(this.defaults.number);\n      }\n      static get array() {\n        return S().def(this.defaults.array);\n      }\n      static get object() {\n        return N().def(this.defaults.object);\n      }\n      static get integer() {\n        return V().def(this.defaults.integer);\n      }\n      static get symbol() {\n        return q();\n      }\n      static get nullable() {\n        return k();\n      }\n      static extend(e) {\n        if (f(\"VueTypes.extend is deprecated. Use the ES6+ method instead. See https://dwightjack.github.io/vue-types/advanced/extending-vue-types.html#extending-namespaced-validators-in-es6 for details.\"), v(e)) return e.forEach(e => this.extend(e)), this;\n        const {\n            name: t,\n            validate: r = !1,\n            getter: i = !1\n          } = e,\n          o = n(e, M);\n        if (p(this, t)) throw new TypeError(`[VueTypes error]: Type \"${t}\" already defined`);\n        const {\n          type: a\n        } = o;\n        if (b(a)) return delete o.type, Object.defineProperty(this, t, i ? {\n          get: () => T(t, a, o)\n        } : {\n          value(...e) {\n            const n = T(t, a, o);\n            return n.validator && (n.validator = n.validator.bind(n, ...e)), n;\n          }\n        });\n        let s;\n        return s = i ? {\n          get() {\n            const e = Object.assign({}, o);\n            return r ? _(t, e) : j(t, e);\n          },\n          enumerable: !0\n        } : {\n          value(...e) {\n            const n = Object.assign({}, o);\n            let i;\n            return i = r ? _(t, n) : j(t, n), n.validator && (i.validator = n.validator.bind(i, ...e)), i;\n          },\n          enumerable: !0\n        }, Object.defineProperty(this, t, s);\n      }\n    }).defaults = {}, e.sensibleDefaults = void 0, e.config = r, e.custom = D, e.oneOf = L, e.instanceOf = Y, e.oneOfType = B, e.arrayOf = F, e.objectOf = I, e.shape = J, e.utils = {\n      validate: (e, t) => !0 === m(t, e, !0),\n      toType: (e, t, n = !1) => n ? _(e, t) : j(e, t)\n    }, e;\n  })();\nfunction U(e = {\n  func: () => {},\n  bool: !0,\n  string: \"\",\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0\n}) {\n  var n;\n  return (n = class extends R {\n    static get sensibleDefaults() {\n      return t({}, this.defaults);\n    }\n    static set sensibleDefaults(n) {\n      this.defaults = !1 !== n ? t({}, !0 !== n ? n : e) : {};\n    }\n  }).defaults = t({}, e), n;\n}\nclass z extends U() {}\nexport { w as any, S as array, F as arrayOf, P as bool, r as config, U as createTypes, D as custom, z as default, T as fromType, x as func, Y as instanceOf, V as integer, k as nullable, E as number, N as object, I as objectOf, L as oneOf, B as oneOfType, J as shape, A as string, q as symbol, j as toType, _ as toValidableType, m as validateType };","map":{"version":3,"mappings":"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","names":["config","silent","logLevel","_excluded","ObjProto","Object","prototype","toString","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","fn","type","match","isPlainObject","_isPlainObject","identity","arg","process","env","NODE_ENV","hasConsole","warn","msg","level","console","has","obj","prop","call","isInteger","Number","value","isFinite","Math","floor","isArray","Array","isFunction","isVueTypeDef","name","_vueTypes_name","isComplexType","some","k","ctx","defineProperty","bind","validateType","valid","expectedType","typeToCheck","namePrefix","undefined","required","map","getType","join","constructor","getNativeType","validator","oldWarn","warnLog","push","length","toType","defineProperties","writable","isRequired","get","this","def","Boolean","includes","default","assign","bindTo","toValidableType","JSON","stringify","fromType","source","props","copy","descriptors","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","clone","rest","prevValidator","_fn$__original","__original","unwrap","indent","string","replace","any","func","Function","bool","String","number","array","object","integer","res","symbol","nullable","custom","validatorFn","warnMsg","TypeError","oneOf","arr","v","base","indexOf","reduce","ret","constr","n","r","i","hasCustomValidators","nativeChecks","concat","hasNullable","filter","t","typeProp","err","arrayOf","values","every","vResult","instanceOf","instanceConstructor","objectOf","keys","requiredKeys","valueKeys","req","missing","_vueTypes_isLoose","R","defaults","static","p","extend","validate","getter","opts","args","descriptor","typeOptions","enumerable","sensibleDefaults","_class","oneOfType","shape","utils","validable","createTypes","defs","BaseVueTypes","VueTypes"],"sources":["../src/config.ts","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts"],"sourcesContent":["import { VueTypesConfig } from './types'\n\nexport const config: VueTypesConfig = {\n  silent: false,\n  logLevel: 'warn',\n}\n","import { isPlainObject as _isPlainObject } from 'is-plain-object'\nimport { config } from './config'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n  VueTypesConfig,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string, level?: VueTypesConfig['logLevel']) => string | void =\n  identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg: string, level = config.logLevel) {\n        if (config.silent === false) {\n          console[level](`[VueTypes warn]: ${msg}`)\n        }\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = <T extends Function>(value: unknown): value is T =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n * @param name - Optional validator name\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n  name?: string,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) &&\n  has(value, '_vueTypes_name') &&\n  (!name || value._vueTypes_name === name)\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx) as WrappedFn, '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog: string[] = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj as VueTypeDef<T>, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined) {\n          if (\n            this.type === Boolean ||\n            (Array.isArray(this.type) && this.type.includes(Boolean))\n          ) {\n            this.default = undefined\n            return\n          }\n          if (has(this, 'default')) {\n            delete this.default\n          }\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors) as T\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator) as (_v: any) => boolean\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              prevValidator!.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n","import { toType, toValidableType, isInteger, warn } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = <T = any>() => toValidableType<T>('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = <T extends string = string>() =>\n  toValidableType<T>('string', {\n    type: String as unknown as PropType<T>,\n  })\n\nexport const number = <T extends number = number>() =>\n  toValidableType<T>('number', {\n    type: Number as unknown as PropType<T>,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = <T extends number = number>() =>\n  toType<T>('integer', {\n    type: Number as unknown as PropType<T>,\n    validator(value) {\n      const res = isInteger(value)\n      if (res === false) {\n        warn(`integer - \"${value}\" is not an integer`)\n      }\n      return res\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value: unknown) {\n      const res = typeof value === 'symbol'\n      if (res === false) {\n        warn(`symbol - invalid value \"${value}\"`)\n      }\n      return res\n    },\n  })\n\nexport const nullable = () =>\n  Object.defineProperty(\n    {\n      type: null as unknown as PropType<null>,\n      validator(value: unknown) {\n        const res = value === null\n        if (res === false) {\n          warn(`nullable - value should be null`)\n        }\n        return res\n      },\n    },\n    '_vueTypes_name',\n    { value: 'nullable' },\n  )\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef, PropType } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    type: null as unknown as PropType<T>,\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop, PropOptions } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<D, T extends readonly D[] = readonly D[]>(\n  arr: T,\n) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr\n    .map((v: any) => (typeof v === 'symbol' ? v.toString() : v))\n    .join('\", \"')}\".`\n  const base: PropOptions<T[number]> = {\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  }\n  if (arr.indexOf(null) === -1) {\n    const type = arr.reduce((ret, v) => {\n      if (v !== null && v !== undefined) {\n        const constr = (v as any).constructor\n        ret.indexOf(constr) === -1 && ret.push(constr)\n      }\n      return ret\n    }, [] as Prop<T[number]>[])\n\n    if (type.length > 0) {\n      base.type = type\n    }\n  }\n\n  return toType<T[number]>('oneOf', base)\n}\n","import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  D extends V,\n  U extends VueProp<any> | Prop<any> = any,\n  V = InferType<U>,\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n  let hasNullable = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (isVueTypeDef<V>(type, 'oneOf') && type.type) {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isVueTypeDef<V>(type, 'nullable')) {\n        hasNullable = true\n        continue\n      }\n      if (type.type === true || !type.type) {\n        warn('oneOfType - invalid usage of \"true\" and \"null\" as types.')\n        continue\n      }\n      nativeChecks = nativeChecks.concat(type.type)\n    } else {\n      nativeChecks.push(type as Prop<V>)\n    }\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  const typeProp =\n    hasNullable === false && nativeChecks.length > 0 ? nativeChecks : null\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<D>('oneOfType', {\n      type: typeProp as unknown as PropType<D>,\n    })\n  }\n\n  return toType<D>('oneOfType', {\n    type: typeProp as unknown as PropType<D>,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const res = validateType(type, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean = ''\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean = ''\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(obj: {\n  [K in keyof T]: Prop<T[K]> | VueProp<T[K]>\n}): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n  warn,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  nullable,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\nimport { config } from './config'\n\nconst BaseVueTypes = /*#__PURE__*/ (() =>\n  class BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = {}\n\n    static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n    static config = config\n\n    static get any() {\n      return any()\n    }\n    static get func() {\n      return func().def(this.defaults.func)\n    }\n    static get bool() {\n      // prevent undefined to be explicitly set\n      if (this.defaults.bool === undefined) {\n        return bool()\n      }\n      return bool().def(this.defaults.bool)\n    }\n    static get string() {\n      return string().def(this.defaults.string)\n    }\n    static get number() {\n      return number().def(this.defaults.number)\n    }\n    static get array() {\n      return array().def(this.defaults.array)\n    }\n    static get object() {\n      return object().def(this.defaults.object)\n    }\n    static get integer() {\n      return integer().def(this.defaults.integer)\n    }\n    static get symbol() {\n      return symbol()\n    }\n\n    static get nullable() {\n      return nullable()\n    }\n\n    static readonly custom = custom\n    static readonly oneOf = oneOf\n    static readonly instanceOf = instanceOf\n    static readonly oneOfType = oneOfType\n    static readonly arrayOf = arrayOf\n    static readonly objectOf = objectOf\n    static readonly shape = shape\n\n    static extend<T = any>(props: ExtendProps | ExtendProps[]): T {\n      warn(\n        `VueTypes.extend is deprecated. Use the ES6+ method instead. See https://dwightjack.github.io/vue-types/advanced/extending-vue-types.html#extending-namespaced-validators-in-es6 for details.`,\n      )\n      if (isArray(props)) {\n        props.forEach((p) => this.extend(p))\n        return this as any\n      }\n\n      const { name, validate = false, getter = false, ...opts } = props\n\n      if (has(this, name as any)) {\n        throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n      }\n\n      const { type } = opts\n      if (isVueTypeDef(type)) {\n        // we are using as base type a vue-type object\n\n        // detach the original type\n        // we are going to inherit the parent data.\n        delete opts.type\n\n        if (getter) {\n          return Object.defineProperty(this as unknown as T, name, {\n            get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n          })\n        }\n        return Object.defineProperty(this as unknown as T, name, {\n          value(...args: unknown[]) {\n            const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n            if (t.validator) {\n              t.validator = t.validator.bind(t, ...args)\n            }\n            return t\n          },\n        })\n      }\n\n      let descriptor: PropertyDescriptor\n      if (getter) {\n        descriptor = {\n          get() {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            if (validate) {\n              return toValidableType<T>(name, typeOptions)\n            }\n            return toType<T>(name, typeOptions)\n          },\n          enumerable: true,\n        }\n      } else {\n        descriptor = {\n          value(...args: T[]) {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            let ret: VueTypeDef<T>\n            if (validate) {\n              ret = toValidableType<T>(name, typeOptions)\n            } else {\n              ret = toType<T>(name, typeOptions)\n            }\n\n            if (typeOptions.validator) {\n              ret.validator = typeOptions.validator.bind(ret, ...args)\n            }\n            return ret\n          },\n          enumerable: true,\n        }\n      }\n\n      return Object.defineProperty(this as unknown as T, name, descriptor)\n    }\n\n    static utils = {\n      validate<T, U>(value: T, type: U) {\n        return validateType<U, T>(type, value, true) === true\n      },\n      toType<T = unknown>(\n        name: string,\n        obj: PropOptions<T>,\n        validable = false,\n      ): VueTypeDef<T> | VueTypeValidableDef<T> {\n        return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n      },\n    }\n  })()\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes /*#__PURE__*/ extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  nullable,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n  config,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport type { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, renderSlot as _renderSlot } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"stroke\"];\nconst _hoisted_4 = [\"dur\"];\nconst _hoisted_5 = [\"stroke\"];\nconst _hoisted_6 = [\"dur\"];\nconst _hoisted_7 = [\"stroke\"];\nconst _hoisted_8 = [\"xlink:href\", \"stroke\", \"fill\"];\nconst _hoisted_9 = [\"dur\", \"begin\"];\nconst _hoisted_10 = [\"stroke\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-decoration-9\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: `${$data.svgWH[0]}px`,\n    height: `${$data.svgWH[1]}px`,\n    style: _normalizeStyle(`transform:scale(${$data.svgScale[0]},${$data.svgScale[1]});`)\n  }, [_createElementVNode(\"defs\", null, [_createElementVNode(\"polygon\", {\n    id: $data.polygonId,\n    points: \"15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5\"\n  }, null, 8 /* PROPS */, _hoisted_2)]), _createElementVNode(\"circle\", {\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"transparent\",\n    stroke: $data.mergedColor[1],\n    \"stroke-width\": \"10\",\n    \"stroke-dasharray\": \"80, 100, 30, 100\"\n  }, [_createElementVNode(\"animateTransform\", {\n    attributeName: \"transform\",\n    type: \"rotate\",\n    values: \"0 50 50;360 50 50\",\n    dur: `${$props.dur}s`,\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_4)], 8 /* PROPS */, _hoisted_3), _createElementVNode(\"circle\", {\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"transparent\",\n    stroke: $data.mergedColor[0],\n    \"stroke-width\": \"6\",\n    \"stroke-dasharray\": \"50, 66, 100, 66\"\n  }, [_createElementVNode(\"animateTransform\", {\n    attributeName: \"transform\",\n    type: \"rotate\",\n    values: \"0 50 50;-360 50 50\",\n    dur: `${$props.dur}s`,\n    repeatCount: \"indefinite\"\n  }, null, 8 /* PROPS */, _hoisted_6)], 8 /* PROPS */, _hoisted_5), _createElementVNode(\"circle\", {\n    cx: \"50\",\n    cy: \"50\",\n    r: \"38\",\n    fill: \"transparent\",\n    stroke: $options.fade($data.mergedColor[1] || $data.defaultColor[1], 30),\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"5, 1\"\n  }, null, 8 /* PROPS */, _hoisted_7), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(new Array(20).fill(0), (foo, i) => {\n    return _openBlock(), _createElementBlock(\"use\", {\n      key: i,\n      \"xlink:href\": `#${$data.polygonId}`,\n      stroke: $data.mergedColor[1],\n      fill: Math.random() > 0.4 ? 'transparent' : $data.mergedColor[0]\n    }, [_createElementVNode(\"animateTransform\", {\n      attributeName: \"transform\",\n      type: \"rotate\",\n      values: \"0 50 50;360 50 50\",\n      dur: `${$props.dur}s`,\n      begin: `${i * $props.dur / 20}s`,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_9)], 8 /* PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"circle\", {\n    cx: \"50\",\n    cy: \"50\",\n    r: \"26\",\n    fill: \"transparent\",\n    stroke: $options.fade($data.mergedColor[1] || $data.defaultColor[1], 30),\n    \"stroke-width\": \"1\",\n    \"stroke-dasharray\": \"5, 1\"\n  }, null, 8 /* PROPS */, _hoisted_10)], 12 /* STYLE, PROPS */, _hoisted_1)), _renderSlot(_ctx.$slots, \"default\")], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;uBACEA,oBAiFM;IAjFDC,KAAK,EAAC,iBAAiB;IAAEC,GAAG,EAAEC;qBACjCH,oBA6EM;IA7EAI,KAAK,KAAKD,WAAK;IAAUE,MAAM,KAAKF,WAAK;IAAUG,KAAK,qCAAqBH,cAAQ,OAAOA,cAAQ;MACxGI,oBAEO,eADLA,oBAA2E;IAAjEC,EAAE,EAAEL,eAAS;IAAEM,MAAM,EAAC;yCAGlCF,oBAgBS;IAfPG,EAAE,EAAC,IAAI;IACPC,EAAE,EAAC,IAAI;IACPC,CAAC,EAAC,IAAI;IACNC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEX,iBAAW;IACpB,cAAY,EAAC,IAAI;IACjB,kBAAgB,EAAC;MAEjBI,oBAME;IALAQ,aAAa,EAAC,WAAW;IACzBC,IAAI,EAAC,QAAQ;IACbC,MAAM,EAAC,mBAAmB;IACzBC,GAAG,KAAKC,UAAG;IACZC,WAAW,EAAC;oEAIhBb,oBAgBS;IAfPG,EAAE,EAAC,IAAI;IACPC,EAAE,EAAC,IAAI;IACPC,CAAC,EAAC,IAAI;IACNC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEX,iBAAW;IACpB,cAAY,EAAC,GAAG;IAChB,kBAAgB,EAAC;MAEjBI,oBAME;IALAQ,aAAa,EAAC,WAAW;IACzBC,IAAI,EAAC,QAAQ;IACbC,MAAM,EAAC,oBAAoB;IAC1BC,GAAG,KAAKC,UAAG;IACZC,WAAW,EAAC;oEAIhBb,oBAQE;IAPAG,EAAE,EAAC,IAAI;IACPC,EAAE,EAAC,IAAI;IACPC,CAAC,EAAC,IAAI;IACNC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEO,aAAI,CAAClB,iBAAW,OAAOA,kBAAY;IAC5C,cAAY,EAAC,GAAG;IAChB,kBAAgB,EAAC;0DAGnBH,oBAeMsB,iCAdmBC,KAAK,KAAKV,IAAI,MAA7BW,GAAG,EAAEC,CAAC;yBADhBzB,oBAeM;MAbH0B,GAAG,EAAED,CAAC;MACN,YAAU,MAAMtB,eAAS;MACzBW,MAAM,EAAEX,iBAAW;MACnBU,IAAI,EAAEc,IAAI,CAACC,MAAM,2BAA2BzB,iBAAW;QAExDI,oBAOE;MANAQ,aAAa,EAAC,WAAW;MACzBC,IAAI,EAAC,QAAQ;MACbC,MAAM,EAAC,mBAAmB;MACzBC,GAAG,KAAKC,UAAG;MACXU,KAAK,KAAKJ,CAAC,GAAGN,UAAG;MAClBC,WAAW,EAAC;;kCAIhBb,oBAQE;IAPAG,EAAE,EAAC,IAAI;IACPC,EAAE,EAAC,IAAI;IACPC,CAAC,EAAC,IAAI;IACNC,IAAI,EAAC,aAAa;IACjBC,MAAM,EAAEO,aAAI,CAAClB,iBAAW,OAAOA,kBAAY;IAC5C,cAAY,EAAC,GAAG;IAChB,kBAAgB,EAAC;8EAIrB2B,YAAaC","names":["_createElementBlock","class","ref","$data","width","height","style","_createElementVNode","id","points","cx","cy","r","fill","stroke","attributeName","type","values","dur","$props","repeatCount","$options","_Fragment","Array","foo","i","key","Math","random","begin","_renderSlot","_ctx"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/decoration9/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-9\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n      <defs>\n        <polygon :id=\"polygonId\" points=\"15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5\" />\n      </defs>\n\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"45\"\n        fill=\"transparent\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"10\"\n        stroke-dasharray=\"80, 100, 30, 100\"\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0 50 50;360 50 50\"\n          :dur=\"`${dur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"45\"\n        fill=\"transparent\"\n        :stroke=\"mergedColor[0]\"\n        stroke-width=\"6\"\n        stroke-dasharray=\"50, 66, 100, 66\"\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0 50 50;-360 50 50\"\n          :dur=\"`${dur}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </circle>\n\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"38\"\n        fill=\"transparent\"\n        :stroke=\"fade(mergedColor[1] || defaultColor[1], 30)\"\n        stroke-width=\"1\"\n        stroke-dasharray=\"5, 1\"\n      />\n\n      <use\n        v-for=\"(foo, i) in new Array(20).fill(0)\"\n        :key=\"i\"\n        :xlink:href=\"`#${polygonId}`\"\n        :stroke=\"mergedColor[1]\"\n        :fill=\"Math.random() > 0.4 ? 'transparent' : mergedColor[0]\"\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0 50 50;360 50 50\"\n          :dur=\"`${dur}s`\"\n          :begin=\"`${i * dur / 20}s`\"\n          repeatCount=\"indefinite\"\n        />\n      </use>\n\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"26\"\n        fill=\"transparent\"\n        :stroke=\"fade(mergedColor[1] || defaultColor[1], 30)\"\n        stroke-width=\"1\"\n        stroke-dasharray=\"5, 1\"\n      />\n    </svg>\n\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { fade } from '@jiaminghi/color'\n\nexport default {\n  name: 'DvDecoration9',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    dur: {\n      type: Number,\n      default: 3\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'decoration-9',\n\n      polygonId: `decoration-9-polygon-${id}`,\n\n      svgWH: [100, 100],\n\n      svgScale: [1, 1],\n\n      defaultColor: ['rgba(3, 166, 224, 0.8)', 'rgba(3, 166, 224, 0.5)'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcScale } = this\n\n      calcScale()\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcScale } = this\n\n      calcScale()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    },\n    fade\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
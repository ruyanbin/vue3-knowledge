{"ast":null,"code":"import Charts from '@jiaminghi/charts';\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{\n          name: '',\n          value: 0\n        }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n      mergedConfig: null,\n      chart: null,\n      activeIndex: 0,\n      animationHandler: ''\n    };\n  },\n  computed: {\n    digitalFlop() {\n      const {\n        mergedConfig,\n        activeIndex\n      } = this;\n      if (!mergedConfig) return {};\n      const {\n        digitalFlopStyle,\n        digitalFlopToFixed,\n        data\n      } = mergedConfig;\n      const value = data.map(({\n        value\n      }) => value);\n      const sum = value.reduce((all, v) => all + v, 0);\n      const percent = parseFloat(value[activeIndex] / sum * 100) || 0;\n      return {\n        content: '{nt}%',\n        number: [percent],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      };\n    },\n    ringName() {\n      const {\n        mergedConfig,\n        activeIndex\n      } = this;\n      if (!mergedConfig) return '';\n      return mergedConfig.data[activeIndex].name;\n    },\n    fontSize() {\n      const {\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return '';\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`;\n    }\n  },\n  watch: {\n    config() {\n      const {\n        animationHandler,\n        mergeConfig,\n        setRingOption\n      } = this;\n      clearTimeout(animationHandler);\n      this.activeIndex = 0;\n      mergeConfig();\n      setRingOption();\n    }\n  },\n  methods: {\n    init() {\n      const {\n        initChart,\n        mergeConfig,\n        setRingOption\n      } = this;\n      initChart();\n      mergeConfig();\n      setRingOption();\n    },\n    initChart() {\n      const {\n        $refs\n      } = this;\n      this.chart = new Charts($refs['active-ring-chart']);\n    },\n    mergeConfig() {\n      const {\n        defaultConfig,\n        config\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    setRingOption() {\n      const {\n        getRingOption,\n        chart,\n        ringAnimation\n      } = this;\n      const option = getRingOption();\n      chart.setOption(option, true);\n      ringAnimation();\n    },\n    getRingOption() {\n      const {\n        mergedConfig,\n        getRealRadius\n      } = this;\n      const radius = getRealRadius();\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius;\n      });\n      return {\n        series: [{\n          type: 'pie',\n          ...mergedConfig,\n          outsideLabel: {\n            show: false\n          }\n        }],\n        color: mergedConfig.color\n      };\n    },\n    getRealRadius(active = false) {\n      const {\n        mergedConfig,\n        chart\n      } = this;\n      const {\n        radius,\n        activeRadius,\n        lineWidth\n      } = mergedConfig;\n      const maxRadius = Math.min(...chart.render.area) / 2;\n      const halfLineWidth = lineWidth / 2;\n      let realRadius = active ? activeRadius : radius;\n      if (typeof realRadius !== 'number') realRadius = parseInt(realRadius) / 100 * maxRadius;\n      const insideRadius = realRadius - halfLineWidth;\n      const outSideRadius = realRadius + halfLineWidth;\n      return [insideRadius, outSideRadius];\n    },\n    ringAnimation() {\n      let {\n        activeIndex,\n        getRingOption,\n        chart,\n        getRealRadius\n      } = this;\n      const radius = getRealRadius();\n      const active = getRealRadius(true);\n      const option = getRingOption();\n      const {\n        data\n      } = option.series[0];\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active;\n        } else {\n          dataItem.radius = radius;\n        }\n      });\n      chart.setOption(option, true);\n      const {\n        activeTimeGap\n      } = option.series[0];\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1;\n        if (activeIndex >= data.length) activeIndex = 0;\n        this.activeIndex = activeIndex;\n        this.ringAnimation();\n      }, activeTimeGap);\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  },\n  beforeDestroy() {\n    const {\n      animationHandler\n    } = this;\n    clearTimeout(animationHandler);\n  }\n};","map":{"version":3,"mappings":"AAWA,OAAOA,MAAK,MAAO,mBAAkB;AAErC,OAAOC,aAAY,MAAO,gCAA+B;AAEzD,SAASC,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAQ,QAAS,qCAAoC;AAE9D,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,UAAU,EAAE;IACVJ;EACF,CAAC;EACDK,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,IAAG,GAAK;IACN,OAAO;MACLC,aAAa,EAAE;QACb;;;;;;QAMAC,MAAM,EAAE,KAAK;QACb;;;;;;QAMAC,YAAY,EAAE,KAAK;QACnB;;;;;QAKAH,IAAI,EAAE,CAAC;UAAEP,IAAI,EAAE,EAAE;UAAEW,KAAK,EAAE;QAAE,CAAC,CAAC;QAC9B;;;;;QAKAC,SAAS,EAAE,EAAE;QACb;;;;;QAKAC,aAAa,EAAE,IAAI;QACnB;;;;;;QAMAC,KAAK,EAAE,EAAE;QACT;;;;QAIAC,gBAAgB,EAAE;UAChBC,QAAQ,EAAE,EAAE;UACZC,IAAI,EAAE;QACR,CAAC;QACD;;;;QAIAC,kBAAkB,EAAE,CAAC;QACrB;;;;;QAKAC,cAAc,EAAE,cAAc;QAC9B;;;;;QAKAC,cAAc,EAAE;MAClB,CAAC;MAEDC,YAAY,EAAE,IAAI;MAElBC,KAAK,EAAE,IAAI;MAEXC,WAAW,EAAE,CAAC;MAEdC,gBAAgB,EAAE;IACpB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAU,GAAK;MACb,MAAM;QAAEL,YAAY;QAAEE;MAAY,IAAI,IAAG;MAEzC,IAAI,CAACF,YAAY,EAAE,OAAO,CAAC;MAE3B,MAAM;QAAEN,gBAAgB;QAAEG,kBAAkB;QAAEX;MAAK,IAAIc,YAAW;MAElE,MAAMV,KAAI,GAAIJ,IAAI,CAACoB,GAAG,CAAC,CAAC;QAAEhB;MAAM,CAAC,KAAKA,KAAK;MAE3C,MAAMiB,GAAE,GAAIjB,KAAK,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAE,GAAIC,CAAC,EAAE,CAAC;MAE/C,MAAMC,OAAM,GAAIC,UAAU,CAACtB,KAAK,CAACY,WAAW,IAAIK,GAAE,GAAI,GAAG,KAAK;MAE9D,OAAO;QACLM,OAAO,EAAE,OAAO;QAChBC,MAAM,EAAE,CAACH,OAAO,CAAC;QACjBI,KAAK,EAAErB,gBAAgB;QACvBsB,OAAO,EAAEnB;MACX;IACF,CAAC;IACDoB,QAAO,GAAK;MACV,MAAM;QAAEjB,YAAY;QAAEE;MAAY,IAAI,IAAG;MAEzC,IAAI,CAACF,YAAY,EAAE,OAAO,EAAC;MAE3B,OAAOA,YAAY,CAACd,IAAI,CAACgB,WAAW,CAAC,CAACvB,IAAG;IAC3C,CAAC;IACDgB,QAAO,GAAK;MACV,MAAM;QAAEK;MAAa,IAAI,IAAG;MAE5B,IAAI,CAACA,YAAY,EAAE,OAAO,EAAC;MAE3B,OAAQ,cAAaA,YAAY,CAACN,gBAAgB,CAACC,QAAS,KAAG;IACjE;EACF,CAAC;EACDuB,KAAK,EAAE;IACLpC,MAAK,GAAK;MACR,MAAM;QAAEqB,gBAAgB;QAAEgB,WAAW;QAAEC;MAAc,IAAI,IAAG;MAE5DC,YAAY,CAAClB,gBAAgB;MAE7B,IAAI,CAACD,WAAU,GAAI;MAEnBiB,WAAW,EAAC;MAEZC,aAAa,EAAC;IAChB;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,IAAG,GAAK;MACN,MAAM;QAAEC,SAAS;QAAEL,WAAW;QAAEC;MAAc,IAAI,IAAG;MAErDI,SAAS,EAAC;MAEVL,WAAW,EAAC;MAEZC,aAAa,EAAC;IAChB,CAAC;IACDI,SAAQ,GAAK;MACX,MAAM;QAAEC;MAAM,IAAI,IAAG;MAErB,IAAI,CAACxB,KAAI,GAAI,IAAI1B,MAAM,CAACkD,KAAK,CAAC,mBAAmB,CAAC;IACpD,CAAC;IACDN,WAAU,GAAK;MACb,MAAM;QAAEhC,aAAa;QAAEL;MAAO,IAAI,IAAG;MAErC,IAAI,CAACkB,YAAW,GAAIvB,SAAS,CAACC,SAAS,CAACS,aAAa,EAAE,IAAI,CAAC,EAAEL,MAAK,IAAK,CAAC,CAAC;IAC5E,CAAC;IACDsC,aAAY,GAAK;MACf,MAAM;QAAEM,aAAa;QAAEzB,KAAK;QAAE0B;MAAc,IAAI,IAAG;MAEnD,MAAMC,MAAK,GAAIF,aAAa,EAAC;MAE7BzB,KAAK,CAAC4B,SAAS,CAACD,MAAM,EAAE,IAAI;MAE5BD,aAAa,EAAC;IAChB,CAAC;IACDD,aAAY,GAAK;MACf,MAAM;QAAE1B,YAAY;QAAE8B;MAAc,IAAI,IAAG;MAE3C,MAAM1C,MAAK,GAAI0C,aAAa,EAAC;MAE7B9B,YAAY,CAACd,IAAI,CAAC6C,OAAO,CAACC,QAAO,IAAK;QACpCA,QAAQ,CAAC5C,MAAK,GAAIA,MAAK;MACzB,CAAC;MAED,OAAO;QACL6C,MAAM,EAAE,CACN;UACElD,IAAI,EAAE,KAAK;UACX,GAAGiB,YAAY;UACfkC,YAAY,EAAE;YACZC,IAAI,EAAE;UACR;QACF,EACD;QACD1C,KAAK,EAAEO,YAAY,CAACP;MACtB;IACF,CAAC;IACDqC,aAAY,CAAGM,MAAK,GAAI,KAAK,EAAE;MAC7B,MAAM;QAAEpC,YAAY;QAAEC;MAAM,IAAI,IAAG;MAEnC,MAAM;QAAEb,MAAM;QAAEC,YAAY;QAAEE;MAAU,IAAIS,YAAW;MAEvD,MAAMqC,SAAQ,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAGtC,KAAK,CAACuC,MAAM,CAACC,IAAI,IAAI;MAEnD,MAAMC,aAAY,GAAInD,SAAQ,GAAI;MAElC,IAAIoD,UAAS,GAAIP,MAAK,GAAI/C,YAAW,GAAID,MAAK;MAE9C,IAAI,OAAOuD,UAAS,KAAM,QAAQ,EAAEA,UAAS,GAAIC,QAAQ,CAACD,UAAU,IAAI,GAAE,GAAIN,SAAQ;MAEtF,MAAMQ,YAAW,GAAIF,UAAS,GAAID,aAAY;MAC9C,MAAMI,aAAY,GAAIH,UAAS,GAAID,aAAY;MAE/C,OAAO,CAACG,YAAY,EAAEC,aAAa;IACrC,CAAC;IACDnB,aAAY,GAAK;MACf,IAAI;QAAEzB,WAAW;QAAEwB,aAAa;QAAEzB,KAAK;QAAE6B;MAAc,IAAI,IAAG;MAE9D,MAAM1C,MAAK,GAAI0C,aAAa,EAAC;MAC7B,MAAMM,MAAK,GAAIN,aAAa,CAAC,IAAI;MAEjC,MAAMF,MAAK,GAAIF,aAAa,EAAC;MAE7B,MAAM;QAAExC;MAAK,IAAI0C,MAAM,CAACK,MAAM,CAAC,CAAC;MAEhC/C,IAAI,CAAC6C,OAAO,CAAC,CAACC,QAAQ,EAAEe,CAAC,KAAK;QAC5B,IAAIA,MAAM7C,WAAW,EAAE;UACrB8B,QAAQ,CAAC5C,MAAK,GAAIgD,MAAK;QACzB,OAAO;UACLJ,QAAQ,CAAC5C,MAAK,GAAIA,MAAK;QACzB;MACF,CAAC;MAEDa,KAAK,CAAC4B,SAAS,CAACD,MAAM,EAAE,IAAI;MAE5B,MAAM;QAAEpC;MAAc,IAAIoC,MAAM,CAACK,MAAM,CAAC,CAAC;MAEzC,IAAI,CAAC9B,gBAAe,GAAI6C,UAAU,CAACC,GAAE,IAAK;QACxC/C,WAAU,IAAK;QAEf,IAAIA,WAAU,IAAKhB,IAAI,CAACgE,MAAM,EAAEhD,WAAU,GAAI;QAE9C,IAAI,CAACA,WAAU,GAAIA,WAAU;QAE7B,IAAI,CAACyB,aAAa,EAAC;MACrB,CAAC,EAAEnC,aAAa;IAClB;EACF,CAAC;EACD2D,OAAM,GAAK;IACT,MAAM;MAAE5B;IAAK,IAAI,IAAG;IAEpBA,IAAI,EAAC;EACP,CAAC;EACD6B,aAAY,GAAK;IACf,MAAM;MAAEjD;IAAiB,IAAI,IAAG;IAEhCkB,YAAY,CAAClB,gBAAgB;EAC/B;AACF","names":["Charts","dvDigitalFlop","deepMerge","deepClone","name","components","props","config","type","Object","default","data","defaultConfig","radius","activeRadius","value","lineWidth","activeTimeGap","color","digitalFlopStyle","fontSize","fill","digitalFlopToFixed","animationCurve","animationFrame","mergedConfig","chart","activeIndex","animationHandler","computed","digitalFlop","map","sum","reduce","all","v","percent","parseFloat","content","number","style","toFixed","ringName","watch","mergeConfig","setRingOption","clearTimeout","methods","init","initChart","$refs","getRingOption","ringAnimation","option","setOption","getRealRadius","forEach","dataItem","series","outsideLabel","show","active","maxRadius","Math","min","render","area","halfLineWidth","realRadius","parseInt","insideRadius","outSideRadius","i","setTimeout","foo","length","mounted","beforeDestroy"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/activeRingChart/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-active-ring-chart\">\n    <div class=\"active-ring-chart-container\" ref=\"active-ring-chart\" />\n    <div class=\"active-ring-info\">\n      <dv-digital-flop :config=\"digitalFlop\" />\n      <div class=\"active-ring-name\" :style=\"fontSize\">{{ ringName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Charts from '@jiaminghi/charts'\n\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{ name: '', value: 0 }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n\n      mergedConfig: null,\n\n      chart: null,\n\n      activeIndex: 0,\n\n      animationHandler: ''\n    }\n  },\n  computed: {\n    digitalFlop () {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return {}\n\n      const { digitalFlopStyle, digitalFlopToFixed, data } = mergedConfig\n\n      const value = data.map(({ value }) => value)\n\n      const sum = value.reduce((all, v) => all + v, 0)\n\n      const percent = parseFloat(value[activeIndex] / sum * 100) || 0\n\n      return {\n        content: '{nt}%',\n        number: [percent],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      }\n    },\n    ringName () {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return ''\n\n      return mergedConfig.data[activeIndex].name\n    },\n    fontSize () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`\n    }\n  },\n  watch: {\n    config () {\n      const { animationHandler, mergeConfig, setRingOption } = this\n\n      clearTimeout(animationHandler)\n\n      this.activeIndex = 0\n\n      mergeConfig()\n\n      setRingOption()\n    }\n  },\n  methods: {\n    init () {\n      const { initChart, mergeConfig, setRingOption } = this\n\n      initChart()\n\n      mergeConfig()\n\n      setRingOption()\n    },\n    initChart () {\n      const { $refs } = this\n\n      this.chart = new Charts($refs['active-ring-chart'])\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    setRingOption () {\n      const { getRingOption, chart, ringAnimation } = this\n\n      const option = getRingOption()\n\n      chart.setOption(option, true)\n\n      ringAnimation()\n    },\n    getRingOption () {\n      const { mergedConfig, getRealRadius } = this\n\n      const radius = getRealRadius()\n\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius\n      })\n\n      return {\n        series: [\n          {\n            type: 'pie',\n            ...mergedConfig,\n            outsideLabel: {\n              show: false\n            }\n          }\n        ],\n        color: mergedConfig.color\n      }\n    },\n    getRealRadius (active = false) {\n      const { mergedConfig, chart } = this\n\n      const { radius, activeRadius, lineWidth } = mergedConfig\n\n      const maxRadius = Math.min(...chart.render.area) / 2\n\n      const halfLineWidth = lineWidth / 2\n\n      let realRadius = active ? activeRadius : radius\n\n      if (typeof realRadius !== 'number') realRadius = parseInt(realRadius) / 100 * maxRadius\n\n      const insideRadius = realRadius - halfLineWidth\n      const outSideRadius = realRadius + halfLineWidth\n\n      return [insideRadius, outSideRadius]\n    },\n    ringAnimation () {\n      let { activeIndex, getRingOption, chart, getRealRadius } = this\n\n      const radius = getRealRadius()\n      const active = getRealRadius(true)\n\n      const option = getRingOption()\n\n      const { data } = option.series[0]\n\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active\n        } else {\n          dataItem.radius = radius\n        }\n      })\n\n      chart.setOption(option, true)\n\n      const { activeTimeGap } = option.series[0]\n\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1\n\n        if (activeIndex >= data.length) activeIndex = 0\n\n        this.activeIndex = activeIndex\n\n        this.ringAnimation()\n      }, activeTimeGap)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { animationHandler } = this\n\n    clearTimeout(animationHandler)\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      ref: 'scroll-board',\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single'\n      },\n      mergedConfig: null,\n      header: [],\n      rowsData: [],\n      rows: [],\n      widths: [],\n      heights: [],\n      avgHeight: 0,\n      aligns: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0\n    };\n  },\n  watch: {\n    config() {\n      const {\n        stopAnimation,\n        calcData\n      } = this;\n      stopAnimation();\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        mergedConfig,\n        calcWidths,\n        calcHeights\n      } = this;\n      if (!mergedConfig) return;\n      calcWidths();\n      calcHeights();\n    },\n    calcData() {\n      const {\n        mergeConfig,\n        calcHeaderData,\n        calcRowsData\n      } = this;\n      mergeConfig();\n      calcHeaderData();\n      calcRowsData();\n      const {\n        calcWidths,\n        calcHeights,\n        calcAligns\n      } = this;\n      calcWidths();\n      calcHeights();\n      calcAligns();\n      const {\n        animation\n      } = this;\n      animation(true);\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcHeaderData() {\n      let {\n        header,\n        index,\n        indexHeader\n      } = this.mergedConfig;\n      if (!header.length) {\n        this.header = [];\n        return;\n      }\n      header = [...header];\n      if (index) header.unshift(indexHeader);\n      this.header = header;\n    },\n    calcRowsData() {\n      let {\n        data,\n        index,\n        headerBGC,\n        rowNum\n      } = this.mergedConfig;\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row];\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`;\n          row.unshift(indexTag);\n          return row;\n        });\n      }\n      data = data.map((ceils, i) => ({\n        ceils,\n        rowIndex: i\n      }));\n      const rowLength = data.length;\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data];\n      }\n      data = data.map((d, i) => ({\n        ...d,\n        scroll: i\n      }));\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcWidths() {\n      const {\n        width,\n        mergedConfig,\n        rowsData\n      } = this;\n      const {\n        columnWidth,\n        header\n      } = mergedConfig;\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0);\n      let columnNum = 0;\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length;\n      } else if (header.length) {\n        columnNum = header.length;\n      }\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length);\n      const widths = new Array(columnNum).fill(avgWidth);\n      this.widths = deepMerge(widths, columnWidth);\n    },\n    calcHeights(onresize = false) {\n      const {\n        height,\n        mergedConfig,\n        header\n      } = this;\n      const {\n        headerHeight,\n        rowNum,\n        data\n      } = mergedConfig;\n      let allHeight = height;\n      if (header.length) allHeight -= headerHeight;\n      const avgHeight = allHeight / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    calcAligns() {\n      const {\n        header,\n        mergedConfig\n      } = this;\n      const columnNum = header.length;\n      let aligns = new Array(columnNum).fill('left');\n      const {\n        align\n      } = mergedConfig;\n      this.aligns = deepMerge(aligns, align);\n    },\n    async animation(start = false) {\n      let {\n        avgHeight,\n        animationIndex,\n        mergedConfig,\n        rowsData,\n        animation,\n        updater\n      } = this;\n      const {\n        waitTime,\n        carousel,\n        rowNum\n      } = mergedConfig;\n      const rowLength = rowsData.length;\n      if (rowNum >= rowLength) return;\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        if (updater !== this.updater) return;\n      }\n      const animationNum = carousel === 'single' ? 1 : rowNum;\n      let rows = rowsData.slice(animationIndex);\n      rows.push(...rowsData.slice(0, animationIndex));\n      this.rows = rows;\n      this.heights = new Array(rowLength).fill(avgHeight);\n      await new Promise(resolve => setTimeout(resolve, 300));\n      if (updater !== this.updater) return;\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0));\n      animationIndex += animationNum;\n      const back = animationIndex - rowLength;\n      if (back >= 0) animationIndex = back;\n      this.animationIndex = animationIndex;\n      this.animationHandler = setTimeout(animation, waitTime - 300);\n    },\n    stopAnimation() {\n      const {\n        animationHandler,\n        updater\n      } = this;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    },\n    emitEvent(ri, ci, row, ceil) {\n      const {\n        ceils,\n        rowIndex\n      } = row;\n      this.$emit('click', {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      });\n    }\n  },\n  destroyed() {\n    const {\n      stopAnimation\n    } = this;\n    stopAnimation();\n  }\n};","map":{"version":3,"mappings":"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","names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","data","ref","defaultConfig","header","rowNum","headerBGC","oddRowBGC","evenRowBGC","waitTime","headerHeight","columnWidth","align","index","indexHeader","carousel","mergedConfig","rowsData","rows","widths","heights","avgHeight","aligns","animationIndex","animationHandler","updater","watch","stopAnimation","calcData","methods","afterAutoResizeMixinInit","onResize","calcWidths","calcHeights","mergeConfig","calcHeaderData","calcRowsData","calcAligns","animation","length","unshift","map","row","i","indexTag","ceils","rowIndex","rowLength","d","scroll","width","usedWidth","reduce","all","w","columnNum","avgWidth","Array","fill","onresize","height","allHeight","start","Promise","resolve","setTimeout","animationNum","slice","push","splice","back","clearTimeout","emitEvent","ri","ci","ceil","$emit","columnIndex","destroyed"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"headerItem + i\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"row.toString() + row.scroll\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"ceil + ri + ci\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent(ri, ci, row, ceil)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single'\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit('click', {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// I3DM File Format\n// https://github.com/CesiumGS/3d-tiles/blob/master/specification/TileFormats/Instanced3DModel/README.md\n\nimport { FeatureTable, BatchTable } from '../utilities/FeatureTable.js';\nimport { arrayToString } from '../utilities/arrayToString.js';\nimport { LoaderBase } from './LoaderBase.js';\nimport { readMagicBytes } from '../utilities/readMagicBytes.js';\nexport class I3DMLoaderBase extends LoaderBase {\n  parse(buffer) {\n    const dataView = new DataView(buffer);\n\n    // 32-byte header\n\n    // 4 bytes\n    const magic = readMagicBytes(dataView);\n    console.assert(magic === 'i3dm');\n\n    // 4 bytes\n    const version = dataView.getUint32(4, true);\n    console.assert(version === 1);\n\n    // 4 bytes\n    const byteLength = dataView.getUint32(8, true);\n    console.assert(byteLength === buffer.byteLength);\n\n    // 4 bytes\n    const featureTableJSONByteLength = dataView.getUint32(12, true);\n\n    // 4 bytes\n    const featureTableBinaryByteLength = dataView.getUint32(16, true);\n\n    // 4 bytes\n    const batchTableJSONByteLength = dataView.getUint32(20, true);\n\n    // 4 bytes\n    const batchTableBinaryByteLength = dataView.getUint32(24, true);\n\n    // 4 bytes\n    const gltfFormat = dataView.getUint32(28, true);\n\n    // Feature Table\n    const featureTableStart = 32;\n    const featureTableBuffer = buffer.slice(featureTableStart, featureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength);\n    const featureTable = new FeatureTable(featureTableBuffer, 0, featureTableJSONByteLength, featureTableBinaryByteLength);\n\n    // Batch Table\n    const batchTableStart = featureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength;\n    const batchTableBuffer = buffer.slice(batchTableStart, batchTableStart + batchTableJSONByteLength + batchTableBinaryByteLength);\n    const batchTable = new BatchTable(batchTableBuffer, featureTable.getData('INSTANCES_LENGTH'), 0, batchTableJSONByteLength, batchTableBinaryByteLength);\n    const glbStart = batchTableStart + batchTableJSONByteLength + batchTableBinaryByteLength;\n    const bodyBytes = new Uint8Array(buffer, glbStart, byteLength - glbStart);\n    let glbBytes = null;\n    let promise = null;\n    if (gltfFormat) {\n      glbBytes = bodyBytes;\n      promise = Promise.resolve();\n    } else {\n      const externalUri = this.resolveExternalURL(arrayToString(bodyBytes));\n      promise = fetch(externalUri, this.fetchOptions).then(res => {\n        if (!res.ok) {\n          throw new Error(`I3DMLoaderBase : Failed to load file \"${externalUri}\" with status ${res.status} : ${res.statusText}`);\n        }\n        return res.arrayBuffer();\n      }).then(buffer => {\n        glbBytes = new Uint8Array(buffer);\n      });\n    }\n    return promise.then(() => {\n      return {\n        version,\n        featureTable,\n        batchTable,\n        glbBytes\n      };\n    });\n  }\n}","map":{"version":3,"names":["FeatureTable","BatchTable","arrayToString","LoaderBase","readMagicBytes","I3DMLoaderBase","parse","buffer","dataView","DataView","magic","console","assert","version","getUint32","byteLength","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","gltfFormat","featureTableStart","featureTableBuffer","slice","featureTable","batchTableStart","batchTableBuffer","batchTable","getData","glbStart","bodyBytes","Uint8Array","glbBytes","promise","Promise","resolve","externalUri","resolveExternalURL","fetch","fetchOptions","then","res","ok","Error","status","statusText","arrayBuffer"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/3d-tiles-renderer/src/base/I3DMLoaderBase.js"],"sourcesContent":["// I3DM File Format\n// https://github.com/CesiumGS/3d-tiles/blob/master/specification/TileFormats/Instanced3DModel/README.md\n\nimport { FeatureTable, BatchTable } from '../utilities/FeatureTable.js';\nimport { arrayToString } from '../utilities/arrayToString.js';\nimport { LoaderBase } from './LoaderBase.js';\nimport { readMagicBytes } from '../utilities/readMagicBytes.js';\n\nexport class I3DMLoaderBase extends LoaderBase {\n\n\tparse( buffer ) {\n\n\t\tconst dataView = new DataView( buffer );\n\n\t\t// 32-byte header\n\n\t\t// 4 bytes\n\t\tconst magic = readMagicBytes( dataView );\n\n\t\tconsole.assert( magic === 'i3dm' );\n\n\t\t// 4 bytes\n\t\tconst version = dataView.getUint32( 4, true );\n\n\t\tconsole.assert( version === 1 );\n\n\t\t// 4 bytes\n\t\tconst byteLength = dataView.getUint32( 8, true );\n\n\t\tconsole.assert( byteLength === buffer.byteLength );\n\n\t\t// 4 bytes\n\t\tconst featureTableJSONByteLength = dataView.getUint32( 12, true );\n\n\t\t// 4 bytes\n\t\tconst featureTableBinaryByteLength = dataView.getUint32( 16, true );\n\n\t\t// 4 bytes\n\t\tconst batchTableJSONByteLength = dataView.getUint32( 20, true );\n\n\t\t// 4 bytes\n\t\tconst batchTableBinaryByteLength = dataView.getUint32( 24, true );\n\n\t\t// 4 bytes\n\t\tconst gltfFormat = dataView.getUint32( 28, true );\n\n\t\t// Feature Table\n\t\tconst featureTableStart = 32;\n\t\tconst featureTableBuffer = buffer.slice(\n\t\t\tfeatureTableStart,\n\t\t\tfeatureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength,\n\t\t);\n\t\tconst featureTable = new FeatureTable(\n\t\t\tfeatureTableBuffer,\n\t\t\t0,\n\t\t\tfeatureTableJSONByteLength,\n\t\t\tfeatureTableBinaryByteLength,\n\t\t);\n\n\t\t// Batch Table\n\t\tconst batchTableStart = featureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength;\n\t\tconst batchTableBuffer = buffer.slice(\n\t\t\tbatchTableStart,\n\t\t\tbatchTableStart + batchTableJSONByteLength + batchTableBinaryByteLength,\n\t\t);\n\t\tconst batchTable = new BatchTable(\n\t\t\tbatchTableBuffer,\n\t\t\tfeatureTable.getData( 'INSTANCES_LENGTH' ),\n\t\t\t0,\n\t\t\tbatchTableJSONByteLength,\n\t\t\tbatchTableBinaryByteLength,\n\t\t);\n\n\t\tconst glbStart = batchTableStart + batchTableJSONByteLength + batchTableBinaryByteLength;\n\t\tconst bodyBytes = new Uint8Array( buffer, glbStart, byteLength - glbStart );\n\n\t\tlet glbBytes = null;\n\t\tlet promise = null;\n\t\tif ( gltfFormat ) {\n\n\t\t\tglbBytes = bodyBytes;\n\t\t\tpromise = Promise.resolve();\n\n\t\t} else {\n\n\t\t\tconst externalUri = this.resolveExternalURL( arrayToString( bodyBytes ) );\n\t\t\tpromise = fetch( externalUri, this.fetchOptions )\n\t\t\t\t.then( res => {\n\n\t\t\t\t\tif ( ! res.ok ) {\n\n\t\t\t\t\t\tthrow new Error( `I3DMLoaderBase : Failed to load file \"${ externalUri }\" with status ${ res.status } : ${ res.statusText }` );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn res.arrayBuffer();\n\n\t\t\t\t} )\n\t\t\t\t.then( buffer => {\n\n\t\t\t\t\tglbBytes = new Uint8Array( buffer );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn promise.then( () => {\n\n\t\t\treturn {\n\t\t\t\tversion,\n\t\t\t\tfeatureTable,\n\t\t\t\tbatchTable,\n\t\t\t\tglbBytes,\n\t\t\t};\n\n\t\t} );\n\n\t}\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dv-water-pond-level\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"id\"];\nconst _hoisted_4 = [\"offset\", \"stop-color\"];\nconst _hoisted_5 = [\"stroke\", \"fill\", \"x\", \"y\"];\nconst _hoisted_6 = [\"cx\", \"cy\", \"rx\", \"ry\", \"stroke\"];\nconst _hoisted_7 = [\"rx\", \"ry\", \"width\", \"height\", \"stroke\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.renderer ? (_openBlock(), _createElementBlock(\"svg\", _hoisted_2, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", {\n    id: $data.gradientId,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.svgBorderGradient, lc => {\n    return _openBlock(), _createElementBlock(\"stop\", {\n      key: lc[0],\n      offset: lc[0],\n      \"stop-color\": lc[1]\n    }, null, 8 /* PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_3)]), $data.renderer ? (_openBlock(), _createElementBlock(\"text\", {\n    key: 0,\n    stroke: `url(#${$data.gradientId})`,\n    fill: `url(#${$data.gradientId})`,\n    x: $data.renderer.area[0] / 2 + 8,\n    y: $data.renderer.area[1] / 2 + 8\n  }, _toDisplayString($data.details), 9 /* TEXT, PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true), !$options.shape || $options.shape === 'round' ? (_openBlock(), _createElementBlock(\"ellipse\", {\n    key: 1,\n    cx: $data.renderer.area[0] / 2 + 8,\n    cy: $data.renderer.area[1] / 2 + 8,\n    rx: $data.renderer.area[0] / 2 + 5,\n    ry: $data.renderer.area[1] / 2 + 5,\n    stroke: `url(#${$data.gradientId})`\n  }, null, 8 /* PROPS */, _hoisted_6)) : (_openBlock(), _createElementBlock(\"rect\", {\n    key: 2,\n    x: \"2\",\n    y: \"2\",\n    rx: $options.shape === 'roundRect' ? 10 : 0,\n    ry: $options.shape === 'roundRect' ? 10 : 0,\n    width: $data.renderer.area[0] + 12,\n    height: $data.renderer.area[1] + 12,\n    stroke: `url(#${$data.gradientId})`\n  }, null, 8 /* PROPS */, _hoisted_7))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", {\n    ref: \"water-pond-level\",\n    style: _normalizeStyle(`border-radius: ${$options.radius};`)\n  }, null, 4 /* STYLE */)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAqB;;;;;;;;;;uBAAhCC,oBAqCM,OArCNC,UAqCM,GApCOC,cAAQ,kBAAnBF,oBAiCM,oBAhCJG,oBAMO,eALLA,oBAIiB;IAJAC,EAAE,EAAEF,gBAAU;IAAEG,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC;yBAC1DR,oBAEwBS,6BAFLP,uBAAiB,EAAvBQ,EAAE;yBAAfV,oBAEwB;MAFeW,GAAG,EAAED,EAAE;MAC3CE,MAAM,EAAEF,EAAE;MACV,YAAU,EAAEA,EAAE;;iEAKbR,cAAQ,kBADhBF,oBAQO;;IANJa,MAAM,UAAUX,gBAAU;IAC1BY,IAAI,UAAUZ,gBAAU;IACxBa,CAAC,EAAEb,cAAQ,CAACc,IAAI;IAChBC,CAAC,EAAEf,cAAQ,CAACc,IAAI;sBAEdd,aAAO,2EAGIgB,cAAK,IAAIA,cAAK,8BAA9BlB,oBAKoC;;IAJjCmB,EAAE,EAAEjB,cAAQ,CAACc,IAAI;IACjBI,EAAE,EAAElB,cAAQ,CAACc,IAAI;IACjBK,EAAE,EAAEnB,cAAQ,CAACc,IAAI;IACjBM,EAAE,EAAEpB,cAAQ,CAACc,IAAI;IACjBH,MAAM,UAAUX,gBAAU;wDAE7BF,oBAMoC;;IALlCe,CAAC,EAAC,GAAG;IAACE,CAAC,EAAC,GAAG;IACVI,EAAE,EAAEH,cAAK;IACTI,EAAE,EAAEJ,cAAK;IACTK,KAAK,EAAErB,cAAQ,CAACc,IAAI;IACpBQ,MAAM,EAAEtB,cAAQ,CAACc,IAAI;IACrBH,MAAM,UAAUX,gBAAU;+EAG/BC,oBAAsE;IAA9DsB,GAAG,EAAC,kBAAkB;IAAEC,KAAK,oCAAoBR,eAAM","names":["class","_createElementBlock","_hoisted_1","$data","_createElementVNode","id","x1","y1","x2","y2","_Fragment","lc","key","offset","stroke","fill","x","area","y","$options","cx","cy","rx","ry","width","height","ref","style"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
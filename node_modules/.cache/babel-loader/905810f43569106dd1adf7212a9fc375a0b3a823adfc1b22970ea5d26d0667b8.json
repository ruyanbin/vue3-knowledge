{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderSlot as _renderSlot } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"fill\"];\nconst _hoisted_3 = [\"fill\", \"cx\"];\nconst _hoisted_4 = [\"fill\", \"cx\", \"cy\"];\nconst _hoisted_5 = [\"fill\", \"cy\"];\nconst _hoisted_6 = [\"stroke\", \"points\"];\nconst _hoisted_7 = [\"stroke\", \"points\"];\nconst _hoisted_8 = [\"stroke\", \"points\"];\nconst _hoisted_9 = [\"stroke\", \"points\"];\nconst _hoisted_10 = [\"stroke\"];\nconst _hoisted_11 = [\"stroke\"];\nconst _hoisted_12 = [\"stroke\", \"points\"];\nconst _hoisted_13 = [\"stroke\", \"points\"];\nconst _hoisted_14 = [\"stroke\", \"points\"];\nconst _hoisted_15 = [\"stroke\", \"points\"];\nconst _hoisted_16 = [\"stroke\", \"points\"];\nconst _hoisted_17 = [\"stroke\", \"points\"];\nconst _hoisted_18 = {\n  class: \"border-box-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-border-box-6\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    class: \"dv-svg-container\",\n    width: _ctx.width,\n    height: _ctx.height\n  }, [_createElementVNode(\"circle\", {\n    fill: $data.mergedColor[1],\n    cx: \"5\",\n    cy: \"5\",\n    r: \"2\"\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[1],\n    cx: _ctx.width - 5,\n    cy: \"5\",\n    r: \"2\"\n  }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[1],\n    cx: _ctx.width - 5,\n    cy: _ctx.height - 5,\n    r: \"2\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[1],\n    cx: \"5\",\n    cy: _ctx.height - 5,\n    r: \"2\"\n  }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `10, 4 ${_ctx.width - 10}, 4`\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `10, ${_ctx.height - 4} ${_ctx.width - 10}, ${_ctx.height - 4}`\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `5, 70 5, ${_ctx.height - 70}`\n  }, null, 8 /* PROPS */, _hoisted_8), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `${_ctx.width - 5}, 70 ${_ctx.width - 5}, ${_ctx.height - 70}`\n  }, null, 8 /* PROPS */, _hoisted_9), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `3, 10, 3, 50`\n  }, null, 8 /* PROPS */, _hoisted_10), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `7, 30 7, 80`\n  }, null, 8 /* PROPS */, _hoisted_11), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `${_ctx.width - 3}, 10 ${_ctx.width - 3}, 50`\n  }, null, 8 /* PROPS */, _hoisted_12), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `${_ctx.width - 7}, 30 ${_ctx.width - 7}, 80`\n  }, null, 8 /* PROPS */, _hoisted_13), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `3, ${_ctx.height - 10} 3, ${_ctx.height - 50}`\n  }, null, 8 /* PROPS */, _hoisted_14), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `7, ${_ctx.height - 30} 7, ${_ctx.height - 80}`\n  }, null, 8 /* PROPS */, _hoisted_15), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `${_ctx.width - 3}, ${_ctx.height - 10} ${_ctx.width - 3}, ${_ctx.height - 50}`\n  }, null, 8 /* PROPS */, _hoisted_16), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `${_ctx.width - 7}, ${_ctx.height - 30} ${_ctx.width - 7}, ${_ctx.height - 80}`\n  }, null, 8 /* PROPS */, _hoisted_17)], 8 /* PROPS */, _hoisted_1)), _createElementVNode(\"div\", _hoisted_18, [_renderSlot(_ctx.$slots, \"default\")])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;EAqBSA,KAAK,EAAC;AAAoB;;uBApBjCC,oBAuBM;IAvBDD,KAAK,EAAC,iBAAiB;IAAEE,GAAG,EAAEC;qBACjCF,oBAiBM;IAjBDD,KAAK,EAAC,kBAAkB;IAAEI,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED;MACpDE,oBAAoD;IAA3CC,IAAI,EAAEL,iBAAW;IAAKM,EAAE,EAAC,GAAG;IAACC,EAAE,EAAC,GAAG;IAACC,CAAC,EAAC;uCAC/CJ,oBAA8D;IAArDC,IAAI,EAAEL,iBAAW;IAAMM,EAAE,EAAEJ,UAAK;IAAMK,EAAE,EAAC,GAAG;IAACC,CAAC,EAAC;uCACxDJ,oBAAwE;IAA/DC,IAAI,EAAEL,iBAAW;IAAMM,EAAE,EAAEJ,UAAK;IAAOK,EAAE,EAAEL,WAAM;IAAMM,CAAC,EAAC;uCAClEJ,oBAA+D;IAAtDC,IAAI,EAAEL,iBAAW;IAAKM,EAAE,EAAC,GAAG;IAAEC,EAAE,EAAEL,WAAM;IAAMM,CAAC,EAAC;uCACzDJ,oBAAwE;IAA7DK,MAAM,EAAET,iBAAW;IAAMU,MAAM,WAAWR,UAAK;uCAC1DE,oBAAgG;IAArFK,MAAM,EAAET,iBAAW;IAAMU,MAAM,SAASR,WAAM,QAAQA,UAAK,UAAUA,WAAM;uCACtFE,oBAAyE;IAA9DK,MAAM,EAAET,iBAAW;IAAMU,MAAM,cAAcR,WAAM;uCAC9DE,oBAA+F;IAApFK,MAAM,EAAET,iBAAW;IAAMU,MAAM,KAAKR,UAAK,YAAYA,UAAK,SAASA,WAAM;uCACpFE,oBAA8D;IAAnDK,MAAM,EAAET,iBAAW;IAAMU,MAAM,EAAE;wCAC5CN,oBAA6D;IAAlDK,MAAM,EAAET,iBAAW;IAAMU,MAAM,EAAE;wCAC5CN,oBAAmF;IAAxEK,MAAM,EAAET,iBAAW;IAAMU,MAAM,KAAKR,UAAK,YAAYA,UAAK;wCACrEE,oBAAmF;IAAxEK,MAAM,EAAET,iBAAW;IAAMU,MAAM,KAAKR,UAAK,YAAYA,UAAK;wCACrEE,oBAAqF;IAA1EK,MAAM,EAAET,iBAAW;IAAMU,MAAM,QAAQR,WAAM,YAAYA,WAAM;wCAC1EE,oBAAqF;IAA1EK,MAAM,EAAET,iBAAW;IAAMU,MAAM,QAAQR,WAAM,YAAYA,WAAM;wCAC1EE,oBAA2G;IAAhGK,MAAM,EAAET,iBAAW;IAAMU,MAAM,KAAKR,UAAK,SAASA,WAAM,SAASA,UAAK,SAASA,WAAM;wCAChGE,oBAA2G;IAAhGK,MAAM,EAAET,iBAAW;IAAMU,MAAM,KAAKR,UAAK,SAASA,WAAM,SAASA,UAAK,SAASA,WAAM;sEAGlGE,oBAEM,OAFNO,WAEM,GADJC,YAAaV","names":["class","_createElementBlock","ref","$data","width","_ctx","height","_createElementVNode","fill","cx","cy","r","stroke","points","_hoisted_18","_renderSlot"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/borderBox6/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-border-box-6\" :ref=\"ref\">\n    <svg class=\"dv-svg-container\" :width=\"width\" :height=\"height\">\n      <circle :fill=\"mergedColor[1]\" cx=\"5\" cy=\"5\" r=\"2\"/>\n      <circle :fill=\"mergedColor[1]\" :cx=\"width - 5\" cy=\"5\" r=\"2\" />\n      <circle :fill=\"mergedColor[1]\" :cx=\"width - 5\" :cy=\"height - 5\" r=\"2\" />\n      <circle :fill=\"mergedColor[1]\" cx=\"5\" :cy=\"height - 5\" r=\"2\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`10, 4 ${width - 10}, 4`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`10, ${height - 4} ${width - 10}, ${height - 4}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`5, 70 5, ${height - 70}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`${width - 5}, 70 ${width - 5}, ${height - 70}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`3, 10, 3, 50`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`7, 30 7, 80`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`${width - 3}, 10 ${width - 3}, 50`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`${width - 7}, 30 ${width - 7}, 80`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`3, ${height - 10} 3, ${height - 50}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`7, ${height - 30} 7, ${height - 80}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`${width - 3}, ${height - 10} ${width - 3}, ${height - 50}`\" />\n      <polyline :stroke=\"mergedColor[0]\" :points=\"`${width - 7}, ${height - 30} ${width - 7}, ${height - 80}`\" />\n    </svg>\n\n    <div class=\"border-box-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize.js'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvBorderBox6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    return {\n      ref: 'border-box-6',\n\n      defaultColor: ['rgba(255, 255, 255, 0.35)', 'gray'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
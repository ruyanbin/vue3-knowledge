{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nimport { defineComponent, ref, shallowRef, onMounted, watch, toRaw, openBlock, createElementBlock, watchEffect } from \"vue\";\nimport { createEditor, DomEditor, createToolbar } from \"@wangeditor/editor\";\nfunction genErrorInfo(fnName) {\n  let info = `\\u8BF7\\u4F7F\\u7528 '@${fnName}' \\u4E8B\\u4EF6\\uFF0C\\u4E0D\\u8981\\u653E\\u5728 props \\u4E2D`;\n  info += `\nPlease use '@${fnName}' event instead of props`;\n  return info;\n}\nvar _export_sfc = (sfc, props) => {\n  for (const [key, val] of props) {\n    sfc[key] = val;\n  }\n  return sfc;\n};\nconst _sfc_main$1 = defineComponent({\n  props: {\n    mode: {\n      type: String,\n      default: \"default\"\n    },\n    defaultContent: {\n      type: Array,\n      default: []\n    },\n    defaultHtml: {\n      type: String,\n      default: \"\"\n    },\n    defaultConfig: {\n      type: Object,\n      default: {}\n    },\n    modelValue: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(props, context) {\n    const box = ref(null);\n    const editorRef = shallowRef(null);\n    const curValue = ref(\"\");\n    const initEditor = () => {\n      if (!box.value) return;\n      const defaultContent = toRaw(props.defaultContent);\n      createEditor({\n        selector: box.value,\n        mode: props.mode,\n        content: defaultContent || [],\n        html: props.defaultHtml || props.modelValue || \"\",\n        config: __spreadProps(__spreadValues({}, props.defaultConfig), {\n          onCreated(editor) {\n            editorRef.value = editor;\n            context.emit(\"onCreated\", editor);\n            if (props.defaultConfig.onCreated) {\n              const info = genErrorInfo(\"onCreated\");\n              throw new Error(info);\n            }\n          },\n          onChange(editor) {\n            const editorHtml = editor.getHtml();\n            curValue.value = editorHtml;\n            context.emit(\"update:modelValue\", editorHtml);\n            context.emit(\"onChange\", editor);\n            if (props.defaultConfig.onChange) {\n              const info = genErrorInfo(\"onChange\");\n              throw new Error(info);\n            }\n          },\n          onDestroyed(editor) {\n            context.emit(\"onDestroyed\", editor);\n            if (props.defaultConfig.onDestroyed) {\n              const info = genErrorInfo(\"onDestroyed\");\n              throw new Error(info);\n            }\n          },\n          onMaxLength(editor) {\n            context.emit(\"onMaxLength\", editor);\n            if (props.defaultConfig.onMaxLength) {\n              const info = genErrorInfo(\"onMaxLength\");\n              throw new Error(info);\n            }\n          },\n          onFocus(editor) {\n            context.emit(\"onFocus\", editor);\n            if (props.defaultConfig.onFocus) {\n              const info = genErrorInfo(\"onFocus\");\n              throw new Error(info);\n            }\n          },\n          onBlur(editor) {\n            context.emit(\"onBlur\", editor);\n            if (props.defaultConfig.onBlur) {\n              const info = genErrorInfo(\"onBlur\");\n              throw new Error(info);\n            }\n          },\n          customAlert(info, type) {\n            context.emit(\"customAlert\", info, type);\n            if (props.defaultConfig.customAlert) {\n              const info2 = genErrorInfo(\"customAlert\");\n              throw new Error(info2);\n            }\n          },\n          customPaste: (editor, event) => {\n            if (props.defaultConfig.customPaste) {\n              const info = genErrorInfo(\"customPaste\");\n              throw new Error(info);\n            }\n            let res;\n            context.emit(\"customPaste\", editor, event, val => {\n              res = val;\n            });\n            return res;\n          }\n        })\n      });\n    };\n    function setHtml(newHtml) {\n      const editor = editorRef.value;\n      if (editor == null) return;\n      editor.setHtml(newHtml);\n    }\n    onMounted(() => {\n      initEditor();\n    });\n    watch(() => props.modelValue, newVal => {\n      if (newVal === curValue.value) return;\n      setHtml(newVal);\n    });\n    return {\n      box\n    };\n  }\n});\nconst _hoisted_1$1 = {\n  ref: \"box\",\n  style: {\n    \"height\": \"100%\"\n  }\n};\nfunction _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$1, null, 512);\n}\nvar Editor = /* @__PURE__ */_export_sfc(_sfc_main$1, [[\"render\", _sfc_render$1]]);\nconst _sfc_main = defineComponent({\n  props: {\n    editor: {\n      type: Object\n    },\n    mode: {\n      type: String,\n      default: \"default\"\n    },\n    defaultConfig: {\n      type: Object,\n      default: {}\n    }\n  },\n  setup(props) {\n    const selector = ref(null);\n    const create = editor => {\n      if (!selector.value) return;\n      if (editor == null) {\n        throw new Error(\"Not found instance of Editor when create <Toolbar/> component\");\n      }\n      if (DomEditor.getToolbar(editor)) return;\n      createToolbar({\n        editor,\n        selector: selector.value || \"<div></div>\",\n        mode: props.mode,\n        config: props.defaultConfig\n      });\n    };\n    watchEffect(() => {\n      const {\n        editor\n      } = props;\n      if (editor == null) return;\n      create(editor);\n    });\n    return {\n      selector\n    };\n  }\n});\nconst _hoisted_1 = {\n  ref: \"selector\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, null, 512);\n}\nvar Toolbar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Editor, Toolbar };","map":{"version":3,"mappings":"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","names":["fnName","info","sfc","props","key","val","_sfc_main","defineComponent","mode","type","String","default","defaultContent","Array","defaultHtml","defaultConfig","Object","modelValue","setup","context","box","ref","editorRef","shallowRef","curValue","initEditor","value","toRaw","selector","content","html","config","__spreadProps","onCreated","editor","emit","genErrorInfo","Error","onChange","editorHtml","getHtml","onDestroyed","onMaxLength","onFocus","onBlur","customAlert","info2","customPaste","event","res","newHtml","setHtml","newVal","_hoisted_1","style","_cache","create","DomEditor","getToolbar"],"sources":["../src/utils/create-info.ts","../plugin-vue:export-helper","../src/components/Editor.vue","../src/components/Toolbar.vue"],"sourcesContent":["/**\n * @description 错误提示信息\n * @author liuqh\n */\nexport function genErrorInfo(fnName: string): string {\n  let info = `请使用 '@${fnName}' 事件，不要放在 props 中`\n  info += `\\nPlease use '@${fnName}' event instead of props`\n  return info\n}","\nexport default (sfc, props) => {\n  for (const [key, val] of props) {\n    sfc[key] = val\n  }\n  return sfc\n}\n","<template>\n  <div ref=\"box\" style=\"height: 100%\"></div>\n</template>\n\n<script lang=\"ts\">\nimport { onMounted, defineComponent, ref, PropType, toRaw, watch, shallowRef } from 'vue'\nimport { createEditor, IEditorConfig, SlateDescendant, IDomEditor } from '@wangeditor/editor'\nimport { genErrorInfo } from '../utils/create-info'\n\nexport default defineComponent({\n  props: {\n    /** 编辑器模式 */\n    mode: {\n      type: String,\n      default: 'default',\n    },\n    /** 编辑器默认内容 */\n    defaultContent: {\n      type: Array as PropType<SlateDescendant[]>,\n      default: [],\n    },\n    defaultHtml: {\n      type: String,\n      default: '',\n    },\n    /** 编辑器默认配置 */\n    defaultConfig: {\n      type: Object as PropType<Partial<IEditorConfig>>,\n      default: {},\n    },\n    /* 自定义 v-model */\n    modelValue: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, context) {\n    const box = ref(null) // 编辑器容器\n\n    const editorRef = shallowRef<null | IDomEditor>(null) // editor 实例，必须用 shallowRef\n\n    const curValue = ref('') // 记录 editor 当前 html 内容\n\n    /**\n     * 初始化编辑器\n     */\n    const initEditor = () => {\n      if (!box.value) return\n      // 获取原始数据，解除响应式特性\n      const defaultContent = toRaw(props.defaultContent)\n\n      createEditor({\n        selector: box.value! as Element,\n        mode: props.mode,\n        content: defaultContent || [],\n        html: props.defaultHtml || props.modelValue || '',\n        config: {\n          ...props.defaultConfig,\n          onCreated(editor) {\n            editorRef.value = editor // 记录 editor 实例\n\n            context.emit('onCreated', editor)\n\n            if (props.defaultConfig.onCreated) {\n              const info = genErrorInfo('onCreated')\n              throw new Error(info)\n            }\n          },\n          onChange(editor) {\n            const editorHtml = editor.getHtml()\n            curValue.value = editorHtml // 记录当前内容\n            context.emit('update:modelValue', editorHtml) // 触发 v-model 值变化\n\n            context.emit('onChange', editor)\n            if (props.defaultConfig.onChange) {\n              const info = genErrorInfo('onChange')\n              throw new Error(info)\n            }\n          },\n          onDestroyed(editor) {\n            context.emit('onDestroyed', editor)\n            if (props.defaultConfig.onDestroyed) {\n              const info = genErrorInfo('onDestroyed')\n              throw new Error(info)\n            }\n          },\n          onMaxLength(editor) {\n            context.emit('onMaxLength', editor)\n            if (props.defaultConfig.onMaxLength) {\n              const info = genErrorInfo('onMaxLength')\n              throw new Error(info)\n            }\n          },\n          onFocus(editor) {\n            context.emit('onFocus', editor)\n            if (props.defaultConfig.onFocus) {\n              const info = genErrorInfo('onFocus')\n              throw new Error(info)\n            }\n          },\n          onBlur(editor) {\n            context.emit('onBlur', editor)\n            if (props.defaultConfig.onBlur) {\n              const info = genErrorInfo('onBlur')\n              throw new Error(info)\n            }\n          },\n          customAlert(info, type) {\n            context.emit('customAlert', info, type)\n            // @ts-ignore\n            if (props.defaultConfig.customAlert) {\n              const info = genErrorInfo('customAlert')\n              throw new Error(info)\n            }\n          },\n          customPaste: (editor, event): any => {\n            if (props.defaultConfig.customPaste) {\n              const info = genErrorInfo('customPaste')\n              throw new Error(info)\n            }\n            let res\n            context.emit('customPaste', editor, event, (val: boolean) => {\n              res = val\n            })\n            return res\n          },\n        },\n      })\n    }\n\n    /**\n     * 设置 HTML\n     * @param newHtml new html\n     */\n    function setHtml(newHtml: string) {\n      const editor = editorRef.value\n      if (editor == null) return\n      editor.setHtml(newHtml)\n    }\n\n    /**\n     * 元素挂在后初始化编辑器\n     */\n    onMounted(() => {\n      initEditor()\n    })\n\n    // 监听 v-model 值变化\n    watch(\n      () => props.modelValue,\n      newVal => {\n        if (newVal === curValue.value) return // 和当前内容一样，则忽略\n\n        // 重新设置 HTML\n        setHtml(newVal)\n      }\n    )\n\n    return {\n      box,\n    }\n  },\n})\n</script>\n","<template>\n  <div ref=\"selector\"></div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, watchEffect, PropType } from 'vue'\nimport { createToolbar, IToolbarConfig, IDomEditor, DomEditor } from '@wangeditor/editor'\n\nexport default defineComponent({\n  props: {\n    // editor 实例\n    editor: {\n      type: Object as PropType<IDomEditor>\n    },\n    /** 编辑器模式 */\n    mode: {\n      type: String,\n      default: 'default',\n    },\n    /** 编辑器默认配置 */\n    defaultConfig: {\n      type: Object as PropType<Partial<IToolbarConfig>>,\n      default: {},\n    },\n  },\n  setup(props) {\n    // toolbar 容器\n    const selector = ref(null)\n\n    /**\n     * 初始化 toolbar\n     */\n    const create = (editor: IDomEditor) => {\n      if (!selector.value) return\n      if (editor == null) {\n        throw new Error('Not found instance of Editor when create <Toolbar/> component')\n      }\n      if (DomEditor.getToolbar(editor)) return // 不重复创建\n\n      createToolbar({\n        editor,\n        selector: (selector.value! as Element) || '<div></div>',\n        mode: props.mode,\n        config: props.defaultConfig,\n      })\n    }\n\n    watchEffect( () => {\n      const { editor } = props\n      if (editor == null) return\n      create(editor) // 初始化 toolbar\n    })\n\n    return {\n      selector,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
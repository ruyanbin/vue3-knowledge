{"ast":null,"code":"import { createElementVNode as _createElementVNode, unref as _unref, resolveComponent as _resolveComponent, isRef as _isRef, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-de8b2910\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"mapcontainer\"\n}, null, -1));\nconst _hoisted_2 = {\n  class: \"search-box\"\n};\nimport AMapLoader from '@amap/amap-jsapi-loader';\nexport default {\n  __name: 'search',\n  props: {\n    modelValue: {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    window._AMapSecurityConfig = {\n      securityJsCode: 'eb7f0b1ade00661146b243b0026c8094'\n    };\n    const map = shallowRef(null);\n    // 地点\n    const location = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        emit('update:modelValue', val);\n      }\n    });\n    watch(location, val => {\n      if (val.longitude && val.latitude) {\n        drawMarker();\n      }\n    });\n    const keyword = ref('');\n    let placeSearch, AMapObj, marker, geocoder;\n    function initMap() {\n      AMapLoader.load({\n        key: '0c93577f3a72d04f9bd2130824983cb2',\n        // 申请好的Web端Key，首次调用 load 时必填\n        version: '2.0'\n      }).then(AMap => {\n        AMapObj = AMap;\n        const layer = new AMap.TileLayer({\n          zooms: [3, 20],\n          //可见级别\n          visible: true,\n          //是否可见\n          opacity: 1,\n          //透明度\n          zIndex: 0 //叠加层级\n        });\n\n        map.value = new AMap.Map('mapcontainer', {\n          layers: [layer],\n          viewMode: '2d',\n          //是否为3D地图模式\n          zoom: 15,\n          //初始化地图级别\n          layers: [layer]\n        });\n        // 添加点击事件\n        map.value.on('click', onMapClick);\n        if (location.value.longitude) {\n          drawMarker();\n        }\n        AMap.plugin(['AMap.ToolBar', 'AMap.Scale', 'AMap.Geolocation', 'AMap.PlaceSearch', 'AMap.Geocoder'], () => {\n          // 缩放条\n          const toolbar = new AMap.ToolBar();\n          // 比例尺\n          const scale = new AMap.Scale();\n          // 定位\n          const geolocation = new AMap.Geolocation({\n            enableHighAccuracy: true,\n            //是否使用高精度定位，默认:true\n            timeout: 10000,\n            //超过10秒后停止定位，默认：5s\n            position: 'RT',\n            //定位按钮的停靠位置\n            buttonOffset: new AMap.Pixel(10, 20),\n            //定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\n            zoomToAccuracy: true //定位成功后是否自动调整地图视野到定位点\n          });\n\n          geocoder = new AMap.Geocoder({\n            city: '全国'\n          });\n          map.value.addControl(geolocation);\n          map.value.addControl(toolbar);\n          map.value.addControl(scale);\n          placeSearch = new AMap.PlaceSearch({\n            map: map.value,\n            city: '',\n            pageSize: 30,\n            // 单页显示结果条数\n            pageIndex: 1,\n            // 页码\n            citylimit: false,\n            // 是否强制限制在设置的城市内搜索\n            autoFitView: true\n          });\n        });\n      });\n    }\n    onMounted(() => {\n      initMap();\n    });\n    // 搜索地图\n    function handleSearch(queryString, cb) {\n      placeSearch.search(queryString, (status, result) => {\n        if (result && typeof result === 'object' && result.poiList) {\n          const list = result.poiList.pois;\n          list.forEach(item => {\n            item.value = item.name;\n            item.label = item.name;\n          });\n          cb(list);\n        } else {\n          cb([]);\n        }\n      });\n    }\n    // 点击地图\n    function onMapClick(e) {\n      const {\n        lng,\n        lat\n      } = e.lnglat;\n      // 逆地理编码\n      geocoder.getAddress([lng, lat], (status, result) => {\n        if (status === 'complete' && result.info === 'OK') {\n          const {\n            addressComponent,\n            formattedAddress\n          } = result.regeocode;\n          let {\n            city,\n            province,\n            district\n          } = addressComponent;\n          if (!city) {\n            // 直辖市\n            city = province;\n          }\n          location.value = {\n            longitude: lng,\n            latitude: lat,\n            address: formattedAddress,\n            zone: [province, city, district]\n          };\n        }\n      });\n    }\n    // 点击搜索项\n    function handleSelect(item) {\n      const {\n        pname,\n        cityname,\n        adname,\n        address,\n        name\n      } = item;\n      const {\n        lng,\n        lat\n      } = item.location;\n      location.value = {\n        longitude: lng,\n        latitude: lat,\n        address,\n        zone: [pname, cityname, adname],\n        name\n      };\n      map.value.setZoomAndCenter(16, [lng, lat]);\n    }\n    // 绘制地点marker\n    function drawMarker(val) {\n      const {\n        longitude,\n        latitude\n      } = location.value || val;\n      if (marker) {\n        marker.setMap(null);\n      }\n      marker = new AMapObj.Marker({\n        position: new AMapObj.LngLat(longitude, latitude),\n        anchor: 'bottom-center'\n      });\n      map.value.add(marker);\n      map.value.setZoomAndCenter(16, [longitude, latitude]);\n    }\n    return (_ctx, _cache) => {\n      const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n      const _component_el_input = _resolveComponent(\"el-input\");\n      return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_autocomplete, {\n        modelValue: _unref(keyword),\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(keyword) ? keyword.value = $event : null),\n        \"fetch-suggestions\": handleSearch,\n        \"trigger-on-focus\": false,\n        clearable: \"\",\n        placeholder: \"输入城市+关键字搜索\",\n        onSelect: handleSelect,\n        style: {\n          \"width\": \"300px\"\n        }\n      }, null, 8, [\"modelValue\"]), _createVNode(_component_el_input, {\n        modelValue: _unref(location).longitude,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _unref(location).longitude = $event),\n        placeholder: \"点击地图选择经度\",\n        maxlength: \"15\",\n        readonly: \"\",\n        style: {\n          \"width\": \"150px\",\n          \"margin\": \"0 5px\"\n        }\n      }, null, 8, [\"modelValue\"]), _createVNode(_component_el_input, {\n        modelValue: _unref(location).latitude,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _unref(location).latitude = $event),\n        placeholder: \"点击地图选择纬度\",\n        maxlength: \"15\",\n        readonly: \"\",\n        style: {\n          \"width\": \"150px\"\n        }\n      }, null, 8, [\"modelValue\"])])], 64);\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
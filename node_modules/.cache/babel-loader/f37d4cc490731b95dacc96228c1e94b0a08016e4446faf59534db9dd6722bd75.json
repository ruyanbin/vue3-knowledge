{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvCapsuleChart',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Capsule chart data\n         * @type {Array<Object>}\n         * @default data = []\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\n         */\n        data: [],\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293'],\n        /**\n         * @description Chart unit\n         * @type {String}\n         * @default unit = ''\n         */\n        unit: '',\n        /**\n         * @description Show item value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n      mergedConfig: null,\n      capsuleLength: [],\n      capsuleValue: [],\n      labelData: [],\n      labelDataLength: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    calcData() {\n      const {\n        mergeConfig,\n        calcCapsuleLengthAndLabelData\n      } = this;\n      mergeConfig();\n      calcCapsuleLengthAndLabelData();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcCapsuleLengthAndLabelData() {\n      const {\n        data\n      } = this.mergedConfig;\n      if (!data.length) return;\n      const capsuleValue = data.map(({\n        value\n      }) => value);\n      const maxValue = Math.max(...capsuleValue);\n      this.capsuleValue = capsuleValue;\n      this.capsuleLength = capsuleValue.map(v => maxValue ? v / maxValue : 0);\n      const oneFifth = maxValue / 5;\n      const labelData = Array.from(new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth))));\n      this.labelData = labelData;\n      this.labelDataLength = Array.from(labelData).map(v => maxValue ? v / maxValue : 0);\n    }\n  },\n  mounted() {\n    const {\n      calcData\n    } = this;\n    calcData();\n  }\n};","map":{"version":3,"mappings":"AAmCA,SAASA,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAQ,QAAS,qCAAoC;AAE9D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,IAAI,GAAG;IACL,OAAO;MACLC,aAAa,EAAE;QACb;;;;;;QAMAD,IAAI,EAAE,EAAE;QACR;;;;;;QAMAE,MAAM,EAAE,CACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAQ,CACT;QACD;;;;;QAKAC,IAAI,EAAE,EAAE;QACR;;;;;QAKAC,SAAS,EAAE;MACb,CAAC;MAEDC,YAAY,EAAE,IAAI;MAElBC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE;IACnB;EACF,CAAC;EACDC,KAAK,EAAE;IACLd,MAAM,GAAG;MACP,MAAM;QAAEe;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPD,QAAQ,GAAG;MACT,MAAM;QAAEE,WAAW;QAAEC;MAA8B,IAAI,IAAG;MAE1DD,WAAW,EAAC;MAEZC,6BAA6B,EAAC;IAChC,CAAC;IACDD,WAAW,GAAG;MACZ,IAAI;QAAEjB,MAAM;QAAEK;MAAc,IAAI,IAAG;MAEnC,IAAI,CAACI,YAAW,GAAIb,SAAS,CAC3BC,SAAS,CAACQ,aAAa,EAAE,IAAI,CAAC,EAC9BL,MAAK,IAAK,CAAC,EACb;IACF,CAAC;IACDkB,6BAA6B,GAAG;MAC9B,MAAM;QAAEd;MAAK,IAAI,IAAI,CAACK,YAAW;MAEjC,IAAI,CAACL,IAAI,CAACe,MAAM,EAAE;MAElB,MAAMR,YAAW,GAAIP,IAAI,CAACgB,GAAG,CAAC,CAAC;QAAEC;MAAM,CAAC,KAAKA,KAAK;MAElD,MAAMC,QAAO,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAGb,YAAY;MAEzC,IAAI,CAACA,YAAW,GAAIA,YAAW;MAE/B,IAAI,CAACD,aAAY,GAAIC,YAAY,CAACS,GAAG,CAACK,KAAMH,QAAO,GAAIG,IAAIH,QAAO,GAAI,CAAE;MAExE,MAAMI,QAAO,GAAIJ,QAAO,GAAI;MAE5B,MAAMV,SAAQ,GAAIe,KAAK,CAACC,IAAI,CAC1B,IAAIC,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAACV,GAAG,CAAC,CAACK,CAAC,EAAEM,CAAC,KAAKR,IAAI,CAACS,IAAI,CAACD,IAAIL,QAAQ,CAAC,CAAC,EACrE;MAEA,IAAI,CAACd,SAAQ,GAAIA,SAAQ;MAEzB,IAAI,CAACC,eAAc,GAAIc,KAAK,CAACC,IAAI,CAAChB,SAAS,CAAC,CAACQ,GAAG,CAACK,KAC/CH,QAAO,GAAIG,IAAIH,QAAO,GAAI,EAC5B;IACF;EACF,CAAC;EACDW,OAAO,GAAG;IACR,MAAM;MAAElB;IAAS,IAAI,IAAG;IAExBA,QAAQ,EAAC;EACX;AACF","names":["deepMerge","deepClone","name","props","config","type","Object","default","data","defaultConfig","colors","unit","showValue","mergedConfig","capsuleLength","capsuleValue","labelData","labelDataLength","watch","calcData","methods","mergeConfig","calcCapsuleLengthAndLabelData","length","map","value","maxValue","Math","max","v","oneFifth","Array","from","Set","fill","i","ceil","mounted"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/capsuleChart/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-capsule-chart\">\n    <template v-if=\"mergedConfig\">\n      <div class=\"label-column\">\n        <div v-for=\"item in mergedConfig.data\" :key=\"item.name\">{{ item.name }}</div>\n        <div>&nbsp;</div>\n      </div>\n\n      <div class=\"capsule-container\">\n        <div class=\"capsule-item\" v-for=\"(capsule, index) in capsuleLength\" :key=\"index\">\n          <div\n            class=\"capsule-item-column\"\n            :style=\"`width: ${capsule * 100}%; background-color: ${mergedConfig.colors[index % mergedConfig.colors.length]};`\"\n          >\n            <div\n              v-if=\"mergedConfig.showValue\"\n              class=\"capsule-item-value\"\n            >{{ capsuleValue[index] }}</div>\n          </div>\n        </div>\n\n        <div class=\"unit-label\">\n          <div\n            v-for=\"(label, index) in labelData\"\n            :key=\"label + index\"\n          >{{ label }}</div>\n        </div>\n      </div>\n\n      <div class=\"unit-text\" v-if=\"mergedConfig.unit\">{{ mergedConfig.unit }}</div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvCapsuleChart',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Capsule chart data\n         * @type {Array<Object>}\n         * @default data = []\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\n         */\n        data: [],\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: [\n          '#37a2da',\n          '#32c5e9',\n          '#67e0e3',\n          '#9fe6b8',\n          '#ffdb5c',\n          '#ff9f7f',\n          '#fb7293'\n        ],\n        /**\n         * @description Chart unit\n         * @type {String}\n         * @default unit = ''\n         */\n        unit: '',\n        /**\n         * @description Show item value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n\n      mergedConfig: null,\n\n      capsuleLength: [],\n      capsuleValue: [],\n      labelData: [],\n      labelDataLength: []\n    }\n  },\n  watch: {\n    config() {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    calcData() {\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\n\n      mergeConfig()\n\n      calcCapsuleLengthAndLabelData()\n    },\n    mergeConfig() {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(\n        deepClone(defaultConfig, true),\n        config || {}\n      )\n    },\n    calcCapsuleLengthAndLabelData() {\n      const { data } = this.mergedConfig\n\n      if (!data.length) return\n\n      const capsuleValue = data.map(({ value }) => value)\n\n      const maxValue = Math.max(...capsuleValue)\n\n      this.capsuleValue = capsuleValue\n\n      this.capsuleLength = capsuleValue.map(v => (maxValue ? v / maxValue : 0))\n\n      const oneFifth = maxValue / 5\n\n      const labelData = Array.from(\n        new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth)))\n      )\n\n      this.labelData = labelData\n\n      this.labelDataLength = Array.from(labelData).map(v =>\n        maxValue ? v / maxValue : 0\n      )\n    }\n  },\n  mounted() {\n    const { calcData } = this\n\n    calcData()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
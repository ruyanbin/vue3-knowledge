{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { randomExtend, getPointDistance } from '../../../util/index';\nimport autoResize from '../../../mixin/autoResize';\nexport default {\n  name: 'DvFlylineChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const timestamp = Date.now();\n    return {\n      ref: 'dv-flyline-chart',\n      unique: Math.random(),\n      maskId: `flyline-mask-id-${timestamp}`,\n      maskCircleId: `mask-circle-id-${timestamp}`,\n      gradientId: `gradient-id-${timestamp}`,\n      gradient2Id: `gradient2-id-${timestamp}`,\n      defaultConfig: {\n        /**\n         * @description Flyline chart center point\n         * @type {Array<Number>}\n         * @default centerPoint = [0, 0]\n         */\n        centerPoint: [0, 0],\n        /**\n         * @description Flyline start points\n         * @type {Array<Array<Number>>}\n         * @default points = []\n         * @example points = [[10, 10], [100, 100]]\n         */\n        points: [],\n        /**\n         * @description Flyline width\n         * @type {Number}\n         * @default lineWidth = 1\n         */\n        lineWidth: 1,\n        /**\n         * @description Orbit color\n         * @type {String}\n         * @default orbitColor = 'rgba(103, 224, 227, .2)'\n         */\n        orbitColor: 'rgba(103, 224, 227, .2)',\n        /**\n         * @description Flyline color\n         * @type {String}\n         * @default orbitColor = '#ffde93'\n         */\n        flylineColor: '#ffde93',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Flyline radius\n         * @type {Number}\n         * @default flylineRadius = 100\n         */\n        flylineRadius: 100,\n        /**\n         * @description Flyline animation duration\n         * @type {Array<Number>}\n         * @default duration = [20, 30]\n         */\n        duration: [20, 30],\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true,\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgUrl = ''\n         * @example bgImgUrl = './img/bg.jpg'\n         */\n        bgImgUrl: '',\n        /**\n         * @description Text configuration\n         * @type {Object}\n         */\n        text: {\n          /**\n           * @description Text offset\n           * @type {Array<Number>}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Halo configuration\n         * @type {Object}\n         */\n        halo: {\n          /**\n           * @description Weather to show halo\n           * @type {Boolean}\n           * @default show = true\n           * @example show = true | false\n           */\n          show: true,\n          /**\n           * @description Halo animation duration (10 = 1s)\n           * @type {Number}\n           * @default duration = 30\n           */\n          duration: 30,\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo max radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Center point img configuration\n         * @type {Object}\n         */\n        centerPointImg: {\n          /**\n           * @description Center point img width\n           * @type {Number}\n           * @default width = 40\n           */\n          width: 40,\n          /**\n           * @description Center point img height\n           * @type {Number}\n           * @default height = 40\n           */\n          height: 40,\n          /**\n           * @description Center point img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        },\n        /**\n         * @description Points img configuration\n         * @type {Object}\n         * @default radius = 120\n         */\n        pointsImg: {\n          /**\n           * @description Points img width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Points img height\n           * @type {Number}\n           * @default height = 15\n           */\n          height: 15,\n          /**\n           * @description Points img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        }\n      },\n      mergedConfig: null,\n      paths: [],\n      lengths: [],\n      times: [],\n      texts: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    async calcData() {\n      const {\n        mergeConfig,\n        createFlylinePaths,\n        calcLineLengths\n      } = this;\n      mergeConfig();\n      createFlylinePaths();\n      await calcLineLengths();\n      const {\n        calcTimes,\n        calcTexts\n      } = this;\n      calcTimes();\n      calcTexts();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n      const {\n        points\n      } = mergedConfig;\n      mergedConfig.points = points.map(item => {\n        if (item instanceof Array) {\n          return {\n            position: item,\n            text: ''\n          };\n        }\n        return item;\n      });\n      this.mergedConfig = mergedConfig;\n    },\n    createFlylinePaths() {\n      const {\n        getPath,\n        mergedConfig,\n        width,\n        height\n      } = this;\n      let {\n        centerPoint,\n        points,\n        relative\n      } = mergedConfig;\n      points = points.map(({\n        position\n      }) => position);\n      if (relative) {\n        centerPoint = [width * centerPoint[0], height * centerPoint[1]];\n        points = points.map(([x, y]) => [width * x, height * y]);\n      }\n      this.paths = points.map(point => getPath(centerPoint, point));\n    },\n    getPath(center, point) {\n      const {\n        getControlPoint\n      } = this;\n      const controlPoint = getControlPoint(center, point);\n      return [point, controlPoint, center];\n    },\n    getControlPoint([sx, sy], [ex, ey]) {\n      const {\n        getKLinePointByx,\n        mergedConfig\n      } = this;\n      const {\n        curvature,\n        k\n      } = mergedConfig;\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2];\n      const distance = getPointDistance([sx, sy], [ex, ey]);\n      const targetLength = distance / curvature;\n      const disDived = targetLength / 2;\n      let [dx, dy] = [mx, my];\n      do {\n        dx += disDived;\n        dy = getKLinePointByx(k, [mx, my], dx)[1];\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength);\n      return [dx, dy];\n    },\n    getKLinePointByx(k, [lx, ly], x) {\n      const y = ly - k * lx + k * x;\n      return [x, y];\n    },\n    async calcLineLengths() {\n      const {\n        $nextTick,\n        paths,\n        $refs\n      } = this;\n      await $nextTick();\n      this.lengths = paths.map((foo, i) => $refs[`path${i}`][0].getTotalLength());\n    },\n    calcTimes() {\n      const {\n        duration,\n        points\n      } = this.mergedConfig;\n      this.times = points.map(foo => randomExtend(...duration) / 10);\n    },\n    calcTexts() {\n      const {\n        points\n      } = this.mergedConfig;\n      this.texts = points.map(({\n        text\n      }) => text);\n    },\n    consoleClickPos({\n      offsetX,\n      offsetY\n    }) {\n      const {\n        width,\n        height,\n        dev\n      } = this;\n      if (!dev) return;\n      const relativeX = (offsetX / width).toFixed(2);\n      const relativeY = (offsetY / height).toFixed(2);\n      console.warn(`dv-flyline-chart DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`);\n    }\n  }\n};","map":{"version":3,"mappings":"AAuJA,SAASA,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAQ,QAAS,qCAAoC;AAE9D,SAASC,YAAY,EAAEC,gBAAe,QAAS,qBAAoB;AAEnE,OAAOC,UAAS,MAAO,2BAA0B;AAEjD,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,MAAM,EAAE,CAACF,UAAU,CAAC;EACpBG,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB,CAAC;IACDC,GAAG,EAAE;MACHH,IAAI,EAAEI,OAAO;MACbF,OAAO,EAAE;IACX;EACF,CAAC;EACDG,IAAG,GAAK;IACN,MAAMC,SAAQ,GAAIC,IAAI,CAACC,GAAG,EAAC;IAC3B,OAAO;MACLC,GAAG,EAAE,kBAAkB;MACvBC,MAAM,EAAEC,IAAI,CAACC,MAAM,EAAE;MACrBC,MAAM,EAAG,mBAAkBP,SAAU,EAAC;MACtCQ,YAAY,EAAG,kBAAiBR,SAAU,EAAC;MAC3CS,UAAU,EAAG,eAAcT,SAAU,EAAC;MACtCU,WAAW,EAAG,gBAAeV,SAAU,EAAC;MAExCW,aAAa,EAAE;QACb;;;;;QAKAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnB;;;;;;QAMAC,MAAM,EAAE,EAAE;QACV;;;;;QAKAC,SAAS,EAAE,CAAC;QACZ;;;;;QAKAC,UAAU,EAAE,yBAAyB;QACrC;;;;;QAKAC,YAAY,EAAE,SAAS;QACvB;;;;;;QAMAC,CAAC,EAAE,CAAC,GAAG;QACP;;;;;QAKAC,SAAS,EAAE,CAAC;QACZ;;;;;QAKAC,aAAa,EAAE,GAAG;QAClB;;;;;QAKAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAClB;;;;;QAKAC,QAAQ,EAAE,IAAI;QACd;;;;;;QAMAC,QAAQ,EAAE,EAAE;QACZ;;;;QAIAC,IAAI,EAAE;UACJ;;;;;UAKAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;UACf;;;;;UAKAC,KAAK,EAAE,SAAS;UAChB;;;;;UAKAC,QAAQ,EAAE;QACZ,CAAC;QACD;;;;QAIAC,IAAI,EAAE;UACJ;;;;;;UAMAC,IAAI,EAAE,IAAI;UACV;;;;;UAKAR,QAAQ,EAAE,EAAE;UACZ;;;;;UAKAK,KAAK,EAAE,SAAS;UAChB;;;;;UAKAI,MAAM,EAAE;QACV,CAAC;QACD;;;;QAIAC,cAAc,EAAE;UACd;;;;;UAKAC,KAAK,EAAE,EAAE;UACT;;;;;UAKAC,MAAM,EAAE,EAAE;UACV;;;;;UAKAC,GAAG,EAAE;QACP,CAAC;QACD;;;;;QAKAC,SAAS,EAAE;UACT;;;;;UAKAH,KAAK,EAAE,EAAE;UACT;;;;;UAKAC,MAAM,EAAE,EAAE;UACV;;;;;UAKAC,GAAG,EAAE;QACP;MACF,CAAC;MAEDE,YAAY,EAAE,IAAI;MAElBC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,KAAK,EAAE;IACL/C,MAAK,GAAK;MACR,MAAM;QAAEgD;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,wBAAuB,GAAK;MAC1B,MAAM;QAAEF;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX,CAAC;IACDG,QAAO,GAAK;MACV,MAAM;QAAEH;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX,CAAC;IACD,MAAMA,QAAO,GAAK;MAChB,MAAM;QAAEI,WAAW;QAAEC,kBAAkB;QAAEC;MAAgB,IAAI,IAAG;MAEhEF,WAAW,EAAC;MAEZC,kBAAkB,EAAC;MAEnB,MAAMC,eAAe,EAAC;MAEtB,MAAM;QAAEC,SAAS;QAAEC;MAAU,IAAI,IAAG;MAEpCD,SAAS,EAAC;MAEVC,SAAS,EAAC;IACZ,CAAC;IACDJ,WAAU,GAAK;MACb,IAAI;QAAEpD,MAAM;QAAEkB;MAAc,IAAI,IAAG;MAEnC,MAAMwB,YAAW,GAAIlD,SAAS,CAACC,SAAS,CAACyB,aAAa,EAAE,IAAI,CAAC,EAAElB,MAAK,IAAK,CAAC,CAAC;MAE3E,MAAM;QAAEoB;MAAO,IAAIsB,YAAW;MAE9BA,YAAY,CAACtB,MAAK,GAAIA,MAAM,CAACqC,GAAG,CAACC,IAAG,IAAK;QACvC,IAAIA,IAAG,YAAaC,KAAK,EAAE;UACzB,OAAO;YAAEC,QAAQ,EAAEF,IAAI;YAAE5B,IAAI,EAAE;UAAG;QACpC;QAEA,OAAO4B,IAAG;MACZ,CAAC;MAED,IAAI,CAAChB,YAAW,GAAIA,YAAW;IACjC,CAAC;IACDW,kBAAiB,GAAK;MACpB,MAAM;QAAEQ,OAAO;QAAEnB,YAAY;QAAEJ,KAAK;QAAEC;MAAO,IAAI,IAAG;MAEpD,IAAI;QAAEpB,WAAW;QAAEC,MAAM;QAAEQ;MAAS,IAAIc,YAAW;MAEnDtB,MAAK,GAAIA,MAAM,CAACqC,GAAG,CAAC,CAAC;QAAEG;MAAS,CAAC,KAAKA,QAAQ;MAE9C,IAAIhC,QAAQ,EAAE;QACZT,WAAU,GAAI,CAACmB,KAAI,GAAInB,WAAW,CAAC,CAAC,CAAC,EAAEoB,MAAK,GAAIpB,WAAW,CAAC,CAAC,CAAC;QAC9DC,MAAK,GAAIA,MAAM,CAACqC,GAAG,CAAC,CAAC,CAACK,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACzB,KAAI,GAAIwB,CAAC,EAAEvB,MAAK,GAAIwB,CAAC,CAAC;MACzD;MAEA,IAAI,CAACpB,KAAI,GAAIvB,MAAM,CAACqC,GAAG,CAACO,KAAI,IAAKH,OAAO,CAAC1C,WAAW,EAAE6C,KAAK,CAAC;IAC9D,CAAC;IACDH,OAAM,CAAGI,MAAM,EAAED,KAAK,EAAE;MACtB,MAAM;QAAEE;MAAgB,IAAI,IAAG;MAE/B,MAAMC,YAAW,GAAID,eAAe,CAACD,MAAM,EAAED,KAAK;MAElD,OAAO,CAACA,KAAK,EAAEG,YAAY,EAAEF,MAAM;IACrC,CAAC;IACDC,eAAc,CAAG,CAACE,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAC,EAAE;MACnC,MAAM;QAAEC,gBAAgB;QAAE9B;MAAa,IAAI,IAAG;MAE9C,MAAM;QAAEjB,SAAS;QAAED;MAAE,IAAIkB,YAAW;MAEpC,MAAM,CAAC+B,EAAE,EAAEC,EAAE,IAAI,CAAC,CAACN,EAAC,GAAIE,EAAE,IAAI,CAAC,EAAE,CAACD,EAAC,GAAIE,EAAE,IAAI,CAAC;MAE9C,MAAMI,QAAO,GAAIhF,gBAAgB,CAAC,CAACyE,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,CAAC;MAEpD,MAAMK,YAAW,GAAID,QAAO,GAAIlD,SAAQ;MACxC,MAAMoD,QAAO,GAAID,YAAW,GAAI;MAEhC,IAAI,CAACE,EAAE,EAAEC,EAAE,IAAI,CAACN,EAAE,EAAEC,EAAE;MAEtB,GAAG;QACDI,EAAC,IAAKD,QAAO;QACbE,EAAC,GAAIP,gBAAgB,CAAChD,CAAC,EAAE,CAACiD,EAAE,EAAEC,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,CAAC;MAC1C,SAASnF,gBAAgB,CAAC,CAAC8E,EAAE,EAAEC,EAAE,CAAC,EAAE,CAACI,EAAE,EAAEC,EAAE,CAAC,IAAIH,YAAY;MAE5D,OAAO,CAACE,EAAE,EAAEC,EAAE;IAChB,CAAC;IACDP,gBAAe,CAAGhD,CAAC,EAAE,CAACwD,EAAE,EAAEC,EAAE,CAAC,EAAEnB,CAAC,EAAE;MAChC,MAAMC,IAAIkB,EAAC,GAAIzD,IAAIwD,EAAC,GAAIxD,IAAIsC;MAE5B,OAAO,CAACA,CAAC,EAAEC,CAAC;IACd,CAAC;IACD,MAAMT,eAAc,GAAK;MACvB,MAAM;QAAE4B,SAAS;QAAEvC,KAAK;QAAEwC;MAAM,IAAI,IAAG;MAEvC,MAAMD,SAAS,EAAC;MAEhB,IAAI,CAACtC,OAAM,GAAID,KAAK,CAACc,GAAG,CAAC,CAAC2B,GAAG,EAAEC,CAAC,KAAKF,KAAK,CAAE,OAAME,CAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAACC,cAAc,EAAE;IAC5E,CAAC;IACD/B,SAAQ,GAAK;MACX,MAAM;QAAE5B,QAAQ;QAAEP;MAAO,IAAI,IAAI,CAACsB,YAAW;MAE7C,IAAI,CAACG,KAAI,GAAIzB,MAAM,CAACqC,GAAG,CAAC2B,GAAE,IAAK1F,YAAY,CAAC,GAAGiC,QAAQ,IAAI,EAAE;IAC/D,CAAC;IACD6B,SAAQ,GAAK;MACX,MAAM;QAAEpC;MAAO,IAAI,IAAI,CAACsB,YAAW;MAEnC,IAAI,CAACI,KAAI,GAAI1B,MAAM,CAACqC,GAAG,CAAC,CAAC;QAAE3B;MAAK,CAAC,KAAKA,IAAI;IAC5C,CAAC;IACDyD,eAAc,CAAG;MAAEC,OAAO;MAAEC;IAAQ,CAAC,EAAE;MACrC,MAAM;QAAEnD,KAAK;QAAEC,MAAM;QAAEnC;MAAI,IAAI,IAAG;MAElC,IAAI,CAACA,GAAG,EAAE;MAEV,MAAMsF,SAAQ,GAAI,CAACF,OAAM,GAAIlD,KAAK,EAAEqD,OAAO,CAAC,CAAC;MAC7C,MAAMC,SAAQ,GAAI,CAACH,OAAM,GAAIlD,MAAM,EAAEoD,OAAO,CAAC,CAAC;MAE9CE,OAAO,CAACC,IAAI,CAAE,+CAA8CN,OAAQ,KAAIC,OAAQ,8BAA6BC,SAAU,KAAIE,SAAU,GAAE;IACzI;EACF;AACF","names":["deepMerge","deepClone","randomExtend","getPointDistance","autoResize","name","mixins","props","config","type","Object","default","dev","Boolean","data","timestamp","Date","now","ref","unique","Math","random","maskId","maskCircleId","gradientId","gradient2Id","defaultConfig","centerPoint","points","lineWidth","orbitColor","flylineColor","k","curvature","flylineRadius","duration","relative","bgImgUrl","text","offset","color","fontSize","halo","show","radius","centerPointImg","width","height","url","pointsImg","mergedConfig","paths","lengths","times","texts","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","createFlylinePaths","calcLineLengths","calcTimes","calcTexts","map","item","Array","position","getPath","x","y","point","center","getControlPoint","controlPoint","sx","sy","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","lx","ly","$nextTick","$refs","foo","i","getTotalLength","consoleClickPos","offsetX","offsetY","relativeX","toFixed","relativeY","console","warn"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/flylineChart/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart\"\n    ref=\"dv-flyline-chart\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgUrl : ''})`\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"mergedConfig\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"gradient2Id\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n\n        <circle\n          v-if=\"paths[0]\"\n          :id=\"`circle${paths[0].toString()}`\"\n          :cx=\"paths[0][2][0]\"\n          :cy=\"paths[0][2][1]\"\n        >\n          <animate\n            attributeName=\"r\"\n            :values=\"`1;${mergedConfig.halo.radius}`\"\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\n            repeatCount=\"indefinite\"\n          />\n          <animate\n            attributeName=\"opacity\"\n            values=\"1;0\"\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\n            repeatCount=\"indefinite\"\n          />\n        </circle>\n      </defs>\n\n      <image\n        v-if=\"paths[0]\"\n        :xlink:href=\"mergedConfig.centerPointImg.url\"\n        :width=\"mergedConfig.centerPointImg.width\"\n        :height=\"mergedConfig.centerPointImg.height\"\n        :x=\"paths[0][2][0] - mergedConfig.centerPointImg.width / 2\"\n        :y=\"paths[0][2][1] - mergedConfig.centerPointImg.height / 2\"\n      />\n\n      <mask :id=\"`maskhalo${paths[0].toString()}`\">\n        <use\n          v-if=\"paths[0]\"\n          :xlink:href=\"`#circle${paths[0].toString()}`\"\n          :fill=\"`url(#${gradient2Id})`\"\n        />\n      </mask>\n\n      <use\n        v-if=\"paths[0] && mergedConfig.halo.show\"\n        :xlink:href=\"`#circle${paths[0].toString()}`\"\n        :fill=\"mergedConfig.halo.color\"\n        :mask=\"`url(#maskhalo${paths[0].toString()})`\"\n      />\n\n      <g\n        v-for=\"(path, i) in paths\"\n        :key=\"i\"\n      >\n        <defs>\n          <path\n            :id=\"`path${path.toString()}`\"\n            :ref=\"`path${i}`\"\n            :d=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <use\n          :xlink:href=\"`#path${path.toString()}`\"\n          :stroke-width=\"mergedConfig.lineWidth\"\n          :stroke=\"mergedConfig.orbitColor\"\n        />\n\n        <use\n          v-if=\"lengths[i]\"\n          :xlink:href=\"`#path${path.toString()}`\"\n          :stroke-width=\"mergedConfig.lineWidth\"\n          :stroke=\"mergedConfig.flylineColor\"\n          :mask=\"`url(#mask${unique}${path.toString()})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${lengths[i]}`\"\n            :to=\"`${lengths[i]}, 0`\"\n            :dur=\"times[i] || 0\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n\n        <mask :id=\"`mask${unique}${path.toString()}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"mergedConfig.flylineRadius\" :fill=\"`url(#${gradientId})`\">\n            <animateMotion\n              :dur=\"times[i] || 0\"\n              :path=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <image\n          :xlink:href=\"mergedConfig.pointsImg.url\"\n          :width=\"mergedConfig.pointsImg.width\"\n          :height=\"mergedConfig.pointsImg.height\"\n          :x=\"path[0][0] - mergedConfig.pointsImg.width / 2\"\n          :y=\"path[0][1] - mergedConfig.pointsImg.height / 2\"\n        />\n\n        <text\n          :style=\"`fontSize:${mergedConfig.text.fontSize}px;`\"\n          :fill=\"mergedConfig.text.color\"\n          :x=\"path[0][0] + mergedConfig.text.offset[0]\"\n          :y=\"path[0][1] + mergedConfig.text.offset[1]\"\n        >\n          {{ texts[i] }}\n        </text>\n\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      ref: 'dv-flyline-chart',\n      unique: Math.random(),\n      maskId: `flyline-mask-id-${timestamp}`,\n      maskCircleId: `mask-circle-id-${timestamp}`,\n      gradientId: `gradient-id-${timestamp}`,\n      gradient2Id: `gradient2-id-${timestamp}`,\n\n      defaultConfig: {\n        /**\n         * @description Flyline chart center point\n         * @type {Array<Number>}\n         * @default centerPoint = [0, 0]\n         */\n        centerPoint: [0, 0],\n        /**\n         * @description Flyline start points\n         * @type {Array<Array<Number>>}\n         * @default points = []\n         * @example points = [[10, 10], [100, 100]]\n         */\n        points: [],\n        /**\n         * @description Flyline width\n         * @type {Number}\n         * @default lineWidth = 1\n         */\n        lineWidth: 1,\n        /**\n         * @description Orbit color\n         * @type {String}\n         * @default orbitColor = 'rgba(103, 224, 227, .2)'\n         */\n        orbitColor: 'rgba(103, 224, 227, .2)',\n        /**\n         * @description Flyline color\n         * @type {String}\n         * @default orbitColor = '#ffde93'\n         */\n        flylineColor: '#ffde93',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Flyline radius\n         * @type {Number}\n         * @default flylineRadius = 100\n         */\n        flylineRadius: 100,\n        /**\n         * @description Flyline animation duration\n         * @type {Array<Number>}\n         * @default duration = [20, 30]\n         */\n        duration: [20, 30],\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true,\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgUrl = ''\n         * @example bgImgUrl = './img/bg.jpg'\n         */\n        bgImgUrl: '',\n        /**\n         * @description Text configuration\n         * @type {Object}\n         */\n        text: {\n          /**\n           * @description Text offset\n           * @type {Array<Number>}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Halo configuration\n         * @type {Object}\n         */\n        halo: {\n          /**\n           * @description Weather to show halo\n           * @type {Boolean}\n           * @default show = true\n           * @example show = true | false\n           */\n          show: true,\n          /**\n           * @description Halo animation duration (10 = 1s)\n           * @type {Number}\n           * @default duration = 30\n           */\n          duration: 30,\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo max radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Center point img configuration\n         * @type {Object}\n         */\n        centerPointImg: {\n          /**\n           * @description Center point img width\n           * @type {Number}\n           * @default width = 40\n           */\n          width: 40,\n          /**\n           * @description Center point img height\n           * @type {Number}\n           * @default height = 40\n           */\n          height: 40,\n          /**\n           * @description Center point img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        },\n        /**\n         * @description Points img configuration\n         * @type {Object}\n         * @default radius = 120\n         */\n        pointsImg: {\n          /**\n           * @description Points img width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Points img height\n           * @type {Number}\n           * @default height = 15\n           */\n          height: 15,\n          /**\n           * @description Points img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        }\n      },\n\n      mergedConfig: null,\n\n      paths: [],\n      lengths: [],\n      times: [],\n      texts: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, createFlylinePaths, calcLineLengths } = this\n\n      mergeConfig()\n\n      createFlylinePaths()\n\n      await calcLineLengths()\n\n      const { calcTimes, calcTexts } = this\n\n      calcTimes()\n\n      calcTexts()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        if (item instanceof Array) {\n          return { position: item, text: '' }\n        }\n\n        return item\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    createFlylinePaths () {\n      const { getPath, mergedConfig, width, height } = this\n\n      let { centerPoint, points, relative } = mergedConfig\n\n      points = points.map(({ position }) => position)\n\n      if (relative) {\n        centerPoint = [width * centerPoint[0], height * centerPoint[1]]\n        points = points.map(([x, y]) => [width * x, height * y])\n      }\n\n      this.paths = points.map(point => getPath(centerPoint, point))\n    },\n    getPath (center, point) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(center, point)\n\n      return [point, controlPoint, center]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, paths, $refs } = this\n\n      await $nextTick()\n\n      this.lengths = paths.map((foo, i) => $refs[`path${i}`][0].getTotalLength())\n    },\n    calcTimes () {\n      const { duration, points } = this.mergedConfig\n\n      this.times = points.map(foo => randomExtend(...duration) / 10)\n    },\n    calcTexts () {\n      const { points } = this.mergedConfig\n\n      this.texts = points.map(({ text }) => text)\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
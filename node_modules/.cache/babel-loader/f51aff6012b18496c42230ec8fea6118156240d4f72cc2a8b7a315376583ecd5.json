{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache) {\n  const _component_v_chart = _resolveComponent(\"v-chart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" init-options: object 初始化附加参数。请参考 echarts.init 的 opts 参数 \"), _createCommentVNode(\" theme: string | object 要应用的主题。 \"), _createCommentVNode(\" option: object ECharts 的万能接口。修改这个 prop 会触发 ECharts 实例的 setOption 方法 \"), _createCommentVNode(\" update-options: object 图表更新的配置项。请参考 echartsInstance.setOption 的 opts 参数。前往  \"), _createCommentVNode(\" group: string 图表的分组，用于联动。 \"), _createCommentVNode(\" autoresize: boolean（默认值false）图表在组件根元素尺寸变化时是否需要自动进行重绘 \"), _createCommentVNode(\" loading: boolean（默认值：false） 图表是否处于加载状态。 \"), _createCommentVNode(\" manual-update: boolean（默认值false）在性能敏感（数据量很大）的场景下，我们最好对于 option prop 绕过 Vue 的响应式系统 \"), _createVNode(_component_v_chart, {\n    ref: \"vChartRef\",\n    theme: _ctx.themeColor,\n    option: _ctx.option,\n    \"manual-update\": _ctx.isPreview(),\n    \"update-options\": {\n      replaceMerge: _ctx.replaceMergeArr\n    },\n    autoresize: \"\"\n  }, null, 8 /* PROPS */, [\"theme\", \"option\", \"manual-update\", \"update-options\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;6DACEA,gFAAgE,EAChEA,uDAAuC,EACvCA,4FAA4E,EAC5EA,oGAAoF,EACpFA,kDAAkC,EAClCA,6EAA6D,EAC7DA,gEAAgD,EAChDA,0GAA0F,EAE1FC,aASWC;IARTC,GAAG,EAAC,WAAW;IACdC,KAAK,EAAEC,eAAU;IACjBC,MAAM,EAAED,WAAM;IACd,eAAa,EAAEA,cAAS;IACxB,gBAAc;oBAAwBA;;IAGvCE,UAAU,EAAV","names":["_createCommentVNode","_createVNode","_component_v_chart","ref","theme","_ctx","option","autoresize"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/echarts/waterChart/components/Bars/BarCommon/index.vue"],"sourcesContent":["<template>\n  <!-- init-options: object 初始化附加参数。请参考 echarts.init 的 opts 参数 -->\n  <!-- theme: string | object 要应用的主题。 -->\n  <!-- option: object ECharts 的万能接口。修改这个 prop 会触发 ECharts 实例的 setOption 方法 -->\n  <!-- update-options: object 图表更新的配置项。请参考 echartsInstance.setOption 的 opts 参数。前往  -->\n  <!-- group: string 图表的分组，用于联动。 -->\n  <!-- autoresize: boolean（默认值false）图表在组件根元素尺寸变化时是否需要自动进行重绘 -->\n  <!-- loading: boolean（默认值：false） 图表是否处于加载状态。 -->\n  <!-- manual-update: boolean（默认值false）在性能敏感（数据量很大）的场景下，我们最好对于 option prop 绕过 Vue 的响应式系统 -->\n\n  <v-chart\n    ref=\"vChartRef\"\n    :theme=\"themeColor\"\n    :option=\"option\"\n    :manual-update=\"isPreview()\"\n    :update-options=\"{\n      replaceMerge: replaceMergeArr\n    }\"\n    autoresize\n  ></v-chart>\n</template>\n\n<script lang=\"ts\" setup></script>\n<style lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
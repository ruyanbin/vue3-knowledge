{"ast":null,"code":"import { DefaultLoadingManager } from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { LoaderBase } from '../base/LoaderBase.js';\nimport { GLTFCesiumRTCExtension } from './GLTFCesiumRTCExtension.js';\nexport class GLTFExtensionLoader extends LoaderBase {\n  constructor(manager = DefaultLoadingManager) {\n    super();\n    this.manager = manager;\n  }\n  parse(buffer) {\n    return new Promise((resolve, reject) => {\n      const manager = this.manager;\n      const fetchOptions = this.fetchOptions;\n      let loader = manager.getHandler('path.gltf') || manager.getHandler('path.glb');\n      if (!loader) {\n        loader = new GLTFLoader(manager);\n        loader.register(() => new GLTFCesiumRTCExtension());\n        if (fetchOptions.credentials === 'include' && fetchOptions.mode === 'cors') {\n          loader.setCrossOrigin('use-credentials');\n        }\n        if ('credentials' in fetchOptions) {\n          loader.setWithCredentials(fetchOptions.credentials === 'include');\n        }\n        if (fetchOptions.headers) {\n          loader.setRequestHeader(fetchOptions.headers);\n        }\n      }\n\n      // assume any pre-registered loader has paths configured as the user desires, but if we're making\n      // a new loader, use the working path during parse to support relative uris on other hosts\n      let resourcePath = loader.resourcePath || loader.path || this.workingPath;\n      if (!/[\\\\/]$/.test(resourcePath) && resourcePath.length) {\n        resourcePath += '/';\n      }\n      loader.parse(buffer, resourcePath, model => {\n        resolve(model);\n      }, reject);\n    });\n  }\n}","map":{"version":3,"names":["DefaultLoadingManager","GLTFLoader","LoaderBase","GLTFCesiumRTCExtension","GLTFExtensionLoader","constructor","manager","parse","buffer","Promise","resolve","reject","fetchOptions","loader","getHandler","register","credentials","mode","setCrossOrigin","setWithCredentials","headers","setRequestHeader","resourcePath","path","workingPath","test","length","model"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/3d-tiles-renderer/src/three/GLTFExtensionLoader.js"],"sourcesContent":["import { DefaultLoadingManager } from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { LoaderBase } from '../base/LoaderBase.js';\nimport { GLTFCesiumRTCExtension } from './GLTFCesiumRTCExtension.js';\n\nexport class GLTFExtensionLoader extends LoaderBase {\n\n\tconstructor( manager = DefaultLoadingManager ) {\n\n\t\tsuper();\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse( buffer ) {\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tconst manager = this.manager;\n\t\t\tconst fetchOptions = this.fetchOptions;\n\t\t\tlet loader = manager.getHandler( 'path.gltf' ) || manager.getHandler( 'path.glb' );\n\n\t\t\tif ( ! loader ) {\n\n\t\t\t\tloader = new GLTFLoader( manager );\n\n\t\t\t\tloader.register( () => new GLTFCesiumRTCExtension() );\n\t\t\t\tif ( fetchOptions.credentials === 'include' && fetchOptions.mode === 'cors' ) {\n\n\t\t\t\t\tloader.setCrossOrigin( 'use-credentials' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( 'credentials' in fetchOptions ) {\n\n\t\t\t\t\tloader.setWithCredentials( fetchOptions.credentials === 'include' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( fetchOptions.headers ) {\n\n\t\t\t\t\tloader.setRequestHeader( fetchOptions.headers );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// assume any pre-registered loader has paths configured as the user desires, but if we're making\n\t\t\t// a new loader, use the working path during parse to support relative uris on other hosts\n\t\t\tlet resourcePath = loader.resourcePath || loader.path || this.workingPath;\n\t\t\tif ( ! /[\\\\/]$/.test( resourcePath ) && resourcePath.length ) {\n\n\t\t\t\tresourcePath += '/';\n\n\t\t\t}\n\n\t\t\tloader.parse( buffer, resourcePath, model => {\n\n\t\t\t\tresolve( model );\n\n\t\t\t}, reject );\n\n\t\t} );\n\n\t}\n\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,0CAA0C;AACrE,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,sBAAsB,QAAQ,6BAA6B;AAEpE,OAAO,MAAMC,mBAAmB,SAASF,UAAU,CAAC;EAEnDG,WAAW,CAAEC,OAAO,GAAGN,qBAAqB,EAAG;IAE9C,KAAK,EAAE;IACP,IAAI,CAACM,OAAO,GAAGA,OAAO;EAEvB;EAEAC,KAAK,CAAEC,MAAM,EAAG;IAEf,OAAO,IAAIC,OAAO,CAAE,CAAEC,OAAO,EAAEC,MAAM,KAAM;MAE1C,MAAML,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,MAAMM,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,IAAIC,MAAM,GAAGP,OAAO,CAACQ,UAAU,CAAE,WAAW,CAAE,IAAIR,OAAO,CAACQ,UAAU,CAAE,UAAU,CAAE;MAElF,IAAK,CAAED,MAAM,EAAG;QAEfA,MAAM,GAAG,IAAIZ,UAAU,CAAEK,OAAO,CAAE;QAElCO,MAAM,CAACE,QAAQ,CAAE,MAAM,IAAIZ,sBAAsB,EAAE,CAAE;QACrD,IAAKS,YAAY,CAACI,WAAW,KAAK,SAAS,IAAIJ,YAAY,CAACK,IAAI,KAAK,MAAM,EAAG;UAE7EJ,MAAM,CAACK,cAAc,CAAE,iBAAiB,CAAE;QAE3C;QAEA,IAAK,aAAa,IAAIN,YAAY,EAAG;UAEpCC,MAAM,CAACM,kBAAkB,CAAEP,YAAY,CAACI,WAAW,KAAK,SAAS,CAAE;QAEpE;QAEA,IAAKJ,YAAY,CAACQ,OAAO,EAAG;UAE3BP,MAAM,CAACQ,gBAAgB,CAAET,YAAY,CAACQ,OAAO,CAAE;QAEhD;MAED;;MAEA;MACA;MACA,IAAIE,YAAY,GAAGT,MAAM,CAACS,YAAY,IAAIT,MAAM,CAACU,IAAI,IAAI,IAAI,CAACC,WAAW;MACzE,IAAK,CAAE,QAAQ,CAACC,IAAI,CAAEH,YAAY,CAAE,IAAIA,YAAY,CAACI,MAAM,EAAG;QAE7DJ,YAAY,IAAI,GAAG;MAEpB;MAEAT,MAAM,CAACN,KAAK,CAAEC,MAAM,EAAEc,YAAY,EAAEK,KAAK,IAAI;QAE5CjB,OAAO,CAAEiB,KAAK,CAAE;MAEjB,CAAC,EAAEhB,MAAM,CAAE;IAEZ,CAAC,CAAE;EAEJ;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}
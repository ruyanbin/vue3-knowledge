{"ast":null,"code":"import { defineComponent } from 'vue';\nimport registerMixin from '../../../mixins/register-component.mjs';\nimport editorMixin from '../../../mixins/editor-component.mjs';\nimport { isMapInstance, isOverlayGroupInstance, isVectorLayerInstance } from '../../../utils/util.mjs';\nvar script = defineComponent({\n  name: \"ElAmapCircle\",\n  mixins: [registerMixin, editorMixin],\n  props: {\n    center: {\n      type: Array,\n      required: true\n    },\n    radius: {\n      type: Number,\n      required: true\n    },\n    bubble: {\n      type: Boolean,\n      default: false\n    },\n    cursor: {\n      type: String\n    },\n    strokeColor: {\n      type: String\n    },\n    strokeOpacity: {\n      type: Number\n    },\n    strokeWeight: {\n      type: Number\n    },\n    fillColor: {\n      type: String\n    },\n    fillOpacity: {\n      type: Number\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    extData: {\n      type: Object,\n      default: () => null\n    },\n    strokeStyle: {\n      type: String,\n      validator(value) {\n        return [\"solid\", \"dashed\"].indexOf(value) !== -1;\n      }\n    },\n    strokeDasharray: {\n      type: Array\n    }\n  },\n  emits: [\"update:center\", \"update:radius\"],\n  data() {\n    return {\n      converters: {}\n    };\n  },\n  methods: {\n    __initComponent(options) {\n      this.$amapComponent = new AMap.Circle(options);\n      if (isMapInstance(this.$parentComponent)) {\n        this.$parentComponent.add(this.$amapComponent);\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\n        this.$parentComponent.addOverlay(this.$amapComponent);\n      } else if (isVectorLayerInstance(this.$parentComponent)) {\n        this.$parentComponent.add(this.$amapComponent);\n      }\n      this.bindModelEvents();\n    },\n    bindModelEvents() {\n      this.$amapComponent.on(\"dragend\", () => {\n        this.emitModel(this.$amapComponent);\n      });\n      this.$amapComponent.on(\"touchend\", () => {\n        this.emitModel(this.$amapComponent);\n      });\n    },\n    createEditor() {\n      return new Promise(resolve => {\n        if (this.$amapComponent.editor) {\n          resolve();\n        } else {\n          AMap.plugin([\"AMap.CircleEditor\"], () => {\n            this.$amapComponent.editor = new AMap.CircleEditor(this.$parentComponent, this.$amapComponent, this.editOptions);\n            this.setEditorEvents();\n            this.bindEditorModelEvents();\n            resolve();\n          });\n        }\n      });\n    },\n    bindEditorModelEvents() {\n      this.$amapComponent.editor.on(\"addnode\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"adjust\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"move\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"add\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"end\", e => {\n        this.emitModel(e.target);\n      });\n    },\n    emitModel(target) {\n      this.$emit(\"update:center\", target.getCenter().toArray());\n      this.$emit(\"update:radius\", target.getRadius());\n    },\n    destroyComponent() {\n      if (this.$amapComponent.editor) {\n        if (!this.parentInstance.isDestroy) {\n          this.$amapComponent.editor.close();\n        }\n        this.$amapComponent.editor = null;\n      }\n      if (!this.parentInstance.isDestroy) {\n        if (isMapInstance(this.$parentComponent)) {\n          this.$parentComponent.remove(this.$amapComponent);\n        } else if (isOverlayGroupInstance(this.$parentComponent)) {\n          this.$parentComponent.removeOverlay(this.$amapComponent);\n        } else if (isVectorLayerInstance(this.$parentComponent)) {\n          this.$parentComponent.remove(this.$amapComponent);\n        }\n      }\n      if (this.$amapComponent.destroy) {\n        this.$amapComponent.destroy();\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    },\n    __zIndex(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          zIndex: value\n        });\n      }\n    },\n    __strokeColor(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeColor: value\n        });\n      }\n    },\n    __strokeOpacity(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeOpacity: value\n        });\n      }\n    },\n    __strokeWeight(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeWeight: value\n        });\n      }\n    },\n    __fillColor(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          fillColor: value\n        });\n      }\n    },\n    __fillOpacity(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          fillOpacity: value\n        });\n      }\n    },\n    __strokeStyle(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeStyle: value\n        });\n      }\n    },\n    __strokeDasharray(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeDasharray: value\n        });\n      }\n    },\n    __editable(flag) {\n      this.createEditor().then(() => {\n        flag === true ? this.$amapComponent.editor.open() : this.$amapComponent.editor.close();\n      });\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","mixins","registerMixin","props","center","type","required","radius","bubble","default","cursor","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","draggable","extData","strokeStyle","validator","value","strokeDasharray","emits","data","converters","methods","__initComponent","options","AMap","Circle","$parentComponent","add","addOverlay","bindModelEvents","on","emitModel","createEditor","Promise","resolve","$amapComponent","editor","CircleEditor","bindEditorModelEvents","e","target","getCenter","destroyComponent","isDestroy","remove","removeOverlay","destroy","__zIndex","setOptions","zIndex","__strokeColor","__strokeOpacity","__strokeWeight","__fillColor","__fillOpacity","__strokeStyle","__strokeDasharray","__editable","flag","then","open","render"],"sources":["../../../../../../src/packages/vector/Circle/Circle.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport registerMixin from '../../../mixins/register-component';\r\nimport editorMixin from '../../../mixins/editor-component';\r\nimport {isMapInstance, isOverlayGroupInstance, isVectorLayerInstance} from '../../../utils/util';\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapCircle',\r\n  mixins: [registerMixin, editorMixin],\r\n  props: {\r\n    center: {\r\n      type: Array,\r\n      required: true\r\n    }, // 圆心位置\r\n    radius: {\r\n      type: Number,\r\n      required: true\r\n    }, // 圆半径，单位:米\r\n    bubble: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 是否将覆盖物的鼠标或touch等事件冒泡到地图上\r\n    cursor: {\r\n      type: String\r\n    }, // 指定鼠标悬停时的鼠标样式，自定义cursor，IE仅支持cur/ani/ico格式，Opera不支持自定义cursor\r\n    strokeColor: {\r\n      type: String\r\n    }, // 线条颜色，使用16进制颜色代码赋值。默认值为#00D3FC\r\n    strokeOpacity: {\r\n      type: Number\r\n    }, // 轮廓线透明度，取值范围 [0,1] ，0表示完全透明，1表示不透明。默认为0.9\r\n    strokeWeight: {\r\n      type: Number\r\n    }, // 轮廓线宽度。默认 2\r\n    fillColor: {\r\n      type: String\r\n    }, // 多边形填充颜色，使用16进制颜色代码赋值，如：#00B2D5\r\n    fillOpacity: {\r\n      type: Number\r\n    }, // 多边形填充透明度，取值范围 [0,1] ，0表示完全透明，1表示不透明。默认为0.5\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 设置多边形是否可拖拽移动，默认为false\r\n    extData: {\r\n      type: Object,\r\n      default: () => null\r\n    },\r\n    strokeStyle: {\r\n      type: String,\r\n      validator(value : string) {\r\n        // 这个值必须匹配下列字符串中的一个\r\n        return ['solid', 'dashed'].indexOf(value) !== -1;\r\n      }\r\n    }, // 轮廓线样式，实线:solid，虚线:dashed\r\n    strokeDasharray: {\r\n      type: Array\r\n    }// 勾勒形状轮廓的虚线和间隙的样式，此属性在strokeStyle 为dashed 时有效， 此属性在ie9+浏览器有效 取值： 实线： [0,0,0] 虚线： [10,10] ， [10,10] 表示10个像素的实线和10个像素的空白（如此反复）组成的虚线 点画线： [10,2,10] ， [10,2,10] 表示10个像素的实线和2个像素的空白 + 10个像素的实线和10个像素的空白 （如此反复）组成的虚线\r\n  },\r\n  emits: ['update:center', 'update:radius'],\r\n  data() {\r\n    return {\r\n      converters: {},\r\n    };\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      this.$amapComponent = new AMap.Circle(options);\r\n      if (isMapInstance(this.$parentComponent)) {\r\n        this.$parentComponent.add(this.$amapComponent);\r\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n        this.$parentComponent.addOverlay(this.$amapComponent);\r\n      } else if (isVectorLayerInstance(this.$parentComponent)) {\r\n        this.$parentComponent.add(this.$amapComponent);\r\n      }\r\n      this.bindModelEvents();\r\n    },\r\n    bindModelEvents(){\r\n      this.$amapComponent.on('dragend',() => {\r\n        this.emitModel(this.$amapComponent);\r\n      });\r\n      this.$amapComponent.on('touchend',() => {\r\n        this.emitModel(this.$amapComponent);\r\n      });\r\n    },\r\n    createEditor() {\r\n      return new Promise<void>((resolve) => {\r\n        if (this.$amapComponent.editor) {\r\n          resolve();\r\n        } else {\r\n          AMap.plugin(['AMap.CircleEditor'], () => {\r\n            this.$amapComponent.editor = new AMap.CircleEditor(this.$parentComponent, this.$amapComponent, this.editOptions);\r\n            this.setEditorEvents();\r\n            this.bindEditorModelEvents();\r\n            resolve();\r\n          });\r\n        }\r\n      });\r\n    },\r\n    bindEditorModelEvents(){\r\n      this.$amapComponent.editor.on('addnode',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('adjust',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('move',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('add',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('end',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n    },\r\n    emitModel(target){\r\n      this.$emit('update:center', target.getCenter().toArray());\r\n      this.$emit('update:radius', target.getRadius());\r\n    },\r\n    destroyComponent() {\r\n      if (this.$amapComponent.editor) {\r\n        if(!this.parentInstance.isDestroy){\r\n          this.$amapComponent.editor.close();\r\n        }\r\n        this.$amapComponent.editor = null;\r\n      }\r\n      if(!this.parentInstance.isDestroy){\r\n        if (isMapInstance(this.$parentComponent)) {\r\n          this.$parentComponent.remove(this.$amapComponent);\r\n        } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n          this.$parentComponent.removeOverlay(this.$amapComponent);\r\n        } else if (isVectorLayerInstance(this.$parentComponent)) {\r\n          this.$parentComponent.remove(this.$amapComponent);\r\n        }\r\n      }\r\n      if(this.$amapComponent.destroy){\r\n        this.$amapComponent.destroy();\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    },\r\n    __zIndex(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({zIndex: value});\r\n      }\r\n    },\r\n    __strokeColor(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeColor: value});\r\n      }\r\n    },\r\n    __strokeOpacity(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeOpacity: value});\r\n      }\r\n    },\r\n    __strokeWeight(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeWeight: value});\r\n      }\r\n    },\r\n    __fillColor(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({fillColor: value});\r\n      }\r\n    },\r\n    __fillOpacity(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({fillOpacity: value});\r\n      }\r\n    },\r\n    __strokeStyle(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeStyle: value});\r\n      }\r\n    },\r\n    __strokeDasharray(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeDasharray: value});\r\n      }\r\n    },\r\n    __editable(flag) {\r\n      this.createEditor().then(() => {\r\n        flag === true ? this.$amapComponent.editor.open() : this.$amapComponent.editor.close();\r\n      });\r\n    },\r\n  },\r\n  render(){\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
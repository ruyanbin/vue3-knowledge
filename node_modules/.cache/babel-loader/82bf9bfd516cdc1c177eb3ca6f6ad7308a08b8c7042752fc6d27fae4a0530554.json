{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BufferAttribute, BufferGeometry, FileLoader, Loader } from 'three';\nconst _taskCache = new WeakMap();\nclass DRACOLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.decoderPath = '';\n    this.decoderConfig = {};\n    this.decoderBinary = null;\n    this.decoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.defaultAttributeIDs = {\n      position: 'POSITION',\n      normal: 'NORMAL',\n      color: 'COLOR',\n      uv: 'TEX_COORD'\n    };\n    this.defaultAttributeTypes = {\n      position: 'Float32Array',\n      normal: 'Float32Array',\n      color: 'Float32Array',\n      uv: 'Float32Array'\n    };\n  }\n  setDecoderPath(path) {\n    this.decoderPath = path;\n    return this;\n  }\n  setDecoderConfig(config) {\n    this.decoderConfig = config;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      const taskConfig = {\n        attributeIDs: this.defaultAttributeIDs,\n        attributeTypes: this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n      this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n    const taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  }\n  decodeGeometry(buffer, taskConfig) {\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (const attribute in taskConfig.attributeTypes) {\n      const type = taskConfig.attributeTypes[attribute];\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    }\n\n    //\n\n    const taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n    if (_taskCache.has(buffer)) {\n      const cachedTask = _taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    }\n\n    //\n\n    let worker;\n    const taskID = this.workerNextTaskID++;\n    const taskCost = buffer.byteLength;\n\n    // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n    const geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n      worker = _worker;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig,\n          buffer\n        }, [buffer]);\n\n        // this.debug();\n      });\n    }).then(message => this._createGeometry(message.geometry));\n\n    // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n    geometryPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n\n        // this.debug();\n      }\n    });\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  }\n  _createGeometry(geometryData) {\n    const geometry = new BufferGeometry();\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n    for (let i = 0; i < geometryData.attributes.length; i++) {\n      const attribute = geometryData.attributes[i];\n      const name = attribute.name;\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n    return geometry;\n  }\n  _loadLibrary(url, responseType) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise((resolve, reject) => {\n      loader.load(url, resolve, undefined, reject);\n    });\n  }\n  preload() {\n    this._initDecoder();\n    return this;\n  }\n  _initDecoder() {\n    if (this.decoderPending) return this.decoderPending;\n    const useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    const librariesPending = [];\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n    this.decoderPending = Promise.all(librariesPending).then(libraries => {\n      const jsContent = libraries[0];\n      if (!useJS) {\n        this.decoderConfig.wasmBinary = libraries[1];\n      }\n      const fn = DRACOWorker.toString();\n      const body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  }\n  _getWorker(taskID, taskCost) {\n    return this._initDecoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: this.decoderConfig\n        });\n        worker.onmessage = function (e) {\n          const message = e.data;\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n  let decoderConfig;\n  let decoderPending;\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve /*, reject*/) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n\n        break;\n      case 'decode':\n        const buffer = message.buffer;\n        const taskConfig = message.taskConfig;\n        decoderPending.then(module => {\n          const draco = module.draco;\n          const decoder = new draco.Decoder();\n          const decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n          try {\n            const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            const buffers = geometry.attributes.map(attr => attr.array.buffer);\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    const attributeIDs = taskConfig.attributeIDs;\n    const attributeTypes = taskConfig.attributeTypes;\n    let dracoGeometry;\n    let decodingStatus;\n    const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n    const geometry = {\n      index: null,\n      attributes: []\n    };\n\n    // Gather all vertex attributes.\n    for (const attributeName in attributeIDs) {\n      const attributeType = self[attributeTypes[attributeName]];\n      let attribute;\n      let attributeID;\n\n      // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    }\n\n    // Add index.\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * 4;\n    const ptr = draco._malloc(byteLength);\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    const index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n    draco._free(ptr);\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    const numComponents = attribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n    const byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(draco, attributeType);\n    const ptr = draco._malloc(byteLength);\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    const array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n    draco._free(ptr);\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n      case Int8Array:\n        return draco.DT_INT8;\n      case Int16Array:\n        return draco.DT_INT16;\n      case Int32Array:\n        return draco.DT_INT32;\n      case Uint8Array:\n        return draco.DT_UINT8;\n      case Uint16Array:\n        return draco.DT_UINT16;\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n}\nexport { DRACOLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","FileLoader","Loader","_taskCache","WeakMap","DRACOLoader","constructor","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","load","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","BYTES_PER_ELEMENT","undefined","name","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","console","error","sort","a","b","debug","log","map","dispose","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","decodeIndex","numFaces","num_faces","numIndices","_malloc","GetTrianglesUInt32Array","Uint32Array","HEAPF32","slice","_free","numComponents","num_components","numPoints","num_points","numValues","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","Float32Array","DT_FLOAT32","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","DT_UINT32"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tconst taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( const attribute in taskConfig.attributeTypes ) {\n\n\t\t\tconst type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst attribute = geometryData.attributes[ i ];\n\t\t\tconst name = attribute.name;\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\t\t\t\t\tconst decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"stop\", {\n  offset: \"0%\",\n  \"stop-color\": \"#fff\",\n  \"stop-opacity\": \"1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"stop\", {\n  offset: \"100%\",\n  \"stop-color\": \"#fff\",\n  \"stop-opacity\": \"0\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = [\"id\"];\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"stop\", {\n  offset: \"0%\",\n  \"stop-color\": \"#fff\",\n  \"stop-opacity\": \"0\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"stop\", {\n  offset: \"100%\",\n  \"stop-color\": \"#fff\",\n  \"stop-opacity\": \"1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_9 = [_hoisted_7, _hoisted_8];\nconst _hoisted_10 = [\"id\", \"cx\", \"cy\"];\nconst _hoisted_11 = [\"values\", \"dur\"];\nconst _hoisted_12 = [\"dur\"];\nconst _hoisted_13 = [\"id\"];\nconst _hoisted_14 = [\"xlink:href\", \"fill\"];\nconst _hoisted_15 = [\"xlink:href\", \"fill\", \"mask\"];\nconst _hoisted_16 = [\"xlink:href\", \"width\", \"height\", \"x\", \"y\"];\nconst _hoisted_17 = [\"fill\", \"x\", \"y\"];\nconst _hoisted_18 = [\"id\", \"d\"];\nconst _hoisted_19 = [\"xlink:href\", \"stroke-width\", \"stroke\"];\nconst _hoisted_20 = [\"id\"];\nconst _hoisted_21 = [\"r\", \"fill\"];\nconst _hoisted_22 = [\"dur\", \"path\"];\nconst _hoisted_23 = [\"xlink:href\", \"stroke-width\", \"stroke\", \"mask\"];\nconst _hoisted_24 = [\"from\", \"to\", \"dur\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-flyline-chart-enhanced\",\n    style: _normalizeStyle(`background-image: url(${$data.mergedConfig ? $data.mergedConfig.bgImgSrc : ''})`),\n    ref: $data.ref,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.consoleClickPos && $options.consoleClickPos(...args))\n  }, [$data.flylines.length ? (_openBlock(), _createElementBlock(\"svg\", {\n    key: 0,\n    width: _ctx.width,\n    height: _ctx.height\n  }, [_createElementVNode(\"defs\", null, [_createElementVNode(\"radialGradient\", {\n    id: $data.flylineGradientId,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"50%\"\n  }, _hoisted_5, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"radialGradient\", {\n    id: $data.haloGradientId,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"50%\"\n  }, _hoisted_9, 8 /* PROPS */, _hoisted_6)]), _createCommentVNode(\" points \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.flylinePoints, point => {\n    return _openBlock(), _createElementBlock(\"g\", {\n      key: point.key + Math.random()\n    }, [_createElementVNode(\"defs\", null, [point.halo.show ? (_openBlock(), _createElementBlock(\"circle\", {\n      key: 0,\n      id: `halo${$data.unique}${point.key}`,\n      cx: point.coordinate[0],\n      cy: point.coordinate[1]\n    }, [_createElementVNode(\"animate\", {\n      attributeName: \"r\",\n      values: `1;${point.halo.radius}`,\n      dur: `${point.halo.time}s`,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_11), _createElementVNode(\"animate\", {\n      attributeName: \"opacity\",\n      values: \"1;0\",\n      dur: `${point.halo.time}s`,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_12)], 8 /* PROPS */, _hoisted_10)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" halo gradient mask \"), _createElementVNode(\"mask\", {\n      id: `mask${$data.unique}${point.key}`\n    }, [point.halo.show ? (_openBlock(), _createElementBlock(\"use\", {\n      key: 0,\n      \"xlink:href\": `#halo${$data.unique}${point.key}`,\n      fill: `url(#${$data.haloGradientId})`\n    }, null, 8 /* PROPS */, _hoisted_14)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_13), _createCommentVNode(\" point halo \"), point.halo.show ? (_openBlock(), _createElementBlock(\"use\", {\n      key: 0,\n      \"xlink:href\": `#halo${$data.unique}${point.key}`,\n      fill: point.halo.color,\n      mask: `url(#mask${$data.unique}${point.key})`\n    }, null, 8 /* PROPS */, _hoisted_15)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" point icon \"), point.icon.show ? (_openBlock(), _createElementBlock(\"image\", {\n      key: 1,\n      \"xlink:href\": point.icon.src,\n      width: point.icon.width,\n      height: point.icon.height,\n      x: point.icon.x,\n      y: point.icon.y\n    }, null, 8 /* PROPS */, _hoisted_16)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" point text \"), point.text.show ? (_openBlock(), _createElementBlock(\"text\", {\n      key: 2,\n      style: _normalizeStyle(`fontSize:${point.text.fontSize}px;color:${point.text.color}`),\n      fill: point.text.color,\n      x: point.text.x,\n      y: point.text.y\n    }, _toDisplayString(point.name), 13 /* TEXT, STYLE, PROPS */, _hoisted_17)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" flylines \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.flylines, (line, i) => {\n    return _openBlock(), _createElementBlock(\"g\", {\n      key: line.key + Math.random()\n    }, [_createElementVNode(\"defs\", null, [_createElementVNode(\"path\", {\n      id: line.key,\n      ref_for: true,\n      ref: line.key,\n      d: line.d,\n      fill: \"transparent\"\n    }, null, 8 /* PROPS */, _hoisted_18)]), _createCommentVNode(\" orbit line \"), _createElementVNode(\"use\", {\n      \"xlink:href\": `#${line.key}`,\n      \"stroke-width\": line.width,\n      stroke: line.orbitColor\n    }, null, 8 /* PROPS */, _hoisted_19), _createCommentVNode(\" fly line gradient mask \"), _createElementVNode(\"mask\", {\n      id: `mask${$data.unique}${line.key}`\n    }, [_createElementVNode(\"circle\", {\n      cx: \"0\",\n      cy: \"0\",\n      r: line.radius,\n      fill: `url(#${$data.flylineGradientId})`\n    }, [_createElementVNode(\"animateMotion\", {\n      dur: line.time,\n      path: line.d,\n      rotate: \"auto\",\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_22)], 8 /* PROPS */, _hoisted_21)], 8 /* PROPS */, _hoisted_20), _createCommentVNode(\" fly line \"), $data.flylineLengths[i] ? (_openBlock(), _createElementBlock(\"use\", {\n      key: 0,\n      \"xlink:href\": `#${line.key}`,\n      \"stroke-width\": line.width,\n      stroke: line.color,\n      mask: `url(#mask${$data.unique}${line.key})`\n    }, [_createElementVNode(\"animate\", {\n      attributeName: \"stroke-dasharray\",\n      from: `0, ${$data.flylineLengths[i]}`,\n      to: `${$data.flylineLengths[i]}, 0`,\n      dur: line.time,\n      repeatCount: \"indefinite\"\n    }, null, 8 /* PROPS */, _hoisted_24)], 8 /* PROPS */, _hoisted_23)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","offset","_hoisted_3","_hoisted_4","_hoisted_7","_hoisted_8","_createElementBlock","class","style","$data","bgImgSrc","ref","onClick","$options","length","width","_ctx","height","id","cx","cy","r","_createCommentVNode","_Fragment","point","key","Math","random","halo","show","coordinate","attributeName","values","radius","dur","time","repeatCount","fill","color","mask","icon","src","x","y","text","fontSize","name","line","i","d","stroke","orbitColor","path","rotate","from","to"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart-enhanced\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\n    :ref=\"ref\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"flylineGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"haloGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n      </defs>\n\n      <!-- points -->\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\n        <defs>\n          <circle\n            v-if=\"point.halo.show\"\n            :id=\"`halo${unique}${point.key}`\"\n            :cx=\"point.coordinate[0]\"\n            :cy=\"point.coordinate[1]\"\n          >\n            <animate\n              attributeName=\"r\"\n              :values=\"`1;${point.halo.radius}`\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"opacity\"\n              values=\"1;0\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </defs>\n\n        <!-- halo gradient mask -->\n        <mask :id=\"`mask${unique}${point.key}`\">\n          <use\n            v-if=\"point.halo.show\"\n            :xlink:href=\"`#halo${unique}${point.key}`\"\n            :fill=\"`url(#${haloGradientId})`\"\n          />\n        </mask>\n\n        <!-- point halo -->\n        <use\n          v-if=\"point.halo.show\"\n          :xlink:href=\"`#halo${unique}${point.key}`\"\n          :fill=\"point.halo.color\"\n          :mask=\"`url(#mask${unique}${point.key})`\"\n        />\n\n        <!-- point icon -->\n        <image\n          v-if=\"point.icon.show\"\n          :xlink:href=\"point.icon.src\"\n          :width=\"point.icon.width\"\n          :height=\"point.icon.height\"\n          :x=\"point.icon.x\"\n          :y=\"point.icon.y\"\n        />\n\n        <!-- point text -->\n        <text\n          v-if=\"point.text.show\"\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\n          :fill=\"point.text.color\"\n          :x=\"point.text.x\"\n          :y=\"point.text.y\"\n        >\n          {{ point.name }}\n        </text>\n      </g>\n\n      <!-- flylines -->\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\n        <defs>\n          <path\n            :id=\"line.key\"\n            :ref=\"line.key\"\n            :d=\"line.d\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <!-- orbit line -->\n        <use\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.orbitColor\"\n        />\n\n        <!-- fly line gradient mask -->\n        <mask :id=\"`mask${unique}${line.key}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\n            <animateMotion\n              :dur=\"line.time\"\n              :path=\"line.d\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <!-- fly line -->\n        <use\n          v-if=\"flylineLengths[i]\"\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.color\"\n          :mask=\"`url(#mask${unique}${line.key})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${flylineLengths[i]}`\"\n            :to=\"`${flylineLengths[i]}, 0`\"\n            :dur=\"line.time\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${id}`,\n      haloGradientId: `halo-gradient-id-${id}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n\n      mergedConfig: null\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\n\n      mergeConfig()\n\n      calcflylinePoints()\n\n      calcLinePaths()\n\n      const { calcLineLengths } = this\n\n      await calcLineLengths()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points, lines, halo, text, icon, line } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\n        item.text = deepMerge(deepClone(text, true), item.text || {})\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\n\n        return item\n      })\n\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item)\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    calcflylinePoints () {\n      const { mergedConfig, width, height } = this\n\n      const { relative, points } = mergedConfig\n\n      this.flylinePoints = points.map((item, i) => {\n        const { coordinate: [x, y], halo, icon, text } = item\n\n        if (relative) item.coordinate = [x * width, y * height]\n\n        item.halo.time = randomExtend(...halo.duration) / 10\n\n        const { width: iw, height: ih } = icon\n        item.icon.x = item.coordinate[0] - iw / 2\n        item.icon.y = item.coordinate[1] - ih / 2\n\n        const [ox, oy] = text.offset\n        item.text.x = item.coordinate[0] + ox\n        item.text.y = item.coordinate[1] + oy\n\n        item.key = `${item.coordinate.toString()}${i}`\n\n        return item\n      })\n    },\n    calcLinePaths () {\n      const { getPath, mergedConfig } = this\n\n      const { points, lines } = mergedConfig\n\n      this.flylines = lines.map(item => {\n        const { source, target, duration } = item\n\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\n        const targetPoint = points.find(({ name }) => name === target).coordinate\n\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\n        const key = `path${path.toString()}`\n        const time = randomExtend(...duration) / 10\n\n        return { ...item, path, key, d, time }\n      })\n    },\n    getPath (start, end) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(start, end)\n\n      return [start, controlPoint, end]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, flylines, $refs } = this\n\n      await $nextTick()\n\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
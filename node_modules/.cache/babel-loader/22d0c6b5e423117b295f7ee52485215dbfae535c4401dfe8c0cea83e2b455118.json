{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport * as numberUtil from 'echarts/lib/util/number';\nimport LiquidShape from './liquidFillShape';\nvar parsePercent = numberUtil.parsePercent;\nfunction isPathSymbol(symbol) {\n  return symbol && symbol.indexOf('path://') === 0;\n}\necharts.extendChartView({\n  type: 'liquidFill',\n  render: function (seriesModel, ecModel, api) {\n    var self = this;\n    var group = this.group;\n    group.removeAll();\n    var data = seriesModel.getData();\n    var itemModel = data.getItemModel(0);\n    var center = itemModel.get('center');\n    var radius = itemModel.get('radius');\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var size = Math.min(width, height);\n    // itemStyle\n    var outlineDistance = 0;\n    var outlineBorderWidth = 0;\n    var showOutline = seriesModel.get('outline.show');\n    if (showOutline) {\n      outlineDistance = seriesModel.get('outline.borderDistance');\n      outlineBorderWidth = parsePercent(seriesModel.get('outline.itemStyle.borderWidth'), size);\n    }\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var outterRadius;\n    var innerRadius;\n    var paddingRadius;\n    var isFillContainer = false;\n    var symbol = seriesModel.get('shape');\n    if (symbol === 'container') {\n      // a shape that fully fills the container\n      isFillContainer = true;\n      outterRadius = [width / 2, height / 2];\n      innerRadius = [outterRadius[0] - outlineBorderWidth / 2, outterRadius[1] - outlineBorderWidth / 2];\n      paddingRadius = [parsePercent(outlineDistance, width), parsePercent(outlineDistance, height)];\n      radius = [Math.max(innerRadius[0] - paddingRadius[0], 0), Math.max(innerRadius[1] - paddingRadius[1], 0)];\n    } else {\n      outterRadius = parsePercent(radius, size) / 2;\n      innerRadius = outterRadius - outlineBorderWidth / 2;\n      paddingRadius = parsePercent(outlineDistance, size);\n      radius = Math.max(innerRadius - paddingRadius, 0);\n    }\n    if (showOutline) {\n      var outline = getOutline();\n      outline.style.lineWidth = outlineBorderWidth;\n      group.add(getOutline());\n    }\n    var left = isFillContainer ? 0 : cx - radius;\n    var top = isFillContainer ? 0 : cy - radius;\n    var wavePath = null;\n    group.add(getBackground());\n\n    // each data item for a wave\n    var oldData = this._data;\n    var waves = [];\n    data.diff(oldData).add(function (idx) {\n      var wave = getWave(idx, false);\n      var waterLevel = wave.shape.waterLevel;\n      wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n      echarts.graphic.initProps(wave, {\n        shape: {\n          waterLevel: waterLevel\n        }\n      }, seriesModel);\n      wave.z2 = 2;\n      setWaveAnimation(idx, wave, null);\n      group.add(wave);\n      data.setItemGraphicEl(idx, wave);\n      waves.push(wave);\n    }).update(function (newIdx, oldIdx) {\n      var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n      // new wave is used to calculate position, but not added\n      var newWave = getWave(newIdx, false, waveElement);\n\n      // changes with animation\n      var shape = {};\n      var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n      for (var i = 0; i < shapeAttrs.length; ++i) {\n        var attr = shapeAttrs[i];\n        if (newWave.shape.hasOwnProperty(attr)) {\n          shape[attr] = newWave.shape[attr];\n        }\n      }\n      var style = {};\n      var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n      for (var i = 0; i < styleAttrs.length; ++i) {\n        var attr = styleAttrs[i];\n        if (newWave.style.hasOwnProperty(attr)) {\n          style[attr] = newWave.style[attr];\n        }\n      }\n      if (isFillContainer) {\n        shape.radiusY = height / 2;\n      }\n\n      // changes with animation\n      echarts.graphic.updateProps(waveElement, {\n        shape: shape,\n        x: newWave.x,\n        y: newWave.y\n      }, seriesModel);\n      if (seriesModel.isUniversalTransitionEnabled && seriesModel.isUniversalTransitionEnabled()) {\n        echarts.graphic.updateProps(waveElement, {\n          style: style\n        }, seriesModel);\n      } else {\n        waveElement.useStyle(style);\n      }\n\n      // instant changes\n      var oldWaveClipPath = waveElement.getClipPath();\n      var newWaveClipPath = newWave.getClipPath();\n      waveElement.setClipPath(newWave.getClipPath());\n      waveElement.shape.inverse = newWave.inverse;\n      if (oldWaveClipPath && newWaveClipPath && self._shape === symbol\n      // TODO use zrender morphing to apply complex symbol animation.\n      && !isPathSymbol(symbol)) {\n        // Can be animated.\n        echarts.graphic.updateProps(newWaveClipPath, {\n          shape: oldWaveClipPath.shape\n        }, seriesModel, {\n          isFrom: true\n        });\n      }\n      setWaveAnimation(newIdx, waveElement, waveElement);\n      group.add(waveElement);\n      data.setItemGraphicEl(newIdx, waveElement);\n      waves.push(waveElement);\n    }).remove(function (idx) {\n      var wave = oldData.getItemGraphicEl(idx);\n      group.remove(wave);\n    }).execute();\n    if (itemModel.get('label.show')) {\n      group.add(getText(waves));\n    }\n    this._shape = symbol;\n    this._data = data;\n\n    /**\n     * Get path for outline, background and clipping\n     *\n     * @param {number} r outter radius of shape\n     * @param {boolean|undefined} isForClipping if the shape is used\n     *                                          for clipping\n     */\n    function getPath(r, isForClipping) {\n      if (symbol) {\n        // customed symbol path\n        if (isPathSymbol(symbol)) {\n          var path = echarts.graphic.makePath(symbol.slice(7), {});\n          var bouding = path.getBoundingRect();\n          var w = bouding.width;\n          var h = bouding.height;\n          if (w > h) {\n            h = r * 2 / w * h;\n            w = r * 2;\n          } else {\n            w = r * 2 / h * w;\n            h = r * 2;\n          }\n          var left = isForClipping ? 0 : cx - w / 2;\n          var top = isForClipping ? 0 : cy - h / 2;\n          path = echarts.graphic.makePath(symbol.slice(7), {}, new echarts.graphic.BoundingRect(left, top, w, h));\n          if (isForClipping) {\n            path.x = -w / 2;\n            path.y = -h / 2;\n          }\n          return path;\n        } else if (isFillContainer) {\n          // fully fill the container\n          var x = isForClipping ? -r[0] : cx - r[0];\n          var y = isForClipping ? -r[1] : cy - r[1];\n          return echarts.helper.createSymbol('rect', x, y, r[0] * 2, r[1] * 2);\n        } else {\n          var x = isForClipping ? -r : cx - r;\n          var y = isForClipping ? -r : cy - r;\n          if (symbol === 'pin') {\n            y += r;\n          } else if (symbol === 'arrow') {\n            y -= r;\n          }\n          return echarts.helper.createSymbol(symbol, x, y, r * 2, r * 2);\n        }\n      }\n      return new echarts.graphic.Circle({\n        shape: {\n          cx: isForClipping ? 0 : cx,\n          cy: isForClipping ? 0 : cy,\n          r: r\n        }\n      });\n    }\n    /**\n     * Create outline\n     */\n    function getOutline() {\n      var outlinePath = getPath(outterRadius);\n      outlinePath.style.fill = null;\n      outlinePath.setStyle(seriesModel.getModel('outline.itemStyle').getItemStyle());\n      return outlinePath;\n    }\n\n    /**\n     * Create background\n     */\n    function getBackground() {\n      // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n      var strokePath = getPath(radius);\n      strokePath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      strokePath.style.fill = null;\n\n      // Stroke is front of wave\n      strokePath.z2 = 5;\n      var fillPath = getPath(radius);\n      fillPath.setStyle(seriesModel.getModel('backgroundStyle').getItemStyle());\n      fillPath.style.stroke = null;\n      var group = new echarts.graphic.Group();\n      group.add(strokePath);\n      group.add(fillPath);\n      return group;\n    }\n\n    /**\n     * wave shape\n     */\n    function getWave(idx, isInverse, oldWave) {\n      var radiusX = isFillContainer ? radius[0] : radius;\n      var radiusY = isFillContainer ? height / 2 : radius;\n      var itemModel = data.getItemModel(idx);\n      var itemStyleModel = itemModel.getModel('itemStyle');\n      var phase = itemModel.get('phase');\n      var amplitude = parsePercent(itemModel.get('amplitude'), radiusY * 2);\n      var waveLength = parsePercent(itemModel.get('waveLength'), radiusX * 2);\n      var value = data.get('value', idx);\n      var waterLevel = radiusY - value * radiusY * 2;\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n      var normalStyle = itemStyleModel.getItemStyle();\n      if (!normalStyle.fill) {\n        var seriesColor = seriesModel.get('color');\n        var id = idx % seriesColor.length;\n        normalStyle.fill = seriesColor[id];\n      }\n      var x = radiusX * 2;\n      var wave = new LiquidShape({\n        shape: {\n          waveLength: waveLength,\n          radius: radiusX,\n          radiusY: radiusY,\n          cx: x,\n          cy: 0,\n          waterLevel: waterLevel,\n          amplitude: amplitude,\n          phase: phase,\n          inverse: isInverse\n        },\n        style: normalStyle,\n        x: cx,\n        y: cy\n      });\n      wave.shape._waterLevel = waterLevel;\n      var hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n      hoverStyle.lineWidth = 0;\n      wave.ensureState('emphasis').style = hoverStyle;\n      echarts.helper.enableHoverEmphasis(wave);\n\n      // clip out the part outside the circle\n      var clip = getPath(radius, true);\n      // set fill for clipPath, otherwise it will not trigger hover event\n      clip.setStyle({\n        fill: 'white'\n      });\n      wave.setClipPath(clip);\n      return wave;\n    }\n    function setWaveAnimation(idx, wave, oldWave) {\n      var itemModel = data.getItemModel(idx);\n      var maxSpeed = itemModel.get('period');\n      var direction = itemModel.get('direction');\n      var value = data.get('value', idx);\n      var phase = itemModel.get('phase');\n      phase = oldWave ? oldWave.shape.phase : phase === 'auto' ? idx * Math.PI / 4 : phase;\n      var defaultSpeed = function (maxSpeed) {\n        var cnt = data.count();\n        return cnt === 0 ? maxSpeed : maxSpeed * (0.2 + (cnt - idx) / cnt * 0.8);\n      };\n      var speed = 0;\n      if (maxSpeed === 'auto') {\n        speed = defaultSpeed(5000);\n      } else {\n        speed = typeof maxSpeed === 'function' ? maxSpeed(value, idx) : maxSpeed;\n      }\n\n      // phase for moving left/right\n      var phaseOffset = 0;\n      if (direction === 'right' || direction == null) {\n        phaseOffset = Math.PI;\n      } else if (direction === 'left') {\n        phaseOffset = -Math.PI;\n      } else if (direction === 'none') {\n        phaseOffset = 0;\n      } else {\n        console.error('Illegal direction value for liquid fill.');\n      }\n\n      // wave animation of moving left/right\n      if (direction !== 'none' && itemModel.get('waveAnimation')) {\n        wave.animate('shape', true).when(0, {\n          phase: phase\n        }).when(speed / 2, {\n          phase: phaseOffset + phase\n        }).when(speed, {\n          phase: phaseOffset * 2 + phase\n        }).during(function () {\n          if (wavePath) {\n            wavePath.dirty(true);\n          }\n        }).start();\n      }\n    }\n\n    /**\n     * text on wave\n     */\n    function getText(waves) {\n      var labelModel = itemModel.getModel('label');\n      function formatLabel() {\n        var formatted = seriesModel.getFormattedLabel(0, 'normal');\n        var defaultVal = data.get('value', 0) * 100;\n        var defaultLabel = data.getName(0) || seriesModel.name;\n        if (!isNaN(defaultVal)) {\n          defaultLabel = defaultVal.toFixed(0) + '%';\n        }\n        return formatted == null ? defaultLabel : formatted;\n      }\n      var textRectOption = {\n        z2: 10,\n        shape: {\n          x: left,\n          y: top,\n          width: (isFillContainer ? radius[0] : radius) * 2,\n          height: (isFillContainer ? radius[1] : radius) * 2\n        },\n        style: {\n          fill: 'transparent'\n        },\n        textConfig: {\n          position: labelModel.get('position') || 'inside'\n        },\n        silent: true\n      };\n      var textOption = {\n        style: {\n          text: formatLabel(),\n          textAlign: labelModel.get('align'),\n          textVerticalAlign: labelModel.get('baseline')\n        }\n      };\n      Object.assign(textOption.style, echarts.helper.createTextStyle(labelModel));\n      var outsideTextRect = new echarts.graphic.Rect(textRectOption);\n      var insideTextRect = new echarts.graphic.Rect(textRectOption);\n      insideTextRect.disableLabelAnimation = true;\n      outsideTextRect.disableLabelAnimation = true;\n      var outsideText = new echarts.graphic.Text(textOption);\n      var insideText = new echarts.graphic.Text(textOption);\n      outsideTextRect.setTextContent(outsideText);\n      insideTextRect.setTextContent(insideText);\n      var insColor = labelModel.get('insideColor');\n      insideText.style.fill = insColor;\n      var group = new echarts.graphic.Group();\n      group.add(outsideTextRect);\n      group.add(insideTextRect);\n\n      // clip out waves for insideText\n      var boundingCircle = getPath(radius, true);\n      wavePath = new echarts.graphic.CompoundPath({\n        shape: {\n          paths: waves\n        },\n        x: cx,\n        y: cy\n      });\n      wavePath.setClipPath(boundingCircle);\n      insideTextRect.setClipPath(wavePath);\n      return group;\n    }\n  },\n  dispose: function () {\n    // dispose nothing here\n  }\n});","map":{"version":3,"names":["echarts","numberUtil","LiquidShape","parsePercent","isPathSymbol","symbol","indexOf","extendChartView","type","render","seriesModel","ecModel","api","self","group","removeAll","data","getData","itemModel","getItemModel","center","get","radius","width","getWidth","height","getHeight","size","Math","min","outlineDistance","outlineBorderWidth","showOutline","cx","cy","outterRadius","innerRadius","paddingRadius","isFillContainer","max","outline","getOutline","style","lineWidth","add","left","top","wavePath","getBackground","oldData","_data","waves","diff","idx","wave","getWave","waterLevel","shape","graphic","initProps","z2","setWaveAnimation","setItemGraphicEl","push","update","newIdx","oldIdx","waveElement","getItemGraphicEl","newWave","shapeAttrs","i","length","attr","hasOwnProperty","styleAttrs","radiusY","updateProps","x","y","isUniversalTransitionEnabled","useStyle","oldWaveClipPath","getClipPath","newWaveClipPath","setClipPath","inverse","_shape","isFrom","remove","execute","getText","getPath","r","isForClipping","path","makePath","slice","bouding","getBoundingRect","w","h","BoundingRect","helper","createSymbol","Circle","outlinePath","fill","setStyle","getModel","getItemStyle","strokePath","fillPath","stroke","Group","isInverse","oldWave","radiusX","itemStyleModel","phase","amplitude","waveLength","value","PI","normalStyle","seriesColor","id","_waterLevel","hoverStyle","ensureState","enableHoverEmphasis","clip","maxSpeed","direction","defaultSpeed","cnt","count","speed","phaseOffset","console","error","animate","when","during","dirty","start","labelModel","formatLabel","formatted","getFormattedLabel","defaultVal","defaultLabel","getName","name","isNaN","toFixed","textRectOption","textConfig","position","silent","textOption","text","textAlign","textVerticalAlign","Object","assign","createTextStyle","outsideTextRect","Rect","insideTextRect","disableLabelAnimation","outsideText","Text","insideText","setTextContent","insColor","boundingCircle","CompoundPath","paths","dispose"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/echarts-liquidfill/src/liquidFillView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport * as numberUtil from 'echarts/lib/util/number';\nimport LiquidShape from './liquidFillShape';\n\nvar parsePercent = numberUtil.parsePercent;\n\nfunction isPathSymbol(symbol) {\n    return symbol && symbol.indexOf('path://') === 0\n}\n\necharts.extendChartView({\n\n    type: 'liquidFill',\n\n    render: function (seriesModel, ecModel, api) {\n        var self = this;\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var itemModel = data.getItemModel(0);\n\n        var center = itemModel.get('center');\n        var radius = itemModel.get('radius');\n\n        var width = api.getWidth();\n        var height = api.getHeight();\n        var size = Math.min(width, height);\n        // itemStyle\n        var outlineDistance = 0;\n        var outlineBorderWidth = 0;\n        var showOutline = seriesModel.get('outline.show');\n\n        if (showOutline) {\n            outlineDistance = seriesModel.get('outline.borderDistance');\n            outlineBorderWidth = parsePercent(\n                seriesModel.get('outline.itemStyle.borderWidth'), size\n            );\n        }\n\n        var cx = parsePercent(center[0], width);\n        var cy = parsePercent(center[1], height);\n\n        var outterRadius;\n        var innerRadius;\n        var paddingRadius;\n\n        var isFillContainer = false;\n\n        var symbol = seriesModel.get('shape');\n        if (symbol === 'container') {\n            // a shape that fully fills the container\n            isFillContainer = true;\n\n            outterRadius = [\n                width / 2,\n                height / 2\n            ];\n            innerRadius = [\n                outterRadius[0] - outlineBorderWidth / 2,\n                outterRadius[1] - outlineBorderWidth / 2\n            ];\n            paddingRadius = [\n                parsePercent(outlineDistance, width),\n                parsePercent(outlineDistance, height)\n            ];\n\n            radius = [\n                Math.max(innerRadius[0] - paddingRadius[0], 0),\n                Math.max(innerRadius[1] - paddingRadius[1], 0)\n            ];\n        }\n        else {\n            outterRadius = parsePercent(radius, size) / 2;\n            innerRadius = outterRadius - outlineBorderWidth / 2;\n            paddingRadius = parsePercent(outlineDistance, size);\n\n            radius = Math.max(innerRadius - paddingRadius, 0);\n        }\n\n        if (showOutline) {\n            var outline = getOutline();\n            outline.style.lineWidth = outlineBorderWidth;\n            group.add(getOutline());\n        }\n\n        var left = isFillContainer ? 0 : cx - radius;\n        var top = isFillContainer ? 0 : cy - radius;\n\n        var wavePath = null;\n\n        group.add(getBackground());\n\n        // each data item for a wave\n        var oldData = this._data;\n        var waves = [];\n        data.diff(oldData)\n            .add(function (idx) {\n                var wave = getWave(idx, false);\n\n                var waterLevel = wave.shape.waterLevel;\n                wave.shape.waterLevel = isFillContainer ? height / 2 : radius;\n                echarts.graphic.initProps(wave, {\n                    shape: {\n                        waterLevel: waterLevel\n                    }\n                }, seriesModel);\n\n                wave.z2 = 2;\n                setWaveAnimation(idx, wave, null);\n\n                group.add(wave);\n                data.setItemGraphicEl(idx, wave);\n                waves.push(wave);\n            })\n            .update(function (newIdx, oldIdx) {\n                var waveElement = oldData.getItemGraphicEl(oldIdx);\n\n                // new wave is used to calculate position, but not added\n                var newWave = getWave(newIdx, false, waveElement);\n\n                // changes with animation\n                var shape = {};\n                var shapeAttrs = ['amplitude', 'cx', 'cy', 'phase', 'radius', 'radiusY', 'waterLevel', 'waveLength'];\n                for (var i = 0; i < shapeAttrs.length; ++i) {\n                    var attr = shapeAttrs[i];\n                    if (newWave.shape.hasOwnProperty(attr)) {\n                        shape[attr] = newWave.shape[attr];\n                    }\n                }\n\n                var style = {};\n                var styleAttrs = ['fill', 'opacity', 'shadowBlur', 'shadowColor'];\n                for (var i = 0; i < styleAttrs.length; ++i) {\n                    var attr = styleAttrs[i];\n                    if (newWave.style.hasOwnProperty(attr)) {\n                        style[attr] = newWave.style[attr];\n                    }\n                }\n\n                if (isFillContainer) {\n                    shape.radiusY = height / 2;\n                }\n\n                // changes with animation\n                echarts.graphic.updateProps(waveElement, {\n                    shape: shape,\n                    x: newWave.x,\n                    y: newWave.y\n                }, seriesModel);\n\n                if (seriesModel.isUniversalTransitionEnabled && seriesModel.isUniversalTransitionEnabled()) {\n                    echarts.graphic.updateProps(waveElement, {\n                        style: style\n                    }, seriesModel);\n                }\n                else {\n                    waveElement.useStyle(style);\n                }\n\n                // instant changes\n                var oldWaveClipPath = waveElement.getClipPath();\n                var newWaveClipPath = newWave.getClipPath();\n\n                waveElement.setClipPath(newWave.getClipPath());\n                waveElement.shape.inverse = newWave.inverse;\n\n                if (oldWaveClipPath && newWaveClipPath\n                    && self._shape === symbol\n                    // TODO use zrender morphing to apply complex symbol animation.\n                    && !isPathSymbol(symbol)\n                ) {\n                    // Can be animated.\n                    echarts.graphic.updateProps(newWaveClipPath, {\n                        shape: oldWaveClipPath.shape\n                    }, seriesModel, { isFrom: true });\n                }\n\n                setWaveAnimation(newIdx, waveElement, waveElement);\n                group.add(waveElement);\n                data.setItemGraphicEl(newIdx, waveElement);\n                waves.push(waveElement);\n            })\n            .remove(function (idx) {\n                var wave = oldData.getItemGraphicEl(idx);\n                group.remove(wave);\n            })\n            .execute();\n\n        if (itemModel.get('label.show')) {\n            group.add(getText(waves));\n        }\n\n        this._shape = symbol;\n        this._data = data;\n\n        /**\n         * Get path for outline, background and clipping\n         *\n         * @param {number} r outter radius of shape\n         * @param {boolean|undefined} isForClipping if the shape is used\n         *                                          for clipping\n         */\n        function getPath(r, isForClipping) {\n            if (symbol) {\n                // customed symbol path\n                if (isPathSymbol(symbol)) {\n                    var path = echarts.graphic.makePath(symbol.slice(7), {});\n                    var bouding = path.getBoundingRect();\n                    var w = bouding.width;\n                    var h = bouding.height;\n                    if (w > h) {\n                        h = r * 2 / w * h;\n                        w = r * 2;\n                    }\n                    else {\n                        w = r * 2 / h * w;\n                        h = r * 2;\n                    }\n\n                    var left = isForClipping ? 0 : cx - w / 2;\n                    var top = isForClipping ? 0 : cy - h / 2;\n                    path = echarts.graphic.makePath(\n                        symbol.slice(7),\n                        {},\n                        new echarts.graphic.BoundingRect(left, top, w, h)\n                    );\n                    if (isForClipping) {\n                        path.x = -w / 2;\n                        path.y = -h / 2;\n                    }\n                    return path;\n                }\n                else if (isFillContainer) {\n                    // fully fill the container\n                    var x = isForClipping ? -r[0] : cx - r[0];\n                    var y = isForClipping ? -r[1] : cy - r[1];\n                    return echarts.helper.createSymbol(\n                        'rect', x, y, r[0] * 2, r[1] * 2\n                    );\n                }\n                else {\n                    var x = isForClipping ? -r : cx - r;\n                    var y = isForClipping ? -r : cy - r;\n                    if (symbol === 'pin') {\n                        y += r;\n                    }\n                    else if (symbol === 'arrow') {\n                        y -= r;\n                    }\n                    return echarts.helper.createSymbol(symbol, x, y, r * 2, r * 2);\n                }\n            }\n\n            return new echarts.graphic.Circle({\n                shape: {\n                    cx: isForClipping ? 0 : cx,\n                    cy: isForClipping ? 0 : cy,\n                    r: r\n                }\n            });\n        }\n        /**\n         * Create outline\n         */\n        function getOutline() {\n            var outlinePath = getPath(outterRadius);\n            outlinePath.style.fill = null;\n\n            outlinePath.setStyle(seriesModel.getModel('outline.itemStyle')\n                .getItemStyle());\n\n            return outlinePath;\n        }\n\n        /**\n         * Create background\n         */\n        function getBackground() {\n            // Seperate stroke and fill, so we can use stroke to cover the alias of clipping.\n            var strokePath = getPath(radius);\n            strokePath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            strokePath.style.fill = null;\n\n            // Stroke is front of wave\n            strokePath.z2 = 5;\n\n            var fillPath = getPath(radius);\n            fillPath.setStyle(seriesModel.getModel('backgroundStyle')\n                .getItemStyle());\n            fillPath.style.stroke = null;\n\n            var group = new echarts.graphic.Group();\n            group.add(strokePath);\n            group.add(fillPath);\n\n            return group;\n        }\n\n        /**\n         * wave shape\n         */\n        function getWave(idx, isInverse, oldWave) {\n            var radiusX = isFillContainer ? radius[0] : radius;\n            var radiusY = isFillContainer ? height / 2 : radius;\n\n            var itemModel = data.getItemModel(idx);\n            var itemStyleModel = itemModel.getModel('itemStyle');\n            var phase = itemModel.get('phase');\n            var amplitude = parsePercent(itemModel.get('amplitude'),\n                radiusY * 2);\n            var waveLength = parsePercent(itemModel.get('waveLength'),\n                radiusX * 2);\n\n            var value = data.get('value', idx);\n            var waterLevel = radiusY - value * radiusY * 2;\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n            var normalStyle = itemStyleModel.getItemStyle();\n            if (!normalStyle.fill) {\n                var seriesColor = seriesModel.get('color');\n                var id = idx % seriesColor.length;\n                normalStyle.fill = seriesColor[id];\n            }\n\n            var x = radiusX * 2;\n            var wave = new LiquidShape({\n                shape: {\n                    waveLength: waveLength,\n                    radius: radiusX,\n                    radiusY: radiusY,\n                    cx: x,\n                    cy: 0,\n                    waterLevel: waterLevel,\n                    amplitude: amplitude,\n                    phase: phase,\n                    inverse: isInverse\n                },\n                style: normalStyle,\n                x: cx,\n                y: cy,\n            });\n            wave.shape._waterLevel = waterLevel;\n\n            var hoverStyle = itemModel.getModel('emphasis.itemStyle')\n                .getItemStyle();\n            hoverStyle.lineWidth = 0;\n\n            wave.ensureState('emphasis').style = hoverStyle;\n            echarts.helper.enableHoverEmphasis(wave);\n\n            // clip out the part outside the circle\n            var clip = getPath(radius, true);\n            // set fill for clipPath, otherwise it will not trigger hover event\n            clip.setStyle({\n                fill: 'white'\n            });\n            wave.setClipPath(clip);\n\n            return wave;\n        }\n\n        function setWaveAnimation(idx, wave, oldWave) {\n            var itemModel = data.getItemModel(idx);\n\n            var maxSpeed = itemModel.get('period');\n            var direction = itemModel.get('direction');\n\n            var value = data.get('value', idx);\n\n            var phase = itemModel.get('phase');\n            phase = oldWave ? oldWave.shape.phase\n                : (phase === 'auto' ? idx * Math.PI / 4 : phase);\n\n            var defaultSpeed = function (maxSpeed) {\n                var cnt = data.count();\n                return cnt === 0 ? maxSpeed : maxSpeed *\n                    (0.2 + (cnt - idx) / cnt * 0.8);\n            };\n            var speed = 0;\n            if (maxSpeed === 'auto') {\n                speed = defaultSpeed(5000);\n            }\n            else {\n                speed = typeof maxSpeed === 'function'\n                    ? maxSpeed(value, idx) : maxSpeed;\n            }\n\n            // phase for moving left/right\n            var phaseOffset = 0;\n            if (direction === 'right' || direction == null) {\n                phaseOffset = Math.PI;\n            }\n            else if (direction === 'left') {\n                phaseOffset = -Math.PI;\n            }\n            else if (direction === 'none') {\n                phaseOffset = 0;\n            }\n            else {\n                console.error('Illegal direction value for liquid fill.');\n            }\n\n            // wave animation of moving left/right\n            if (direction !== 'none' && itemModel.get('waveAnimation')) {\n                wave\n                    .animate('shape', true)\n                    .when(0, {\n                        phase: phase\n                    })\n                    .when(speed / 2, {\n                        phase: phaseOffset + phase\n                    })\n                    .when(speed, {\n                        phase: phaseOffset * 2 + phase\n                    })\n                    .during(function () {\n                        if (wavePath) {\n                            wavePath.dirty(true);\n                        }\n                    })\n                    .start();\n            }\n        }\n\n        /**\n         * text on wave\n         */\n        function getText(waves) {\n            var labelModel = itemModel.getModel('label');\n\n            function formatLabel() {\n                var formatted = seriesModel.getFormattedLabel(0, 'normal');\n                var defaultVal = (data.get('value', 0) * 100);\n                var defaultLabel = data.getName(0) || seriesModel.name;\n                if (!isNaN(defaultVal)) {\n                    defaultLabel = defaultVal.toFixed(0) + '%';\n                }\n                return formatted == null ? defaultLabel : formatted;\n            }\n\n            var textRectOption = {\n                z2: 10,\n                shape: {\n                    x: left,\n                    y: top,\n                    width: (isFillContainer ? radius[0] : radius) * 2,\n                    height: (isFillContainer ? radius[1] : radius) * 2\n                },\n                style: {\n                    fill: 'transparent'\n                },\n                textConfig: {\n                    position: labelModel.get('position') || 'inside'\n                },\n                silent: true\n            };\n            var textOption = {\n                style: {\n                    text: formatLabel(),\n                    textAlign: labelModel.get('align'),\n                    textVerticalAlign: labelModel.get('baseline')\n                }\n            };\n            Object.assign(textOption.style, echarts.helper.createTextStyle(labelModel));\n\n            var outsideTextRect = new echarts.graphic.Rect(textRectOption);\n            var insideTextRect = new echarts.graphic.Rect(textRectOption);\n            insideTextRect.disableLabelAnimation = true;\n            outsideTextRect.disableLabelAnimation = true;\n\n            var outsideText = new echarts.graphic.Text(textOption);\n            var insideText = new echarts.graphic.Text(textOption);\n            outsideTextRect.setTextContent(outsideText);\n\n            insideTextRect.setTextContent(insideText);\n            var insColor = labelModel.get('insideColor');\n            insideText.style.fill = insColor;\n\n            var group = new echarts.graphic.Group();\n            group.add(outsideTextRect);\n            group.add(insideTextRect);\n\n            // clip out waves for insideText\n            var boundingCircle = getPath(radius, true);\n\n            wavePath = new echarts.graphic.CompoundPath({\n                shape: {\n                    paths: waves\n                },\n                x: cx,\n                y: cy\n            });\n\n            wavePath.setClipPath(boundingCircle);\n            insideTextRect.setClipPath(wavePath);\n\n            return group;\n        }\n    },\n\n    dispose: function () {\n        // dispose nothing here\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
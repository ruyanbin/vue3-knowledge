{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvCapsuleChart',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Capsule chart data\n         * @type {Array<Object>}\n         * @default data = []\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\n         */\n        data: [],\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293'],\n        /**\n         * @description Chart unit\n         * @type {String}\n         * @default unit = ''\n         */\n        unit: ''\n      },\n      mergedConfig: null,\n      capsuleLength: [],\n      labelData: []\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    calcData() {\n      const {\n        mergeConfig,\n        calcCapsuleLengthAndLabelData\n      } = this;\n      mergeConfig();\n      calcCapsuleLengthAndLabelData();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcCapsuleLengthAndLabelData() {\n      const {\n        data\n      } = this.mergedConfig;\n      if (!data.length) return;\n      const capsuleValue = data.map(({\n        value\n      }) => value);\n      const maxValue = Math.max(...capsuleValue);\n      this.capsuleLength = capsuleValue.map(v => maxValue ? v / maxValue : 0);\n      const oneFifth = maxValue / 5;\n      this.labelData = new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth));\n    }\n  },\n  mounted() {\n    const {\n      calcData\n    } = this;\n    calcData();\n  }\n};","map":{"version":3,"mappings":"AA4BA,SAASA,SAAQ,QAAS,kCAAiC;AAE3D,SAASC,SAAQ,QAAS,qCAAoC;AAE9D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,IAAG,GAAK;IACN,OAAO;MACLC,aAAa,EAAE;QACb;;;;;;QAMAD,IAAI,EAAE,EAAE;QACR;;;;;;QAMAE,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACrF;;;;;QAKAC,IAAI,EAAE;MACR,CAAC;MAEDC,YAAY,EAAE,IAAI;MAElBC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,KAAK,EAAE;IACLX,MAAK,GAAK;MACR,MAAM;QAAEY;MAAS,IAAI,IAAG;MAExBA,QAAQ,EAAC;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPD,QAAO,GAAK;MACV,MAAM;QAAEE,WAAW;QAAEC;MAA8B,IAAI,IAAG;MAE1DD,WAAW,EAAC;MAEZC,6BAA6B,EAAC;IAChC,CAAC;IACDD,WAAU,GAAK;MACb,IAAI;QAAEd,MAAM;QAAEK;MAAc,IAAI,IAAG;MAEnC,IAAI,CAACG,YAAW,GAAIZ,SAAS,CAACC,SAAS,CAACQ,aAAa,EAAE,IAAI,CAAC,EAAEL,MAAK,IAAK,CAAC,CAAC;IAC5E,CAAC;IACDe,6BAA4B,GAAK;MAC/B,MAAM;QAAEX;MAAK,IAAI,IAAI,CAACI,YAAW;MAEjC,IAAI,CAACJ,IAAI,CAACY,MAAM,EAAE;MAElB,MAAMC,YAAW,GAAIb,IAAI,CAACc,GAAG,CAAC,CAAC;QAAEC;MAAM,CAAC,KAAKA,KAAK;MAElD,MAAMC,QAAO,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAGL,YAAY;MAEzC,IAAI,CAACR,aAAY,GAAIQ,YAAY,CAACC,GAAG,CAACK,KAAKH,QAAO,GAAIG,IAAIH,QAAO,GAAI,CAAC;MAEtE,MAAMI,QAAO,GAAIJ,QAAO,GAAI;MAE5B,IAAI,CAACV,SAAQ,GAAI,IAAIe,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACR,GAAG,CAAC,CAACK,CAAC,EAAEI,CAAC,KAAKN,IAAI,CAACO,IAAI,CAACD,IAAIH,QAAQ,CAAC;IAC7E;EACF,CAAC;EACDK,OAAM,GAAK;IACT,MAAM;MAAEjB;IAAS,IAAI,IAAG;IAExBA,QAAQ,EAAC;EACX;AACF","names":["deepMerge","deepClone","name","props","config","type","Object","default","data","defaultConfig","colors","unit","mergedConfig","capsuleLength","labelData","watch","calcData","methods","mergeConfig","calcCapsuleLengthAndLabelData","length","capsuleValue","map","value","maxValue","Math","max","v","oneFifth","Array","fill","i","ceil","mounted"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/capsuleChart/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-capsule-chart\">\n    <template v-if=\"mergedConfig\">\n      <div class=\"label-column\">\n        <div v-for=\"item in mergedConfig.data\" :key=\"item.name\">{{ item.name }}</div>\n        <div>&nbsp;</div>\n      </div>\n\n      <div class=\"capsule-container\">\n        <div\n          class=\"capsule-item\"\n          v-for=\"(capsule, index) in capsuleLength\"\n          :key=\"index\"\n        >\n          <div :style=\"`width: ${capsule * 100}%; background-color: ${mergedConfig.colors[index % mergedConfig.colors.length]};`\"></div>\n        </div>\n\n        <div class=\"unit-label\">\n          <div v-for=\"(label, index) in labelData\" :key=\"label + index\">{{ label }}</div>\n        </div>\n      </div>\n\n      <div class=\"unit-text\" v-if=\"mergedConfig.unit\">{{ mergedConfig.unit }}</div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvCapsuleChart',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      defaultConfig: {\n        /**\n         * @description Capsule chart data\n         * @type {Array<Object>}\n         * @default data = []\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\n         */\n        data: [],\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293'],\n        /**\n         * @description Chart unit\n         * @type {String}\n         * @default unit = ''\n         */\n        unit: ''\n      },\n\n      mergedConfig: null,\n\n      capsuleLength: [],\n      labelData: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    calcData () {\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\n\n      mergeConfig()\n\n      calcCapsuleLengthAndLabelData()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcCapsuleLengthAndLabelData () {\n      const { data } = this.mergedConfig\n\n      if (!data.length) return\n\n      const capsuleValue = data.map(({ value }) => value)\n\n      const maxValue = Math.max(...capsuleValue)\n\n      this.capsuleLength = capsuleValue.map(v => maxValue ? v / maxValue : 0)\n\n      const oneFifth = maxValue / 5\n\n      this.labelData = new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth))\n    }\n  },\n  mounted () {\n    const { calcData } = this\n\n    calcData()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
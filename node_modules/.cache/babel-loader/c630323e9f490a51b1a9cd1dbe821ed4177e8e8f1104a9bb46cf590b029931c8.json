{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \"js构造函数模式\")], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createBlock(_component_el_card, null, {\n    header: _withCtx(() => [_hoisted_1]),\n    default: _withCtx(() => [_hoisted_2, _createTextVNode(\" 例子: var lev=function(){ return \\\"嘿哈\\\"; }; function Parent(){ this.name =\\\"李小龙\\\"; this.age =20; this.lev=lev; }; var x=Parent();\"), _hoisted_3, _createTextVNode(\" var x=Parent(); 说明：\"), _hoisted_4, _createTextVNode(\" 1.与工厂方式相比，使用构造函数方式创建对象无需在函数内部创建对象，而使用this指代，并而函数无需明确return \"), _hoisted_5, _createTextVNode(\" 2.同工厂模式一样，虽然属性的值可以为方法，仍建议该方法定义在函数之外\"), _hoisted_6, _createTextVNode(\" 3.不推荐使用，但需要了解\"), _hoisted_7]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAGGA,oBAEM;EAFDC,KAAK,EAAC;AAAa,iBACvBD,oBAAyC;EAAnCC,KAAK,EAAC;AAAa,GAAC,UAAQ;gCAGpCD,oBAAI;gCAUWA,oBAAI;gCAGhBA,oBAAI;gCACoDA,oBAAI;gCAC5BA,oBAAI;gCAC1BA,oBAAI;;;;uBAtBlBE,aAuBUC;IAtBEC,MAAM,WAChB,MAEM,CAFNC,UAEM;sBAEP,MAAI,CAAJC,UAAI,qJAUW,aAAI,yCAGhB,aAAI,iFACoD,aAAI,yDAC5B,aAAI,mCAC1B,aAAI","names":["_createElementVNode","class","_createBlock","_component_el_card","header","_hoisted_1","_hoisted_2"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/Design/Structure.vue"],"sourcesContent":["<template>\n\t<el-card>\n\t\t<template #header>\n\t\t\t<div class=\"card-header\">\n\t\t\t\t<span class=\"font-medium\">js构造函数模式</span>\n\t\t\t</div>\n\t\t</template>\n\t\t<br>\n\t\t例子:\n\t\tvar lev=function(){\n\t\treturn \"嘿哈\";\n\t\t};\n\t\tfunction Parent(){\n\t\tthis.name =\"李小龙\";\n\t\tthis.age =20;\n\t\tthis.lev=lev;\n\t\t};\n\t\tvar x=Parent();<br>\n\t\tvar x=Parent();\n\n\t\t说明：<br>\n\t\t1.与工厂方式相比，使用构造函数方式创建对象无需在函数内部创建对象，而使用this指代，并而函数无需明确return <br>\n\t\t2.同工厂模式一样，虽然属性的值可以为方法，仍建议该方法定义在函数之外<br>\n\t\t3.不推荐使用，但需要了解<br>\n\t</el-card>\n</template>\n\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
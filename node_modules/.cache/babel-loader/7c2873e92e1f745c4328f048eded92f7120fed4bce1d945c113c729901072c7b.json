{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nimport { defineComponent, ref, shallowRef, onMounted, watch, toRaw, openBlock, createElementBlock, watchEffect } from \"vue\";\nimport { createEditor, DomEditor, createToolbar } from \"@wangeditor/editor\";\nfunction genErrorInfo(fnName) {\n  let info = `\\u8BF7\\u4F7F\\u7528 '@${fnName}' \\u4E8B\\u4EF6\\uFF0C\\u4E0D\\u8981\\u653E\\u5728 props \\u4E2D`;\n  info += `\nPlease use '@${fnName}' event instead of props`;\n  return info;\n}\nvar _export_sfc = (sfc, props) => {\n  for (const [key, val] of props) {\n    sfc[key] = val;\n  }\n  return sfc;\n};\nconst _sfc_main$1 = defineComponent({\n  props: {\n    mode: {\n      type: String,\n      default: \"default\"\n    },\n    defaultContent: {\n      type: Array,\n      default: []\n    },\n    defaultHtml: {\n      type: String,\n      default: \"\"\n    },\n    defaultConfig: {\n      type: Object,\n      default: {}\n    },\n    modelValue: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(props, context) {\n    const box = ref(null);\n    const editorRef = shallowRef(null);\n    const curValue = ref(\"\");\n    const initEditor = () => {\n      if (!box.value) return;\n      const defaultContent = toRaw(props.defaultContent);\n      createEditor({\n        selector: box.value,\n        mode: props.mode,\n        content: defaultContent || [],\n        html: props.defaultHtml || props.modelValue || \"\",\n        config: __spreadProps(__spreadValues({}, props.defaultConfig), {\n          onCreated(editor) {\n            editorRef.value = editor;\n            context.emit(\"onCreated\", editor);\n            if (props.defaultConfig.onCreated) {\n              const info = genErrorInfo(\"onCreated\");\n              throw new Error(info);\n            }\n          },\n          onChange(editor) {\n            const editorHtml = editor.getHtml();\n            curValue.value = editorHtml;\n            context.emit(\"update:modelValue\", editorHtml);\n            context.emit(\"onChange\", editor);\n            if (props.defaultConfig.onChange) {\n              const info = genErrorInfo(\"onChange\");\n              throw new Error(info);\n            }\n          },\n          onDestroyed(editor) {\n            context.emit(\"onDestroyed\", editor);\n            if (props.defaultConfig.onDestroyed) {\n              const info = genErrorInfo(\"onDestroyed\");\n              throw new Error(info);\n            }\n          },\n          onMaxLength(editor) {\n            context.emit(\"onMaxLength\", editor);\n            if (props.defaultConfig.onMaxLength) {\n              const info = genErrorInfo(\"onMaxLength\");\n              throw new Error(info);\n            }\n          },\n          onFocus(editor) {\n            context.emit(\"onFocus\", editor);\n            if (props.defaultConfig.onFocus) {\n              const info = genErrorInfo(\"onFocus\");\n              throw new Error(info);\n            }\n          },\n          onBlur(editor) {\n            context.emit(\"onBlur\", editor);\n            if (props.defaultConfig.onBlur) {\n              const info = genErrorInfo(\"onBlur\");\n              throw new Error(info);\n            }\n          },\n          customAlert(info, type) {\n            context.emit(\"customAlert\", info, type);\n            if (props.defaultConfig.customAlert) {\n              const info2 = genErrorInfo(\"customAlert\");\n              throw new Error(info2);\n            }\n          },\n          customPaste: (editor, event) => {\n            if (props.defaultConfig.customPaste) {\n              const info = genErrorInfo(\"customPaste\");\n              throw new Error(info);\n            }\n            let res;\n            context.emit(\"customPaste\", editor, event, val => {\n              res = val;\n            });\n            return res;\n          }\n        })\n      });\n    };\n    function setHtml(newHtml) {\n      const editor = editorRef.value;\n      if (editor == null) return;\n      editor.setHtml(newHtml);\n    }\n    onMounted(() => {\n      initEditor();\n    });\n    watch(() => props.modelValue, newVal => {\n      if (newVal === curValue.value) return;\n      setHtml(newVal);\n    });\n    return {\n      box\n    };\n  }\n});\nconst _hoisted_1$1 = {\n  ref: \"box\",\n  style: {\n    \"height\": \"100%\"\n  }\n};\nfunction _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$1, null, 512);\n}\nvar Editor = /* @__PURE__ */_export_sfc(_sfc_main$1, [[\"render\", _sfc_render$1]]);\nconst _sfc_main = defineComponent({\n  props: {\n    editor: {\n      type: Object\n    },\n    mode: {\n      type: String,\n      default: \"default\"\n    },\n    defaultConfig: {\n      type: Object,\n      default: {}\n    }\n  },\n  setup(props) {\n    const selector = ref(null);\n    const create = editor => {\n      if (!selector.value) return;\n      if (editor == null) {\n        throw new Error(\"Not found instance of Editor when create <Toolbar/> component\");\n      }\n      if (DomEditor.getToolbar(editor)) return;\n      createToolbar({\n        editor,\n        selector: selector.value || \"<div></div>\",\n        mode: props.mode,\n        config: props.defaultConfig\n      });\n    };\n    watchEffect(() => {\n      const {\n        editor\n      } = props;\n      if (editor == null) return;\n      create(editor);\n    });\n    return {\n      selector\n    };\n  }\n});\nconst _hoisted_1 = {\n  ref: \"selector\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, null, 512);\n}\nvar Toolbar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Editor, Toolbar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
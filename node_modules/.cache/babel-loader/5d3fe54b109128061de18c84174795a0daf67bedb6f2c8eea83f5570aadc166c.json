{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderSlot as _renderSlot } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"fill\", \"points\"];\nconst _hoisted_3 = [\"stroke\", \"points\"];\nconst _hoisted_4 = [\"stroke\", \"points\"];\nconst _hoisted_5 = [\"fill\"];\nconst _hoisted_6 = [\"fill\", \"cx\"];\nconst _hoisted_7 = [\"fill\", \"cx\", \"cy\"];\nconst _hoisted_8 = [\"fill\", \"cy\"];\nconst _hoisted_9 = {\n  class: \"border-box-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-border-box-2\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    class: \"dv-border-svg-container\",\n    width: _ctx.width,\n    height: _ctx.height\n  }, [_createElementVNode(\"polygon\", {\n    fill: $props.backgroundColor,\n    points: `\n        7, 7 ${_ctx.width - 7}, 7 ${_ctx.width - 7}, ${_ctx.height - 7} 7, ${_ctx.height - 7}\n      `\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[0],\n    points: `2, 2 ${_ctx.width - 2} ,2 ${_ctx.width - 2}, ${_ctx.height - 2} 2, ${_ctx.height - 2} 2, 2`\n  }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"polyline\", {\n    stroke: $data.mergedColor[1],\n    points: `6, 6 ${_ctx.width - 6}, 6 ${_ctx.width - 6}, ${_ctx.height - 6} 6, ${_ctx.height - 6} 6, 6`\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[0],\n    cx: \"11\",\n    cy: \"11\",\n    r: \"1\"\n  }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[0],\n    cx: _ctx.width - 11,\n    cy: \"11\",\n    r: \"1\"\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[0],\n    cx: _ctx.width - 11,\n    cy: _ctx.height - 11,\n    r: \"1\"\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"circle\", {\n    fill: $data.mergedColor[0],\n    cx: \"11\",\n    cy: _ctx.height - 11,\n    r: \"1\"\n  }, null, 8 /* PROPS */, _hoisted_8)], 8 /* PROPS */, _hoisted_1)), _createElementVNode(\"div\", _hoisted_9, [_renderSlot(_ctx.$slots, \"default\")])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;;;;EAqBSA,KAAK,EAAC;AAAoB;;uBApBjCC,oBAuBM;IAvBDD,KAAK,EAAC,iBAAiB;IAAEE,GAAG,EAAEC;qBACjCF,oBAiBM;IAjBDD,KAAK,EAAC,yBAAyB;IAAEI,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED;MAC3DE,oBAEK;IAFKC,IAAI,EAAEC,sBAAe;IAAGC,MAAM;eAAmBL,UAAK,WAAWA,UAAK,SAASA,WAAM,WAAWA,WAAM;;uCAIhHE,oBAGE;IAFCI,MAAM,EAAER,iBAAW;IACnBO,MAAM,UAAUL,UAAK,WAAWA,UAAK,SAASA,WAAM,WAAWA,WAAM;uCAExEE,oBAGE;IAFCI,MAAM,EAAER,iBAAW;IACnBO,MAAM,UAAUL,UAAK,WAAWA,UAAK,SAASA,WAAM,WAAWA,WAAM;uCAExEE,oBAAuD;IAA9CC,IAAI,EAAEL,iBAAW;IAAKS,EAAE,EAAC,IAAI;IAACC,EAAE,EAAC,IAAI;IAACC,CAAC,EAAC;uCACjDP,oBAAgE;IAAvDC,IAAI,EAAEL,iBAAW;IAAMS,EAAE,EAAEP,UAAK;IAAOQ,EAAE,EAAC,IAAI;IAACC,CAAC,EAAC;uCAC1DP,oBAA0E;IAAjEC,IAAI,EAAEL,iBAAW;IAAMS,EAAE,EAAEP,UAAK;IAAQQ,EAAE,EAAER,WAAM;IAAOS,CAAC,EAAC;uCACpEP,oBAAiE;IAAxDC,IAAI,EAAEL,iBAAW;IAAKS,EAAE,EAAC,IAAI;IAAEC,EAAE,EAAER,WAAM;IAAOS,CAAC,EAAC;qEAG7DP,oBAEM,OAFNQ,UAEM,GADJC,YAAaX","names":["class","_createElementBlock","ref","$data","width","_ctx","height","_createElementVNode","fill","$props","points","stroke","cx","cy","r","_hoisted_9","_renderSlot"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/borderBox2/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-border-box-2\" :ref=\"ref\">\n    <svg class=\"dv-border-svg-container\" :width=\"width\" :height=\"height\">\n      <polygon :fill=\"backgroundColor\" :points=\"`\n        7, 7 ${width - 7}, 7 ${width - 7}, ${height - 7} 7, ${height - 7}\n      `\" />\n\n      <polyline\n        :stroke=\"mergedColor[0]\"\n        :points=\"`2, 2 ${width - 2} ,2 ${width - 2}, ${height - 2} 2, ${height - 2} 2, 2`\"\n      />\n      <polyline\n        :stroke=\"mergedColor[1]\"\n        :points=\"`6, 6 ${width - 6}, 6 ${width - 6}, ${height - 6} 6, ${height - 6} 6, 6`\"\n      />\n      <circle :fill=\"mergedColor[0]\" cx=\"11\" cy=\"11\" r=\"1\" />\n      <circle :fill=\"mergedColor[0]\" :cx=\"width - 11\" cy=\"11\" r=\"1\" />\n      <circle :fill=\"mergedColor[0]\" :cx=\"width - 11\" :cy=\"height - 11\" r=\"1\" />\n      <circle :fill=\"mergedColor[0]\" cx=\"11\" :cy=\"height - 11\" r=\"1\" />\n    </svg>\n\n    <div class=\"border-box-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvBorderBox2',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    backgroundColor: {\n      type: String,\n      default: 'transparent'\n    }\n  },\n  data () {\n    return {\n      ref: 'border-box-2',\n\n      defaultColor: ['#fff', 'rgba(255, 255, 255, 0.6)'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
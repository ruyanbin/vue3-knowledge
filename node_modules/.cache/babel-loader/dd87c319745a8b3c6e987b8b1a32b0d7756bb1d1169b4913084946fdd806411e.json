{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nconst _hoisted_2 = [\"d\", \"fill\"];\nconst _hoisted_3 = [\"fill\", \"x\", \"y\"];\nconst _hoisted_4 = [\"xlink:href\", \"width\", \"height\", \"x\", \"y\"];\nconst _hoisted_5 = [\"fill\", \"x\", \"y\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-conical-column-chart\",\n    ref: $data.ref\n  }, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: _ctx.width,\n    height: _ctx.height\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.column, (item, i) => {\n    return _openBlock(), _createElementBlock(\"g\", {\n      key: i\n    }, [_createElementVNode(\"path\", {\n      d: item.d,\n      fill: $data.mergedConfig.columnColor\n    }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"text\", {\n      style: _normalizeStyle(`fontSize:${$data.mergedConfig.fontSize}px`),\n      fill: $data.mergedConfig.textColor,\n      x: item.x,\n      y: _ctx.height - 4\n    }, _toDisplayString(item.name), 13 /* TEXT, STYLE, PROPS */, _hoisted_3), $data.mergedConfig.img.length ? (_openBlock(), _createElementBlock(\"image\", {\n      key: 0,\n      \"xlink:href\": $data.mergedConfig.img[i % $data.mergedConfig.img.length],\n      width: $data.mergedConfig.imgSideLength,\n      height: $data.mergedConfig.imgSideLength,\n      x: item.x - $data.mergedConfig.imgSideLength / 2,\n      y: item.y - $data.mergedConfig.imgSideLength\n    }, null, 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true), $data.mergedConfig.showValue ? (_openBlock(), _createElementBlock(\"text\", {\n      key: 1,\n      style: _normalizeStyle(`fontSize:${$data.mergedConfig.fontSize}px`),\n      fill: $data.mergedConfig.textColor,\n      x: item.x,\n      y: item.textY\n    }, _toDisplayString(item.value), 13 /* TEXT, STYLE, PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_1))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;;;;;uBACEA,oBAqCM;IArCDC,KAAK,EAAC,yBAAyB;IAAEC,GAAG,EAAEC;qBACzCH,oBAmCM;IAnCAI,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED;yBAC3BL,oBAiCIO,6BAhCkBJ,YAAM,GAAlBK,IAAI,EAAEC,CAAC;yBADjBT,oBAiCI;MA/BDU,GAAG,EAAED;IAAC,IAEPE,oBAGE;MAFCC,CAAC,EAAEJ,IAAI,CAACI,CAAC;MACTC,IAAI,EAAEV,kBAAY,CAACW;yCAEtBH,oBAOO;MANJI,KAAK,8BAAcZ,kBAAY,CAACa,QAAQ;MACxCH,IAAI,EAAEV,kBAAY,CAACc,SAAS;MAC5BC,CAAC,EAAEV,IAAI,CAACU,CAAC;MACTC,CAAC,EAAEd,WAAM;wBAEPG,IAAI,CAACY,IAAI,6CAGNjB,kBAAY,CAACkB,GAAG,CAACC,MAAM,kBAD/BtB,oBAOE;;MALC,YAAU,EAAEG,kBAAY,CAACkB,GAAG,CAACZ,CAAC,GAAGN,kBAAY,CAACkB,GAAG,CAACC,MAAM;MACxDlB,KAAK,EAAED,kBAAY,CAACoB,aAAa;MACjCjB,MAAM,EAAEH,kBAAY,CAACoB,aAAa;MAClCL,CAAC,EAAEV,IAAI,CAACU,CAAC,GAAGf,kBAAY,CAACoB,aAAa;MACtCJ,CAAC,EAAEX,IAAI,CAACW,CAAC,GAAGhB,kBAAY,CAACoB;8EAGpBpB,kBAAY,CAACqB,SAAS,kBAD9BxB,oBAQO;;MANJe,KAAK,8BAAcZ,kBAAY,CAACa,QAAQ;MACxCH,IAAI,EAAEV,kBAAY,CAACc,SAAS;MAC5BC,CAAC,EAAEV,IAAI,CAACU,CAAC;MACTC,CAAC,EAAEX,IAAI,CAACiB;wBAENjB,IAAI,CAACkB,KAAK","names":["_createElementBlock","class","ref","$data","width","_ctx","height","_Fragment","item","i","key","_createElementVNode","d","fill","columnColor","style","fontSize","textColor","x","y","name","img","length","imgSideLength","showValue","textY","value"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/conicalColumnChart/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <g\n        v-for=\"(item, i) in column\"\n        :key=\"i\"\n      >\n        <path\n          :d=\"item.d\"\n          :fill=\"mergedConfig.columnColor\"\n        />\n        <text\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"height - 4\"\n        >\n          {{ item.name }}\n        </text>\n        <image\n          v-if=\"mergedConfig.img.length\"\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\n          :width=\"mergedConfig.imgSideLength\"\n          :height=\"mergedConfig.imgSideLength\"\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\n          :y=\"item.y - mergedConfig.imgSideLength\"\n        />\n        <text\n          v-if=\"mergedConfig.showValue\"\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"item.textY\"\n        >\n          {{ item.value }}\n        </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'conical-column-chart',\n\n      defaultConfig: {\n        /**\n         * @description Chart data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Chart img\n         * @type {Array<String>}\n         * @default img = []\n         */\n        img: [],\n        /**\n         * @description Chart font size\n         * @type {Number}\n         * @default fontSize = 12\n         */\n        fontSize: 12,\n        /**\n         * @description Img side length\n         * @type {Number}\n         * @default imgSideLength = 30\n         */\n        imgSideLength: 30,\n        /**\n         * @description Column color\n         * @type {String}\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Show value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n\n      mergedConfig: null,\n\n      column: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    calcData () {\n      const { mergeConfig, initData, calcSVGPath } = this\n\n      mergeConfig()\n\n      initData()\n\n      calcSVGPath()\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initData () {\n      const { mergedConfig } = this\n      let { data } = mergedConfig\n\n      data = deepClone(data, true)\n\n      data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const max = data[0] ? data[0].value : 10\n\n      data = data.map(item => ({\n        ...item,\n        percent: item.value / max\n      }))\n\n      mergedConfig.data = data\n    },\n    calcSVGPath () {\n      const { mergedConfig, width, height } = this\n\n      const { imgSideLength, fontSize, data } = mergedConfig\n\n      const itemNum = data.length\n      const gap = width / (itemNum + 1)\n\n      const useAbleHeight = height - imgSideLength - fontSize - 5\n      const svgBottom = height - fontSize - 5\n\n      this.column = data.map((item, i) => {\n        const { percent } = item\n\n        const middleXPos = gap * (i + 1)\n        const leftXPos = gap * i\n        const rightXpos = gap * (i + 2)\n\n        const middleYPos = svgBottom - useAbleHeight * percent\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\n\n        const d = `\n          M${leftXPos}, ${svgBottom}\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\n          M${middleXPos},${middleYPos}\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\n          L${leftXPos}, ${svgBottom}\n          Z\n        `\n\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\n\n        return {\n          ...item,\n          d,\n          x: middleXPos,\n          y: middleYPos,\n          textY\n        }\n      })\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { randomExtend, getPointDistance } from '../../../util/index';\nimport autoResize from '../../../mixin/autoResize';\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    const timestamp = Date.now();\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${timestamp}`,\n      haloGradientId: `halo-gradient-id-${timestamp}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n      mergedConfig: null\n    };\n  },\n  watch: {\n    config() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    async calcData() {\n      const {\n        mergeConfig,\n        calcflylinePoints,\n        calcLinePaths\n      } = this;\n      mergeConfig();\n      calcflylinePoints();\n      calcLinePaths();\n      const {\n        calcLineLengths\n      } = this;\n      await calcLineLengths();\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n      const {\n        points,\n        lines,\n        halo,\n        text,\n        icon,\n        line\n      } = mergedConfig;\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {});\n        item.text = deepMerge(deepClone(text, true), item.text || {});\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {});\n        return item;\n      });\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item);\n      });\n      this.mergedConfig = mergedConfig;\n    },\n    calcflylinePoints() {\n      const {\n        mergedConfig,\n        width,\n        height\n      } = this;\n      const {\n        relative,\n        points\n      } = mergedConfig;\n      this.flylinePoints = points.map((item, i) => {\n        const {\n          coordinate: [x, y],\n          halo,\n          icon,\n          text\n        } = item;\n        if (relative) item.coordinate = [x * width, y * height];\n        item.halo.time = randomExtend(...halo.duration) / 10;\n        const {\n          width: iw,\n          height: ih\n        } = icon;\n        item.icon.x = item.coordinate[0] - iw / 2;\n        item.icon.y = item.coordinate[1] - ih / 2;\n        const [ox, oy] = text.offset;\n        item.text.x = item.coordinate[0] + ox;\n        item.text.y = item.coordinate[1] + oy;\n        item.key = `${item.coordinate.toString()}${i}`;\n        return item;\n      });\n    },\n    calcLinePaths() {\n      const {\n        getPath,\n        mergedConfig\n      } = this;\n      const {\n        points,\n        lines\n      } = mergedConfig;\n      this.flylines = lines.map(item => {\n        const {\n          source,\n          target,\n          duration\n        } = item;\n        const sourcePoint = points.find(({\n          name\n        }) => name === source).coordinate;\n        const targetPoint = points.find(({\n          name\n        }) => name === target).coordinate;\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))));\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`;\n        const key = `path${path.toString()}`;\n        const time = randomExtend(...duration) / 10;\n        return {\n          ...item,\n          path,\n          key,\n          d,\n          time\n        };\n      });\n    },\n    getPath(start, end) {\n      const {\n        getControlPoint\n      } = this;\n      const controlPoint = getControlPoint(start, end);\n      return [start, controlPoint, end];\n    },\n    getControlPoint([sx, sy], [ex, ey]) {\n      const {\n        getKLinePointByx,\n        mergedConfig\n      } = this;\n      const {\n        curvature,\n        k\n      } = mergedConfig;\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2];\n      const distance = getPointDistance([sx, sy], [ex, ey]);\n      const targetLength = distance / curvature;\n      const disDived = targetLength / 2;\n      let [dx, dy] = [mx, my];\n      do {\n        dx += disDived;\n        dy = getKLinePointByx(k, [mx, my], dx)[1];\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength);\n      return [dx, dy];\n    },\n    getKLinePointByx(k, [lx, ly], x) {\n      const y = ly - k * lx + k * x;\n      return [x, y];\n    },\n    async calcLineLengths() {\n      const {\n        $nextTick,\n        flylines,\n        $refs\n      } = this;\n      await $nextTick();\n      this.flylineLengths = flylines.map(({\n        key\n      }) => $refs[key][0].getTotalLength());\n    },\n    consoleClickPos({\n      offsetX,\n      offsetY\n    }) {\n      const {\n        width,\n        height,\n        dev\n      } = this;\n      if (!dev) return;\n      const relativeX = (offsetX / width).toFixed(2);\n      const relativeY = (offsetY / height).toFixed(2);\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["deepMerge","deepClone","randomExtend","getPointDistance","autoResize","name","mixins","props","config","type","Object","default","dev","Boolean","data","timestamp","Date","now","ref","unique","Math","random","flylineGradientId","haloGradientId","defaultConfig","points","lines","halo","show","duration","color","radius","text","offset","fontSize","icon","src","width","height","line","orbitColor","bgImgSrc","k","curvature","relative","flylines","flylineLengths","flylinePoints","mergedConfig","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","calcflylinePoints","calcLinePaths","calcLineLengths","map","item","i","coordinate","x","y","time","iw","ih","ox","oy","key","toString","getPath","source","target","sourcePoint","find","targetPoint","path","v","parseFloat","toFixed","d","start","end","getControlPoint","controlPoint","sx","sy","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","lx","ly","$nextTick","$refs","getTotalLength","consoleClickPos","offsetX","offsetY","relativeX","relativeY","console","warn"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart-enhanced\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\n    :ref=\"ref\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"flylineGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"haloGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n      </defs>\n\n      <!-- points -->\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\n        <defs>\n          <circle\n            v-if=\"point.halo.show\"\n            :id=\"`halo${unique}${point.key}`\"\n            :cx=\"point.coordinate[0]\"\n            :cy=\"point.coordinate[1]\"\n          >\n            <animate\n              attributeName=\"r\"\n              :values=\"`1;${point.halo.radius}`\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"opacity\"\n              values=\"1;0\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </defs>\n\n        <!-- halo gradient mask -->\n        <mask :id=\"`mask${unique}${point.key}`\">\n          <use\n            v-if=\"point.halo.show\"\n            :xlink:href=\"`#halo${unique}${point.key}`\"\n            :fill=\"`url(#${haloGradientId})`\"\n          />\n        </mask>\n\n        <!-- point halo -->\n        <use\n          v-if=\"point.halo.show\"\n          :xlink:href=\"`#halo${unique}${point.key}`\"\n          :fill=\"point.halo.color\"\n          :mask=\"`url(#mask${unique}${point.key})`\"\n        />\n\n        <!-- point icon -->\n        <image\n          v-if=\"point.icon.show\"\n          :xlink:href=\"point.icon.src\"\n          :width=\"point.icon.width\"\n          :height=\"point.icon.height\"\n          :x=\"point.icon.x\"\n          :y=\"point.icon.y\"\n        />\n\n        <!-- point text -->\n        <text\n          v-if=\"point.text.show\"\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\n          :fill=\"point.text.color\"\n          :x=\"point.text.x\"\n          :y=\"point.text.y\"\n        >\n          {{ point.name }}\n        </text>\n      </g>\n\n      <!-- flylines -->\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\n        <defs>\n          <path\n            :id=\"line.key\"\n            :ref=\"line.key\"\n            :d=\"line.d\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <!-- orbit line -->\n        <use\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.orbitColor\"\n        />\n\n        <!-- fly line gradient mask -->\n        <mask :id=\"`mask${unique}${line.key}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\n            <animateMotion\n              :dur=\"line.time\"\n              :path=\"line.d\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <!-- fly line -->\n        <use\n          v-if=\"flylineLengths[i]\"\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.color\"\n          :mask=\"`url(#mask${unique}${line.key})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${flylineLengths[i]}`\"\n            :to=\"`${flylineLengths[i]}, 0`\"\n            :dur=\"line.time\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${timestamp}`,\n      haloGradientId: `halo-gradient-id-${timestamp}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n\n      mergedConfig: null\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\n\n      mergeConfig()\n\n      calcflylinePoints()\n\n      calcLinePaths()\n\n      const { calcLineLengths } = this\n\n      await calcLineLengths()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points, lines, halo, text, icon, line } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\n        item.text = deepMerge(deepClone(text, true), item.text || {})\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\n\n        return item\n      })\n\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item)\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    calcflylinePoints () {\n      const { mergedConfig, width, height } = this\n\n      const { relative, points } = mergedConfig\n\n      this.flylinePoints = points.map((item, i) => {\n        const { coordinate: [x, y], halo, icon, text } = item\n\n        if (relative) item.coordinate = [x * width, y * height]\n\n        item.halo.time = randomExtend(...halo.duration) / 10\n\n        const { width: iw, height: ih } = icon\n        item.icon.x = item.coordinate[0] - iw / 2\n        item.icon.y = item.coordinate[1] - ih / 2\n\n        const [ox, oy] = text.offset\n        item.text.x = item.coordinate[0] + ox\n        item.text.y = item.coordinate[1] + oy\n\n        item.key = `${item.coordinate.toString()}${i}`\n\n        return item\n      })\n    },\n    calcLinePaths () {\n      const { getPath, mergedConfig } = this\n\n      const { points, lines } = mergedConfig\n\n      this.flylines = lines.map(item => {\n        const { source, target, duration } = item\n\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\n        const targetPoint = points.find(({ name }) => name === target).coordinate\n\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\n        const key = `path${path.toString()}`\n        const time = randomExtend(...duration) / 10\n\n        return { ...item, path, key, d, time }\n      })\n    },\n    getPath (start, end) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(start, end)\n\n      return [start, controlPoint, end]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, flylines, $refs } = this\n\n      await $nextTick()\n\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
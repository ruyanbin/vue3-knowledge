{"ast":null,"code":"import { Vector3, Spherical } from 'three';\n\n// Cesium / 3D tiles Spheroid:\n// - Up is Z at 90 degrees latitude\n// - 0, 0 latitude, longitude is X axis\n//      Z\n//      |\n//      |\n//      .----- Y\n//     /\n//   X\n\n// Three.js Spherical Coordinates\n// - Up is Y at 90 degrees latitude\n// - 0, 0 latitude, longitude is Z\n//       Y\n//      |\n//      |\n//      .----- X\n//     /\n//   Z\n\nfunction swapFrame(target) {\n  const {\n    x,\n    y,\n    z\n  } = target;\n  target.x = z;\n  target.y = x;\n  target.z = y;\n}\nexport function sphericalPhiToLatitude(phi) {\n  return -(phi - Math.PI / 2);\n}\nexport function latitudeToSphericalPhi(latitude) {\n  return -latitude + Math.PI / 2;\n}\nconst _spherical = new Spherical();\nconst _norm = new Vector3();\nconst _vec = new Vector3();\nexport class Ellipsoid {\n  constructor(x = 1, y = 1, z = 1) {\n    this.radius = new Vector3(x, y, z);\n  }\n  getCartographicToPosition(lat, lon, height, target) {\n    // https://github.com/CesiumGS/cesium/blob/main/Source/Core/Ellipsoid.js#L396\n    const radius = this.radius;\n    _spherical.set(1, latitudeToSphericalPhi(lat), lon);\n    _norm.setFromSpherical(_spherical).normalize();\n    swapFrame(_norm);\n    _vec.copy(_norm);\n    _vec.x *= radius.x ** 2;\n    _vec.y *= radius.y ** 2;\n    _vec.z *= radius.z ** 2;\n    const gamma = Math.sqrt(_norm.dot(_vec));\n    _vec.divideScalar(gamma);\n    return target.copy(_vec).addScaledVector(_norm, height);\n  }\n  getCartographicToNormal(lat, lon, target) {\n    _spherical.set(1, -lat + Math.PI / 2, lon);\n    target.setFromSpherical(_spherical).normalize();\n    swapFrame(target);\n    return target;\n  }\n  getPositionToNormal(pos, target) {\n    const radius = this.radius;\n    target.copy(pos);\n    target.x /= radius.x ** 2;\n    target.y /= radius.y ** 2;\n    target.z /= radius.z ** 2;\n    target.normalize();\n    return target;\n  }\n}","map":{"version":3,"names":["Vector3","Spherical","swapFrame","target","x","y","z","sphericalPhiToLatitude","phi","Math","PI","latitudeToSphericalPhi","latitude","_spherical","_norm","_vec","Ellipsoid","constructor","radius","getCartographicToPosition","lat","lon","height","set","setFromSpherical","normalize","copy","gamma","sqrt","dot","divideScalar","addScaledVector","getCartographicToNormal","getPositionToNormal","pos"],"sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/3d-tiles-renderer/src/three/math/Ellipsoid.js"],"sourcesContent":["import { Vector3, Spherical } from 'three';\n\n// Cesium / 3D tiles Spheroid:\n// - Up is Z at 90 degrees latitude\n// - 0, 0 latitude, longitude is X axis\n//      Z\n//      |\n//      |\n//      .----- Y\n//     /\n//   X\n\n\n// Three.js Spherical Coordinates\n// - Up is Y at 90 degrees latitude\n// - 0, 0 latitude, longitude is Z\n//       Y\n//      |\n//      |\n//      .----- X\n//     /\n//   Z\n\nfunction swapFrame( target ) {\n\n\tconst { x, y, z } = target;\n\ttarget.x = z;\n\ttarget.y = x;\n\ttarget.z = y;\n\n}\n\nexport function sphericalPhiToLatitude( phi ) {\n\n\treturn - ( phi - Math.PI / 2 );\n\n}\n\nexport function latitudeToSphericalPhi( latitude ) {\n\n\treturn - latitude + Math.PI / 2;\n\n}\n\nconst _spherical = new Spherical();\nconst _norm = new Vector3();\nconst _vec = new Vector3();\n\nexport class Ellipsoid {\n\n\tconstructor( x = 1, y = 1, z = 1 ) {\n\n\t\tthis.radius = new Vector3( x, y, z );\n\n\t}\n\n\tgetCartographicToPosition( lat, lon, height, target ) {\n\n\t\t// https://github.com/CesiumGS/cesium/blob/main/Source/Core/Ellipsoid.js#L396\n\t\tconst radius = this.radius;\n\t\t_spherical.set( 1, latitudeToSphericalPhi( lat ), lon );\n\t\t_norm.setFromSpherical( _spherical ).normalize();\n\n\t\tswapFrame( _norm );\n\n\t\t_vec.copy( _norm );\n\t\t_vec.x *= radius.x ** 2;\n\t\t_vec.y *= radius.y ** 2;\n\t\t_vec.z *= radius.z ** 2;\n\n\t\tconst gamma = Math.sqrt( _norm.dot( _vec ) );\n\t\t_vec.divideScalar( gamma );\n\n\t\treturn target.copy( _vec ).addScaledVector( _norm, height );\n\n\t}\n\n\tgetCartographicToNormal( lat, lon, target ) {\n\n\t\t_spherical.set( 1, ( - lat + Math.PI / 2 ), lon );\n\t\ttarget.setFromSpherical( _spherical ).normalize();\n\n\t\tswapFrame( target );\n\t\treturn target;\n\n\t}\n\n\tgetPositionToNormal( pos, target ) {\n\n\t\tconst radius = this.radius;\n\t\ttarget.copy( pos );\n\t\ttarget.x /= radius.x ** 2;\n\t\ttarget.y /= radius.y ** 2;\n\t\ttarget.z /= radius.z ** 2;\n\t\ttarget.normalize();\n\n\t\treturn target;\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
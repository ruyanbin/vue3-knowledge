{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6323ae02\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"overflow-auto\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"font-medium\"\n}, \"发布订阅者\")], -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_23 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_28 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_30 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_31 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_32 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_33 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_34 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_35 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_36 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_37 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_38 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_39 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_40 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_41 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_42 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_43 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_44 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_45 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_46 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache) {\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, null, {\n    header: _withCtx(() => [_hoisted_2]),\n    default: _withCtx(() => [_createTextVNode(\" 描述：\"), _hoisted_3, _createTextVNode(\" 订阅者（Subscriber）把自己想订阅的事件 注册（Subscribe）到调度中心（Event Channel）\"), _hoisted_4, _createTextVNode(\" 当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由 调度中心 统一调度（Fire Event）订阅者注册到调度中心的处理代码。\"), _hoisted_5, _createTextVNode(\" 思路：\"), _hoisted_6, _createTextVNode(\" 创建一个类 class \"), _hoisted_7, _createTextVNode(\" 在这个类里创建一个缓存列表(调度中心)\"), _hoisted_8, _createTextVNode(\" on 方法 - 用来把函数fn添加到缓存列表(订阅者注册事件到调度中心)\"), _hoisted_9, _createTextVNode(\" emit 方法 - 取到event事件类型，根据event值去执行对应缓存列表中的函数(发布者发布事件到调度中心，调度中心处理代码)\"), _hoisted_10, _createTextVNode(\" off 方法 - 可以根据event事件类型取消订阅(取消订阅)\"), _hoisted_11, _createTextVNode(\" class Observer {\"), _hoisted_12, _createTextVNode(\" constructor() { // 消息队列 this.message = {} \"), _hoisted_13, _createTextVNode(\" }\"), _hoisted_14, _createTextVNode(\" /**\"), _hoisted_15, _createTextVNode(\" * `$on` 向消息队列添加内容\"), _hoisted_16, _createTextVNode(\" * @param {*} type 事件名 (事件类型)\"), _hoisted_17, _createTextVNode(\" * @param {*} callback 回调函数\"), _hoisted_18, _createTextVNode(\" */\"), _hoisted_19, _createTextVNode(\" $on(type,callback){\"), _hoisted_20, _createTextVNode(\" // 判断有没有这个属性（事件类型） if (!this.message[type]) {\"), _hoisted_21, _createTextVNode(\" // 如果没有这个属性，就初始化一个空的数组 this.message[type] = [];\"), _hoisted_22, _createTextVNode(\" }\"), _hoisted_23, _createTextVNode(\" // 如果有这个属性，就往他的后面push一个新的callback\"), _hoisted_24, _createTextVNode(\" this.message[type].push(callback) }\"), _hoisted_25, _createTextVNode(\" /** * $off 删除消息队列里的内容 * @param {*} type 事件名 (事件类型) * @param {*} callback 回调函数 */\"), _hoisted_26, _createTextVNode(\" $off(type, callback){\"), _hoisted_27, _createTextVNode(\" // 判断是否有订阅，即消息队列里是否有type这个类型的事件，没有的话就直接return\"), _hoisted_28, _createTextVNode(\" if (!this.message[type]) return;\"), _hoisted_29, _createTextVNode(\" // 判断是否有callback这个参数\"), _hoisted_30, _createTextVNode(\" if (!callback) {\"), _hoisted_31, _createTextVNode(\" // 如果没有callback,就删掉整个事件ß\"), _hoisted_32, _createTextVNode(\" this.message[type] = undefined;\"), _hoisted_33, _createTextVNode(\" }\"), _hoisted_34, _createTextVNode(\" // 如果有callback,就仅仅删掉callback这个消息(过滤掉这个消息方法)\"), _hoisted_35, _createTextVNode(\" this.message[type] = this.message[type].filter((item) => item !== callback);\"), _hoisted_36, _createTextVNode(\" }\"), _hoisted_37, _createTextVNode(\" // 触发消息队列里的内容 $emit(){}\"), _hoisted_38, _createTextVNode(\" }\"), _hoisted_39, _createTextVNode(\" // 使用构造函数创建一个实例\"), _hoisted_40, _createTextVNode(\" const person1 = new Observer();\"), _hoisted_41, _createTextVNode(\" // 向这个`person1`委托一些内容，调用`person1 `的`$ON`方法\"), _hoisted_42, _createTextVNode(\" person1.$on('买红宝石', handlerA)\"), _hoisted_43, _createTextVNode(\" person1.$on('买红宝石', handlerB)\"), _hoisted_44, _createTextVNode(\" function handlerA() { console.log('handlerA'); }\"), _hoisted_45, _createTextVNode(\" function handlerB() { console.log('handlerB'); }\"), _hoisted_46]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"mappings":";;;EACMA,KAAK,EAAC;AAAe;gEAGvBC,oBAEM;EAFDD,KAAK,EAAC;AAAa,iBACvBC,oBAAsC;EAAhCD,KAAK,EAAC;AAAa,GAAC,OAAK;gEAG9BC,oBAAI;gEACmDA,oBAAI;gEAC4BA,oBAAI;gEAC3FA,oBAAI;gEACKA,oBAAI;gEACGA,oBAAI;gEACaA,oBAAI;iEAC0BA,oBAAI;iEACtCA,oBAAI;iEACpBA,oBAAI;iEAGFA,oBAAI;iEACrBA,oBAAI;iEACFA,oBAAI;iEACUA,oBAAI;iEACOA,oBAAI;iEACNA,oBAAI;iEAC5BA,oBAAI;iEACaA,oBAAI;iEAEGA,oBAAI;iEAENA,oBAAI;iEAC3BA,oBAAI;iEAC4BA,oBAAI;iEAEpCA,oBAAI;iEAKHA,oBAAI;iEACeA,oBAAI;iEACoBA,oBAAI;iEACjBA,oBAAI;iEAChBA,oBAAI;iEACRA,oBAAI;iEACIA,oBAAI;iEACGA,oBAAI;iEAClCA,oBAAI;iEACsCA,oBAAI;iEAC6BA,oBAAI;iEAC/EA,oBAAI;iEAEIA,oBAAI;iEACZA,oBAAI;iEACUA,oBAAI;iEACYA,oBAAI;iEAEOA,oBAAI;iEACjBA,oBAAI;iEACJA,oBAAI;iEAGhCA,oBAAI;iEAGJA,oBAAI;;;;uBAjEPC,oBAmEM,OAnENC,UAmEM,GAlELC,aAiEUC;IAhEEC,MAAM,WAChB,MAEM,CAFNC,UAEM;sBACI,MACR,kBADQ,MACR,aAAI,gFACmD,aAAI,gHAC4B,aAAI,yBAC3F,aAAI,kCACK,aAAI,yCACG,aAAI,0DACa,aAAI,wFAC0B,cAAI,sDACtC,cAAI,sCACpB,cAAI,gEAGF,cAAI,uBACrB,cAAI,yBACF,cAAI,uCACU,cAAI,kDACO,cAAI,gDACN,cAAI,wBAC5B,cAAI,yCACa,cAAI,mEAEG,cAAI,qEAEN,cAAI,uBAC3B,cAAI,uDAC4B,cAAI,yDAEpC,cAAI,sGAKH,cAAI,2CACe,cAAI,mEACoB,cAAI,sDACjB,cAAI,0CAChB,cAAI,sCACR,cAAI,8CACI,cAAI,qDACG,cAAI,uBAClC,cAAI,iEACsC,cAAI,kGAC6B,cAAI,uBAC/E,cAAI,6CAEI,cAAI,uBACZ,cAAI,qCACU,cAAI,qDACY,cAAI,gEAEO,cAAI,mDACjB,cAAI,mDACJ,cAAI,sEAGhC,cAAI,sEAGJ,cAAI","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_hoisted_2"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/src/views/Design/PublishSubscribe.vue"],"sourcesContent":["<template>\n\t<div class=\"overflow-auto\">\n\t\t<el-card>\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<span class=\"font-medium\">发布订阅者</span>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t描述：<br>\n\t\t\t订阅者（Subscriber）把自己想订阅的事件 注册（Subscribe）到调度中心（Event Channel）<br>\n\t\t\t当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由 调度中心 统一调度（Fire Event）订阅者注册到调度中心的处理代码。<br>\n\t\t\t思路：<br>\n\t\t\t创建一个类 class <br>\n\t\t\t在这个类里创建一个缓存列表(调度中心)<br>\n\t\t\ton 方法 - 用来把函数fn添加到缓存列表(订阅者注册事件到调度中心)<br>\n\t\t\temit 方法 - 取到event事件类型，根据event值去执行对应缓存列表中的函数(发布者发布事件到调度中心，调度中心处理代码)<br>\n\t\t\toff 方法 - 可以根据event事件类型取消订阅(取消订阅)<br>\n\t\t\tclass Observer {<br>\n\t\t\tconstructor() {\n\t\t\t// 消息队列\n\t\t\tthis.message = {} <br>\n\t\t\t}<br>\n\t\t\t/**<br>\n\t\t\t* `$on` 向消息队列添加内容<br>\n\t\t\t* @param {*} type 事件名 (事件类型)<br>\n\t\t\t* @param {*} callback 回调函数<br>\n\t\t\t*/<br>\n\t\t\t$on(type,callback){<br>\n\t\t\t// 判断有没有这个属性（事件类型）\n\t\t\tif (!this.message[type]) {<br>\n\t\t\t// 如果没有这个属性，就初始化一个空的数组\n\t\t\tthis.message[type] = [];<br>\n\t\t\t}<br>\n\t\t\t// 如果有这个属性，就往他的后面push一个新的callback<br>\n\t\t\tthis.message[type].push(callback)\n\t\t\t}<br>\n\t\t\t/**\n\t\t\t* $off 删除消息队列里的内容\n\t\t\t* @param {*} type 事件名 (事件类型)\n\t\t\t* @param {*} callback 回调函数\n\t\t\t*/<br>\n\t\t\t$off(type, callback){<br>\n\t\t\t// 判断是否有订阅，即消息队列里是否有type这个类型的事件，没有的话就直接return<br>\n\t\t\tif (!this.message[type]) return;<br>\n\t\t\t// 判断是否有callback这个参数<br>\n\t\t\tif (!callback) {<br>\n\t\t\t// 如果没有callback,就删掉整个事件ß<br>\n\t\t\tthis.message[type] = undefined;<br>\n\t\t\t}<br>\n\t\t\t// 如果有callback,就仅仅删掉callback这个消息(过滤掉这个消息方法)<br>\n\t\t\tthis.message[type] = this.message[type].filter((item) => item !== callback);<br>\n\t\t\t}<br>\n\t\t\t// 触发消息队列里的内容\n\t\t\t$emit(){}<br>\n\t\t\t}<br>\n\t\t\t// 使用构造函数创建一个实例<br>\n\t\t\tconst person1 = new Observer();<br>\n\n\t\t\t// 向这个`person1`委托一些内容，调用`person1 `的`$ON`方法<br>\n\t\t\tperson1.$on('买红宝石', handlerA)<br>\n\t\t\tperson1.$on('买红宝石', handlerB)<br>\n\t\t\tfunction handlerA() {\n\t\t\tconsole.log('handlerA');\n\t\t\t}<br>\n\t\t\tfunction handlerB() {\n\t\t\tconsole.log('handlerB');\n\t\t\t}<br>\n\t\t</el-card>\n\t</div>\n</template>\n\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n.overflow-auto {\n\theight: 100%;\n\twidth: 100%;\n\toverflow: auto;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
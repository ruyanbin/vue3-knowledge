{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ranking-info\"\n};\nconst _hoisted_2 = {\n  class: \"rank\"\n};\nconst _hoisted_3 = [\"innerHTML\"];\nconst _hoisted_4 = {\n  class: \"ranking-value\"\n};\nconst _hoisted_5 = {\n  class: \"ranking-column\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"shine\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_7 = [_hoisted_6];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-scroll-ranking-board\",\n    ref: $data.ref\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rows, (item, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"row-item\",\n      key: item.toString() + item.scroll,\n      style: _normalizeStyle(`height: ${$data.heights[i]}px;`)\n    }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, \"No.\" + _toDisplayString(item.ranking), 1 /* TEXT */), _createElementVNode(\"div\", {\n      class: \"info-name\",\n      innerHTML: item.name\n    }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"div\", _hoisted_4, _toDisplayString(item.value + $data.mergedConfig.unit), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", {\n      class: \"inside-column\",\n      style: _normalizeStyle(`width: ${item.percent}%;`)\n    }, _hoisted_7, 4 /* STYLE */)])], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;EAQWA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAM;;;EAEZA,KAAK,EAAC;AAAe;;EAGvBA,KAAK,EAAC;AAAgB;gCAKvBC,oBAAqB;EAAhBD,KAAK,EAAC;AAAO;oBAAlBE,UAAqB;;uBAlB7BC,oBAsBM;IAtBDH,KAAK,EAAC,yBAAyB;IAAEI,GAAG,EAAEC;yBACzCF,oBAoBMG,6BAlBgBD,UAAI,GAAhBE,IAAI,EAAEC,CAAC;yBAFjBL,oBAoBM;MAnBJH,KAAK,EAAC,UAAU;MAEfS,GAAG,EAAEF,IAAI,CAACG,QAAQ,KAAKH,IAAI,CAACI,MAAM;MAClCC,KAAK,6BAAaP,aAAO,CAACG,CAAC;QAE5BP,oBAIM,OAJNY,UAIM,GAHJZ,oBAA6C,OAA7Ca,UAA6C,EAA3B,KAAG,oBAAGP,IAAI,CAACQ,OAAO,kBACpCd,oBAA4C;MAAvCD,KAAK,EAAC,WAAW;MAACgB,SAAkB,EAAVT,IAAI,CAACU;yCACpChB,oBAAqE,OAArEiB,UAAqE,mBAAvCX,IAAI,CAACY,KAAK,GAAGd,kBAAY,CAACe,IAAI,oBAG9DnB,oBAOM,OAPNoB,UAOM,GANJpB,oBAKM;MAJJD,KAAK,EAAC,eAAe;MACpBY,KAAK,4BAAYL,IAAI,CAACe,OAAO","names":["class","_createElementVNode","_hoisted_6","_createElementBlock","ref","$data","_Fragment","item","i","key","toString","scroll","style","_hoisted_1","_hoisted_2","ranking","innerHTML","name","_hoisted_4","value","unit","_hoisted_5","percent"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n\n      const max = Math.max(...value) || 0\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: row.value / max * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { merge } from 'lodash-es';\nimport registerMixin from '../../../mixins/register-component.mjs';\nvar script = defineComponent({\n  name: \"ElAmapGeojson\",\n  mixins: [registerMixin],\n  props: {\n    geo: {\n      type: Object,\n      required: true\n    },\n    markerOptions: {\n      type: Object\n    },\n    getMarker: {\n      type: Function\n    },\n    polylineOptions: {\n      type: Object\n    },\n    getPolyline: {\n      type: Function\n    },\n    polygonOptions: {\n      type: Object\n    },\n    getPolygon: {\n      type: Function\n    }\n  },\n  data() {\n    return {\n      propsRedirect: {\n        geo: \"geoJSON\"\n      },\n      converters: {}\n    };\n  },\n  methods: {\n    __initComponent(options) {\n      return new Promise(resolve => {\n        AMap.plugin([\"AMap.GeoJSON\"], () => {\n          if (!options.getMarker) {\n            options.getMarker = this.createMarker;\n          }\n          if (!options.getPolyline) {\n            options.getPolyline = this.createPolyline;\n          }\n          if (!options.getPolygon) {\n            options.getPolygon = this.createPolygon;\n          }\n          this.$amapComponent = new AMap.GeoJSON(options);\n          this.$parentComponent.add(this.$amapComponent);\n          resolve();\n        });\n      });\n    },\n    createMarker(geojson, lnglat) {\n      let options = this.markerOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.position = lnglat;\n      return new AMap.Marker(options);\n    },\n    createPolyline(geojson, lnglat) {\n      let options = this.polylineOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.path = lnglat;\n      return new AMap.Polyline(options);\n    },\n    createPolygon(geojson, lnglat) {\n      let options = this.polygonOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.path = lnglat;\n      return new AMap.Polygon(options);\n    },\n    destroyComponent() {\n      if (!this.parentInstance.isDestroy) {\n        this.$parentComponent.remove(this.$amapComponent);\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    },\n    __geoJSON(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.importData(value);\n      }\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"mappings":";;;AAMA,aAAeA,eAAgB;EAC7BC,IAAM;EACNC,QAAQ,CAACC;EACTC,KAAO;IACLC,GAAK;MACHC,IAAM;MACNC,QAAU;IAAA;IAEZC,aAAe;MACbF,IAAM;IAAA;IAERG,SAAW;MACTH,IAAM;IAAA;IAERI,eAAiB;MACfJ,IAAM;IAAA;IAERK,WAAa;MACXL,IAAM;IAAA;IAERM,cAAgB;MACdN,IAAM;IAAA;IAERO,UAAY;MACVP,IAAM;IAAA;EAAA;EAGVQ,IAAO;IACE;MACLC,aAAe;QACbV,GAAK;MAAA;MAEPW,UAAY;IAAA;EAAA;EAGhBC,OAAS;IACPC,gBAAgBC,OAAS;MAChB,WAAIC,OAAc,CAACC,OAAY;QAC/BC,YAAO,CAAC,iBAAiB,MAAM;UAC9B,KAACH,QAAQV,SAAW;YACtBU,QAAQV,YAAY,IAAK;UAAA;UAEvB,KAACU,QAAQR,WAAa;YACxBQ,QAAQR,cAAc,IAAK;UAAA;UAEzB,KAACQ,QAAQN,UAAY;YACvBM,QAAQN,aAAa,IAAK;UAAA;UAEvB,sBAAiB,IAAIS,KAAKC,OAAQ;UAClC,sBAAiBC,IAAI,IAAK;UAC/BH;QAAA;MAAA;IAAA;IAINI,aAAaC,SAASC,MAAQ;MACxB,cAAU,KAAKnB,aAAiB;MAC1BW,gBAAM,EAAI,WAASO,OAAQ;MACrCP,QAAQS,QAAW;MACZ,WAAIN,KAAKO,MAAO;IAAA;IAEzBC,eAAeJ,SAASC,MAAQ;MAC1B,cAAU,KAAKjB,eAAmB;MAC5BS,gBAAM,EAAI,WAASO,OAAQ;MACrCP,QAAQY,IAAO;MACR,WAAIT,KAAKU,QAAS;IAAA;IAE3BC,cAAcP,SAASC,MAAQ;MACzB,cAAU,KAAKf,cAAkB;MAC3BO,gBAAM,EAAI,WAASO,OAAQ;MACrCP,QAAQY,IAAO;MACR,WAAIT,KAAKY,OAAQ;IAAA;IAE1BC,gBAAmB;MACd,KAAC,IAAK,gBAAeC,SAAU;QAC3B,sBAAiBC,OAAO,IAAK;MAAA;MAEpC,KAAKC,cAAiB;MACtB,KAAKC,gBAAmB;IAAA;IAE1BC,UAAUC,KAAO;MACf,IAAG,KAAKH,cAAe;QACrB,KAAKA,eAAeI,UAAW;MAAA;IAAA;EAAA;EAIrCC,MAAQ;IACC;EAAA;AAAA","names":["defineComponent","name","mixins","registerMixin","props","geo","type","required","markerOptions","getMarker","polylineOptions","getPolyline","polygonOptions","getPolygon","data","propsRedirect","converters","methods","__initComponent","options","Promise","resolve","AMap","GeoJSON","add","createMarker","geojson","lnglat","position","Marker","createPolyline","path","Polyline","createPolygon","Polygon","destroyComponent","isDestroy","remove","$amapComponent","$parentComponent","__geoJSON","value","importData","render"],"sources":["../../../../../../src/packages/vector/GeoJSON/GeoJSON.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport {merge} from 'lodash-es';\r\nimport registerMixin from '../../../mixins/register-component';\r\nimport {isMapInstance, isOverlayGroupInstance, isVectorLayerInstance} from \"../../../utils/util\";\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapGeojson',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    geo: {\r\n      type: Object,\r\n      required: true\r\n    }, // 要加载的标准GeoJSON对象\r\n    markerOptions: {\r\n      type: Object\r\n    }, // marker的默认样式\r\n    getMarker: {\r\n      type: Function\r\n    }, // 指定点要素的绘制方式，缺省时为Marker的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n    polylineOptions: {\r\n      type: Object\r\n    }, // polyline的默认样式\r\n    getPolyline: {\r\n      type: Function\r\n    }, // 指定线要素的绘制方式，缺省时为Polyline的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n    polygonOptions: {\r\n      type: Object\r\n    }, // polygon的默认样式\r\n    getPolygon: {\r\n      type: Function\r\n    } // 指定面要素的绘制方式，缺省时为Polygon的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n  },\r\n  data() {\r\n    return {\r\n      propsRedirect: {\r\n        geo: 'geoJSON'\r\n      },\r\n      converters: {},\r\n    };\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      return new Promise<void>((resolve) => {\r\n        AMap.plugin(['AMap.GeoJSON'], () => {\r\n          if (!options.getMarker) {\r\n            options.getMarker = this.createMarker;\r\n          }\r\n          if (!options.getPolyline) {\r\n            options.getPolyline = this.createPolyline;\r\n          }\r\n          if (!options.getPolygon) {\r\n            options.getPolygon = this.createPolygon;\r\n          }\r\n          this.$amapComponent = new AMap.GeoJSON(options);\r\n          this.$parentComponent.add(this.$amapComponent);\r\n          resolve();\r\n        });\r\n      });\r\n    },\r\n    createMarker(geojson, lnglat) {\r\n      let options = this.markerOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.position = lnglat;\r\n      return new AMap.Marker(options);\r\n    },\r\n    createPolyline(geojson, lnglat) {\r\n      let options = this.polylineOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.path = lnglat;\r\n      return new AMap.Polyline(options);\r\n    },\r\n    createPolygon(geojson, lnglat) {\r\n      let options = this.polygonOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.path = lnglat;\r\n      return new AMap.Polygon(options);\r\n    },\r\n    destroyComponent() {\r\n      if(!this.parentInstance.isDestroy){\r\n        this.$parentComponent.remove(this.$amapComponent);\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    },\r\n    __geoJSON(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.importData(value);\r\n      }\r\n    }\r\n  },\r\n  render(){\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
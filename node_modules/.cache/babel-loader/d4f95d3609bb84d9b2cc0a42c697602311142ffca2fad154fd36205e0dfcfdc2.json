{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet eventHelper;\nclass EventHelper {\n  constructor() {\n    this._listener = /* @__PURE__ */new Map();\n  }\n  addListener(instance, eventName, handler, context) {\n    if (!AMap) throw new Error(\"please wait for Map API load\");\n    if (!instance.on) {\n      return;\n    }\n    instance.on(eventName, handler, context);\n    if (!this._listener.get(instance)) this._listener.set(instance, {});\n    const listenerMap = this._listener.get(instance);\n    if (!listenerMap[eventName]) listenerMap[eventName] = [];\n    listenerMap[eventName].push(handler);\n  }\n  removeListener(instance, eventName, handler) {\n    if (!AMap) throw new Error(\"please wait for Map API load\");\n    if (!instance.off) {\n      return;\n    }\n    if (!this._listener.get(instance) || !this._listener.get(instance)[eventName]) return;\n    const listenerArr = this._listener.get(instance)[eventName];\n    if (handler) {\n      const lIndex = listenerArr.indexOf(handler);\n      instance.off(eventName, listenerArr[lIndex]);\n      listenerArr.splice(lIndex, 1);\n    } else {\n      listenerArr.forEach(listener => {\n        instance.off(eventName, listener);\n      });\n      this._listener.get(instance)[eventName] = [];\n    }\n  }\n  addListenerOnce(instance, eventName, handler, context) {\n    return instance.on(eventName, handler, context, true);\n  }\n  trigger(instance, eventName, args) {\n    return instance.emit(eventName, args);\n  }\n  clearListeners(instance) {\n    const listeners = this._listener.get(instance);\n    if (!listeners) return;\n    Object.keys(listeners).map(eventName => {\n      instance.clearEvents(eventName);\n    });\n  }\n}\neventHelper = eventHelper || new EventHelper();\nvar eventHelper$1 = eventHelper;\nexport { eventHelper$1 as default };","map":{"version":3,"mappings":";AAAA,IAAIA;AAEJ,MAAkBC;EAChBC,WAAc;IASZ,KAAKC,2BAAgB;EAAA;EAGvBC,WAAY,WAAUC,SAAW,WAASC,OAAS;IACjD,IAAI,CAACC,MAAM,MAAM,IAAIC,KAAM;IACvB,KAACC,SAASC,EAAI;MAChB;IAAA;IAGOD,YAAGJ,WAAWM,OAAS;IAC5B,KAAC,IAAK,WAAUC,GAAI,YAAgB,eAAUC,IAAIJ,QAAU;IAC1D,oBAAc,IAAK,WAAUG,GAAI;IACvC,IAAI,CAACE,WAAY,aAAYA,YAAYT,SAAa;IACtDS,YAAYT,WAAWU,IAAK;EAAA;EAI9BC,eAAeP,QAAU,aAAWE,OAAS;IAC3C,IAAI,CAACJ,MAAM,MAAM,IAAIC,KAAM;IACvB,KAACC,SAASQ,GAAK;MACjB;IAAA;IAEE,KAAC,KAAKd,SAAU,KAAIM,aAAa,CAAC,KAAKN,SAAU,KAAIM,QAAU,cAAY;IAC/E,MAAMS,WAAc,QAAKf,SAAU,KAAIM,QAAU;IACjD,IAAIE,OAAS;MACL,eAASO,YAAYC,OAAQ;MAC1BV,aAAIJ,WAAWa,WAAY;MACpCA,YAAYE,OAAOC,MAAQ;IAAA,CACtB;MACLH,YAAYI,QAAoBC;QAC9Bd,SAASQ,IAAIZ,SAAW;MAAA;MAErB,eAAUO,GAAI,WAAUP,SAAa;IAAA;EAAA;EAI9CmB,eAAgB,WAAUnB,SAAW,WAASC,OAAS;IACrD,OAAOG,QAAS,IAAGJ,SAAW,WAASC,OAAS;EAAA;EAGlDmB,QAAQhB,QAAU,aAAWiB,IAAM;IAC1B,gBAASC,KAAKtB,SAAW;EAAA;EAGlCuB,eAAenB,QAAU;IACjB,kBAAY,IAAK,WAAUG,GAAI;IACrC,IAAI,CAACiB,WAAW;IACTC,YAAKD,SAAW,MAAiBxB;MACtCI,SAASsB,WAAY;IAAA;EAAA;AAAA;AAK3B/B,cAAcA,eAAe,IAAIC;AAEjC,oBAAeD","names":["eventHelper","EventHelper","constructor","_listener","addListener","eventName","context","AMap","Error","instance","on","handler","get","set","listenerMap","push","removeListener","off","listenerArr","indexOf","splice","lIndex","forEach","listener","addListenerOnce","trigger","args","emit","clearListeners","listeners","Object","clearEvents"],"sources":["../../../../src/utils/event-helper.js"],"sourcesContent":["let eventHelper;\r\n\r\nclass EventHelper {\r\n  constructor() {\r\n    /**\r\n     * listener hasè¡¨\r\n     * {\r\n     *  instance: {\r\n     *              eventName: [...handlers]\r\n     *            }\r\n     * }\r\n     */\r\n    this._listener = new Map();\r\n  }\r\n\r\n  addListener(instance, eventName, handler, context) {\r\n    if (!AMap) throw new Error('please wait for Map API load');\r\n    if (!instance.on) {\r\n      return;\r\n    }\r\n    // let listener = AMap.event.addListener(instance, eventName, handler, context);\r\n    instance.on(eventName, handler, context);\r\n    if (!this._listener.get(instance)) this._listener.set(instance, {});\r\n    const listenerMap = this._listener.get(instance);\r\n    if (!listenerMap[eventName]) listenerMap[eventName] = [];\r\n    listenerMap[eventName].push(handler);\r\n\r\n  }\r\n\r\n  removeListener(instance, eventName, handler) {\r\n    if (!AMap) throw new Error('please wait for Map API load');\r\n    if (!instance.off) {\r\n      return;\r\n    }\r\n    if (!this._listener.get(instance) || !this._listener.get(instance)[eventName]) return;\r\n    const listenerArr = this._listener.get(instance)[eventName];\r\n    if (handler) {\r\n      const lIndex = listenerArr.indexOf(handler);\r\n      instance.off(eventName, listenerArr[lIndex]);\r\n      listenerArr.splice(lIndex, 1);\r\n    } else {\r\n      listenerArr.forEach(listener => {\r\n        instance.off(eventName, listener);\r\n      });\r\n      this._listener.get(instance)[eventName] = [];\r\n    }\r\n  }\r\n\r\n  addListenerOnce(instance, eventName, handler, context) {\r\n    return instance.on(eventName, handler, context, true);\r\n  }\r\n\r\n  trigger(instance, eventName, args) {\r\n    return instance.emit(eventName, args);\r\n  }\r\n\r\n  clearListeners(instance) {\r\n    const listeners = this._listener.get(instance);\r\n    if (!listeners) return;\r\n    Object.keys(listeners).map(eventName => {\r\n      instance.clearEvents(eventName);\r\n    });\r\n  }\r\n}\r\n\r\neventHelper = eventHelper || new EventHelper();\r\n\r\nexport default eventHelper;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
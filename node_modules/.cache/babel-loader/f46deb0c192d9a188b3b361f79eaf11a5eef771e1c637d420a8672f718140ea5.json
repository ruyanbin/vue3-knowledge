{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, renderSlot as _renderSlot, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = [\"fill\"];\nconst _hoisted_2 = {\n  class: \"border-box-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"dv-border-box-10\",\n    style: _normalizeStyle(`box-shadow: inset 0 0 25px 3px ${$data.mergedColor[0]}`)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.border, item => {\n    return _openBlock(), _createElementBlock(\"svg\", {\n      width: \"150px\",\n      height: \"150px\",\n      key: item,\n      class: _normalizeClass(`${item} border`)\n    }, [_createElementVNode(\"polygon\", {\n      fill: $data.mergedColor[1],\n      points: \"40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3\"\n    }, null, 8 /* PROPS */, _hoisted_1)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_2, [_renderSlot(_ctx.$slots, \"default\")])], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;;EAeSA,KAAK,EAAC;AAAoB;;uBAdjCC,oBAiBM;IAjBDD,KAAK,EAAC,kBAAkB;IAAEE,KAAK,oDAAoCC,iBAAW;yBACjFF,oBAWMG,6BAPWD,YAAM,EAAdE,IAAI;yBAJbJ,oBAWM;MAVJK,KAAK,EAAC,OAAO;MACbC,MAAM,EAAC,OAAO;MACbC,GAAG,EAAEH,IAAI;MAETL,KAAK,qBAAKK,IAAI;QAEfI,oBAGE;MAFCC,IAAI,EAAEP,iBAAW;MAClBQ,MAAM,EAAC;;kCAIXF,oBAEM,OAFNG,UAEM,GADJC,YAAaC","names":["class","_createElementBlock","style","$data","_Fragment","item","width","height","key","_createElementVNode","fill","points","_hoisted_2","_renderSlot","_ctx"],"sourceRoot":"","sources":["/Users/yanbinru/Desktop/代码/github/vue3-knowledge/node_modules/@jiaminghi/data-view/lib/components/borderBox10/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-border-box-10\" :style=\"`box-shadow: inset 0 0 25px 3px ${mergedColor[0]}`\">\n    <svg\n      width=\"150px\"\n      height=\"150px\"\n      :key=\"item\"\n      v-for=\"item in border\"\n      :class=\"`${item} border`\"\n    >\n      <polygon\n        :fill=\"mergedColor[1]\"\n        points=\"40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3\"\n      />\n    </svg>\n\n    <div class=\"border-box-content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvBorderBox10',\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    return {\n      border: ['left-top', 'right-top', 'left-bottom', 'right-bottom'],\n\n      defaultColor: ['#1d48c4', '#d3e1f8'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}